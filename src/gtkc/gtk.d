/*
 * This file is part of gtkD.
 *
 * gtkD is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version, with
 * some exceptions, please read the COPYING file.
 *
 * gtkD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with gtkD; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 */

// generated automatically - do not change
// find conversion definition on APILookup.txt
// implement new conversion functionalities on the wrap.utils pakage


module gtkc.gtk;

import std.stdio;
import gtkc.gtktypes;
import gtkc.Loader;
import gtkc.paths;

shared static this()
{
	// gtk.AboutDialog

	Linker.link(gtk_about_dialog_get_type, "gtk_about_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_new, "gtk_about_dialog_new", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_add_credit_section, "gtk_about_dialog_add_credit_section", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_artists, "gtk_about_dialog_get_artists", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_authors, "gtk_about_dialog_get_authors", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_comments, "gtk_about_dialog_get_comments", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_copyright, "gtk_about_dialog_get_copyright", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_documenters, "gtk_about_dialog_get_documenters", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_license, "gtk_about_dialog_get_license", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_license_type, "gtk_about_dialog_get_license_type", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_logo, "gtk_about_dialog_get_logo", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_logo_icon_name, "gtk_about_dialog_get_logo_icon_name", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_program_name, "gtk_about_dialog_get_program_name", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_translator_credits, "gtk_about_dialog_get_translator_credits", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_version, "gtk_about_dialog_get_version", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_website, "gtk_about_dialog_get_website", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_website_label, "gtk_about_dialog_get_website_label", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_get_wrap_license, "gtk_about_dialog_get_wrap_license", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_artists, "gtk_about_dialog_set_artists", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_authors, "gtk_about_dialog_set_authors", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_comments, "gtk_about_dialog_set_comments", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_copyright, "gtk_about_dialog_set_copyright", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_documenters, "gtk_about_dialog_set_documenters", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_license, "gtk_about_dialog_set_license", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_license_type, "gtk_about_dialog_set_license_type", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_logo, "gtk_about_dialog_set_logo", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_logo_icon_name, "gtk_about_dialog_set_logo_icon_name", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_program_name, "gtk_about_dialog_set_program_name", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_translator_credits, "gtk_about_dialog_set_translator_credits", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_version, "gtk_about_dialog_set_version", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_website, "gtk_about_dialog_set_website", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_website_label, "gtk_about_dialog_set_website_label", LIBRARY.GTK);
	Linker.link(gtk_about_dialog_set_wrap_license, "gtk_about_dialog_set_wrap_license", LIBRARY.GTK);
	Linker.link(gtk_show_about_dialog, "gtk_show_about_dialog", LIBRARY.GTK);

	// gtk.AccelGroup

	Linker.link(gtk_accel_group_get_type, "gtk_accel_group_get_type", LIBRARY.GTK);
	Linker.link(gtk_accel_group_new, "gtk_accel_group_new", LIBRARY.GTK);
	Linker.link(gtk_accel_group_from_accel_closure, "gtk_accel_group_from_accel_closure", LIBRARY.GTK);
	Linker.link(gtk_accel_group_activate, "gtk_accel_group_activate", LIBRARY.GTK);
	Linker.link(gtk_accel_group_connect, "gtk_accel_group_connect", LIBRARY.GTK);
	Linker.link(gtk_accel_group_connect_by_path, "gtk_accel_group_connect_by_path", LIBRARY.GTK);
	Linker.link(gtk_accel_group_disconnect, "gtk_accel_group_disconnect", LIBRARY.GTK);
	Linker.link(gtk_accel_group_disconnect_key, "gtk_accel_group_disconnect_key", LIBRARY.GTK);
	Linker.link(gtk_accel_group_find, "gtk_accel_group_find", LIBRARY.GTK);
	Linker.link(gtk_accel_group_get_is_locked, "gtk_accel_group_get_is_locked", LIBRARY.GTK);
	Linker.link(gtk_accel_group_get_modifier_mask, "gtk_accel_group_get_modifier_mask", LIBRARY.GTK);
	Linker.link(gtk_accel_group_lock, "gtk_accel_group_lock", LIBRARY.GTK);
	Linker.link(gtk_accel_group_query, "gtk_accel_group_query", LIBRARY.GTK);
	Linker.link(gtk_accel_group_unlock, "gtk_accel_group_unlock", LIBRARY.GTK);
	Linker.link(gtk_accel_groups_activate, "gtk_accel_groups_activate", LIBRARY.GTK);
	Linker.link(gtk_accel_groups_from_object, "gtk_accel_groups_from_object", LIBRARY.GTK);
	Linker.link(gtk_accelerator_get_default_mod_mask, "gtk_accelerator_get_default_mod_mask", LIBRARY.GTK);
	Linker.link(gtk_accelerator_get_label, "gtk_accelerator_get_label", LIBRARY.GTK);
	Linker.link(gtk_accelerator_get_label_with_keycode, "gtk_accelerator_get_label_with_keycode", LIBRARY.GTK);
	Linker.link(gtk_accelerator_name, "gtk_accelerator_name", LIBRARY.GTK);
	Linker.link(gtk_accelerator_name_with_keycode, "gtk_accelerator_name_with_keycode", LIBRARY.GTK);
	Linker.link(gtk_accelerator_parse, "gtk_accelerator_parse", LIBRARY.GTK);
	Linker.link(gtk_accelerator_parse_with_keycode, "gtk_accelerator_parse_with_keycode", LIBRARY.GTK);
	Linker.link(gtk_accelerator_set_default_mod_mask, "gtk_accelerator_set_default_mod_mask", LIBRARY.GTK);
	Linker.link(gtk_accelerator_valid, "gtk_accelerator_valid", LIBRARY.GTK);

	// gtk.AccelLabel

	Linker.link(gtk_accel_label_get_type, "gtk_accel_label_get_type", LIBRARY.GTK);
	Linker.link(gtk_accel_label_new, "gtk_accel_label_new", LIBRARY.GTK);
	Linker.link(gtk_accel_label_get_accel, "gtk_accel_label_get_accel", LIBRARY.GTK);
	Linker.link(gtk_accel_label_get_accel_widget, "gtk_accel_label_get_accel_widget", LIBRARY.GTK);
	Linker.link(gtk_accel_label_get_accel_width, "gtk_accel_label_get_accel_width", LIBRARY.GTK);
	Linker.link(gtk_accel_label_refetch, "gtk_accel_label_refetch", LIBRARY.GTK);
	Linker.link(gtk_accel_label_set_accel, "gtk_accel_label_set_accel", LIBRARY.GTK);
	Linker.link(gtk_accel_label_set_accel_closure, "gtk_accel_label_set_accel_closure", LIBRARY.GTK);
	Linker.link(gtk_accel_label_set_accel_widget, "gtk_accel_label_set_accel_widget", LIBRARY.GTK);

	// gtk.AccelMap

	Linker.link(gtk_accel_map_get_type, "gtk_accel_map_get_type", LIBRARY.GTK);
	Linker.link(gtk_accel_map_add_entry, "gtk_accel_map_add_entry", LIBRARY.GTK);
	Linker.link(gtk_accel_map_add_filter, "gtk_accel_map_add_filter", LIBRARY.GTK);
	Linker.link(gtk_accel_map_change_entry, "gtk_accel_map_change_entry", LIBRARY.GTK);
	Linker.link(gtk_accel_map_foreach, "gtk_accel_map_foreach", LIBRARY.GTK);
	Linker.link(gtk_accel_map_foreach_unfiltered, "gtk_accel_map_foreach_unfiltered", LIBRARY.GTK);
	Linker.link(gtk_accel_map_get, "gtk_accel_map_get", LIBRARY.GTK);
	Linker.link(gtk_accel_map_load, "gtk_accel_map_load", LIBRARY.GTK);
	Linker.link(gtk_accel_map_load_fd, "gtk_accel_map_load_fd", LIBRARY.GTK);
	Linker.link(gtk_accel_map_load_scanner, "gtk_accel_map_load_scanner", LIBRARY.GTK);
	Linker.link(gtk_accel_map_lock_path, "gtk_accel_map_lock_path", LIBRARY.GTK);
	Linker.link(gtk_accel_map_lookup_entry, "gtk_accel_map_lookup_entry", LIBRARY.GTK);
	Linker.link(gtk_accel_map_save, "gtk_accel_map_save", LIBRARY.GTK);
	Linker.link(gtk_accel_map_save_fd, "gtk_accel_map_save_fd", LIBRARY.GTK);
	Linker.link(gtk_accel_map_unlock_path, "gtk_accel_map_unlock_path", LIBRARY.GTK);

	// gtk.Accessible

	Linker.link(gtk_accessible_get_type, "gtk_accessible_get_type", LIBRARY.GTK);
	Linker.link(gtk_accessible_connect_widget_destroyed, "gtk_accessible_connect_widget_destroyed", LIBRARY.GTK);
	Linker.link(gtk_accessible_get_widget, "gtk_accessible_get_widget", LIBRARY.GTK);
	Linker.link(gtk_accessible_set_widget, "gtk_accessible_set_widget", LIBRARY.GTK);

	// gtk.Action

	Linker.link(gtk_action_get_type, "gtk_action_get_type", LIBRARY.GTK);
	Linker.link(gtk_action_new, "gtk_action_new", LIBRARY.GTK);
	Linker.link(gtk_action_activate, "gtk_action_activate", LIBRARY.GTK);
	Linker.link(gtk_action_block_activate, "gtk_action_block_activate", LIBRARY.GTK);
	Linker.link(gtk_action_connect_accelerator, "gtk_action_connect_accelerator", LIBRARY.GTK);
	Linker.link(gtk_action_create_icon, "gtk_action_create_icon", LIBRARY.GTK);
	Linker.link(gtk_action_create_menu, "gtk_action_create_menu", LIBRARY.GTK);
	Linker.link(gtk_action_create_menu_item, "gtk_action_create_menu_item", LIBRARY.GTK);
	Linker.link(gtk_action_create_tool_item, "gtk_action_create_tool_item", LIBRARY.GTK);
	Linker.link(gtk_action_disconnect_accelerator, "gtk_action_disconnect_accelerator", LIBRARY.GTK);
	Linker.link(gtk_action_get_accel_closure, "gtk_action_get_accel_closure", LIBRARY.GTK);
	Linker.link(gtk_action_get_accel_path, "gtk_action_get_accel_path", LIBRARY.GTK);
	Linker.link(gtk_action_get_always_show_image, "gtk_action_get_always_show_image", LIBRARY.GTK);
	Linker.link(gtk_action_get_gicon, "gtk_action_get_gicon", LIBRARY.GTK);
	Linker.link(gtk_action_get_icon_name, "gtk_action_get_icon_name", LIBRARY.GTK);
	Linker.link(gtk_action_get_is_important, "gtk_action_get_is_important", LIBRARY.GTK);
	Linker.link(gtk_action_get_label, "gtk_action_get_label", LIBRARY.GTK);
	Linker.link(gtk_action_get_name, "gtk_action_get_name", LIBRARY.GTK);
	Linker.link(gtk_action_get_proxies, "gtk_action_get_proxies", LIBRARY.GTK);
	Linker.link(gtk_action_get_sensitive, "gtk_action_get_sensitive", LIBRARY.GTK);
	Linker.link(gtk_action_get_short_label, "gtk_action_get_short_label", LIBRARY.GTK);
	Linker.link(gtk_action_get_stock_id, "gtk_action_get_stock_id", LIBRARY.GTK);
	Linker.link(gtk_action_get_tooltip, "gtk_action_get_tooltip", LIBRARY.GTK);
	Linker.link(gtk_action_get_visible, "gtk_action_get_visible", LIBRARY.GTK);
	Linker.link(gtk_action_get_visible_horizontal, "gtk_action_get_visible_horizontal", LIBRARY.GTK);
	Linker.link(gtk_action_get_visible_vertical, "gtk_action_get_visible_vertical", LIBRARY.GTK);
	Linker.link(gtk_action_is_sensitive, "gtk_action_is_sensitive", LIBRARY.GTK);
	Linker.link(gtk_action_is_visible, "gtk_action_is_visible", LIBRARY.GTK);
	Linker.link(gtk_action_set_accel_group, "gtk_action_set_accel_group", LIBRARY.GTK);
	Linker.link(gtk_action_set_accel_path, "gtk_action_set_accel_path", LIBRARY.GTK);
	Linker.link(gtk_action_set_always_show_image, "gtk_action_set_always_show_image", LIBRARY.GTK);
	Linker.link(gtk_action_set_gicon, "gtk_action_set_gicon", LIBRARY.GTK);
	Linker.link(gtk_action_set_icon_name, "gtk_action_set_icon_name", LIBRARY.GTK);
	Linker.link(gtk_action_set_is_important, "gtk_action_set_is_important", LIBRARY.GTK);
	Linker.link(gtk_action_set_label, "gtk_action_set_label", LIBRARY.GTK);
	Linker.link(gtk_action_set_sensitive, "gtk_action_set_sensitive", LIBRARY.GTK);
	Linker.link(gtk_action_set_short_label, "gtk_action_set_short_label", LIBRARY.GTK);
	Linker.link(gtk_action_set_stock_id, "gtk_action_set_stock_id", LIBRARY.GTK);
	Linker.link(gtk_action_set_tooltip, "gtk_action_set_tooltip", LIBRARY.GTK);
	Linker.link(gtk_action_set_visible, "gtk_action_set_visible", LIBRARY.GTK);
	Linker.link(gtk_action_set_visible_horizontal, "gtk_action_set_visible_horizontal", LIBRARY.GTK);
	Linker.link(gtk_action_set_visible_vertical, "gtk_action_set_visible_vertical", LIBRARY.GTK);
	Linker.link(gtk_action_unblock_activate, "gtk_action_unblock_activate", LIBRARY.GTK);

	// gtk.ActionBar

	Linker.link(gtk_action_bar_get_type, "gtk_action_bar_get_type", LIBRARY.GTK);
	Linker.link(gtk_action_bar_new, "gtk_action_bar_new", LIBRARY.GTK);
	Linker.link(gtk_action_bar_get_center_widget, "gtk_action_bar_get_center_widget", LIBRARY.GTK);
	Linker.link(gtk_action_bar_pack_end, "gtk_action_bar_pack_end", LIBRARY.GTK);
	Linker.link(gtk_action_bar_pack_start, "gtk_action_bar_pack_start", LIBRARY.GTK);
	Linker.link(gtk_action_bar_set_center_widget, "gtk_action_bar_set_center_widget", LIBRARY.GTK);

	// gtk.ActionGroup

	Linker.link(gtk_action_group_get_type, "gtk_action_group_get_type", LIBRARY.GTK);
	Linker.link(gtk_action_group_new, "gtk_action_group_new", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_action, "gtk_action_group_add_action", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_action_with_accel, "gtk_action_group_add_action_with_accel", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_actions, "gtk_action_group_add_actions", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_actions_full, "gtk_action_group_add_actions_full", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_radio_actions, "gtk_action_group_add_radio_actions", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_radio_actions_full, "gtk_action_group_add_radio_actions_full", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_toggle_actions, "gtk_action_group_add_toggle_actions", LIBRARY.GTK);
	Linker.link(gtk_action_group_add_toggle_actions_full, "gtk_action_group_add_toggle_actions_full", LIBRARY.GTK);
	Linker.link(gtk_action_group_get_accel_group, "gtk_action_group_get_accel_group", LIBRARY.GTK);
	Linker.link(gtk_action_group_get_action, "gtk_action_group_get_action", LIBRARY.GTK);
	Linker.link(gtk_action_group_get_name, "gtk_action_group_get_name", LIBRARY.GTK);
	Linker.link(gtk_action_group_get_sensitive, "gtk_action_group_get_sensitive", LIBRARY.GTK);
	Linker.link(gtk_action_group_get_visible, "gtk_action_group_get_visible", LIBRARY.GTK);
	Linker.link(gtk_action_group_list_actions, "gtk_action_group_list_actions", LIBRARY.GTK);
	Linker.link(gtk_action_group_remove_action, "gtk_action_group_remove_action", LIBRARY.GTK);
	Linker.link(gtk_action_group_set_accel_group, "gtk_action_group_set_accel_group", LIBRARY.GTK);
	Linker.link(gtk_action_group_set_sensitive, "gtk_action_group_set_sensitive", LIBRARY.GTK);
	Linker.link(gtk_action_group_set_translate_func, "gtk_action_group_set_translate_func", LIBRARY.GTK);
	Linker.link(gtk_action_group_set_translation_domain, "gtk_action_group_set_translation_domain", LIBRARY.GTK);
	Linker.link(gtk_action_group_set_visible, "gtk_action_group_set_visible", LIBRARY.GTK);
	Linker.link(gtk_action_group_translate_string, "gtk_action_group_translate_string", LIBRARY.GTK);

	// gtk.Actionable

	Linker.link(gtk_actionable_get_type, "gtk_actionable_get_type", LIBRARY.GTK);
	Linker.link(gtk_actionable_get_action_name, "gtk_actionable_get_action_name", LIBRARY.GTK);
	Linker.link(gtk_actionable_get_action_target_value, "gtk_actionable_get_action_target_value", LIBRARY.GTK);
	Linker.link(gtk_actionable_set_action_name, "gtk_actionable_set_action_name", LIBRARY.GTK);
	Linker.link(gtk_actionable_set_action_target, "gtk_actionable_set_action_target", LIBRARY.GTK);
	Linker.link(gtk_actionable_set_action_target_value, "gtk_actionable_set_action_target_value", LIBRARY.GTK);
	Linker.link(gtk_actionable_set_detailed_action_name, "gtk_actionable_set_detailed_action_name", LIBRARY.GTK);

	// gtk.Activatable

	Linker.link(gtk_activatable_get_type, "gtk_activatable_get_type", LIBRARY.GTK);
	Linker.link(gtk_activatable_do_set_related_action, "gtk_activatable_do_set_related_action", LIBRARY.GTK);
	Linker.link(gtk_activatable_get_related_action, "gtk_activatable_get_related_action", LIBRARY.GTK);
	Linker.link(gtk_activatable_get_use_action_appearance, "gtk_activatable_get_use_action_appearance", LIBRARY.GTK);
	Linker.link(gtk_activatable_set_related_action, "gtk_activatable_set_related_action", LIBRARY.GTK);
	Linker.link(gtk_activatable_set_use_action_appearance, "gtk_activatable_set_use_action_appearance", LIBRARY.GTK);
	Linker.link(gtk_activatable_sync_action_properties, "gtk_activatable_sync_action_properties", LIBRARY.GTK);

	// gtk.Adjustment

	Linker.link(gtk_adjustment_get_type, "gtk_adjustment_get_type", LIBRARY.GTK);
	Linker.link(gtk_adjustment_new, "gtk_adjustment_new", LIBRARY.GTK);
	Linker.link(gtk_adjustment_changed, "gtk_adjustment_changed", LIBRARY.GTK);
	Linker.link(gtk_adjustment_clamp_page, "gtk_adjustment_clamp_page", LIBRARY.GTK);
	Linker.link(gtk_adjustment_configure, "gtk_adjustment_configure", LIBRARY.GTK);
	Linker.link(gtk_adjustment_get_lower, "gtk_adjustment_get_lower", LIBRARY.GTK);
	Linker.link(gtk_adjustment_get_minimum_increment, "gtk_adjustment_get_minimum_increment", LIBRARY.GTK);
	Linker.link(gtk_adjustment_get_page_increment, "gtk_adjustment_get_page_increment", LIBRARY.GTK);
	Linker.link(gtk_adjustment_get_page_size, "gtk_adjustment_get_page_size", LIBRARY.GTK);
	Linker.link(gtk_adjustment_get_step_increment, "gtk_adjustment_get_step_increment", LIBRARY.GTK);
	Linker.link(gtk_adjustment_get_upper, "gtk_adjustment_get_upper", LIBRARY.GTK);
	Linker.link(gtk_adjustment_get_value, "gtk_adjustment_get_value", LIBRARY.GTK);
	Linker.link(gtk_adjustment_set_lower, "gtk_adjustment_set_lower", LIBRARY.GTK);
	Linker.link(gtk_adjustment_set_page_increment, "gtk_adjustment_set_page_increment", LIBRARY.GTK);
	Linker.link(gtk_adjustment_set_page_size, "gtk_adjustment_set_page_size", LIBRARY.GTK);
	Linker.link(gtk_adjustment_set_step_increment, "gtk_adjustment_set_step_increment", LIBRARY.GTK);
	Linker.link(gtk_adjustment_set_upper, "gtk_adjustment_set_upper", LIBRARY.GTK);
	Linker.link(gtk_adjustment_set_value, "gtk_adjustment_set_value", LIBRARY.GTK);
	Linker.link(gtk_adjustment_value_changed, "gtk_adjustment_value_changed", LIBRARY.GTK);

	// gtk.Alignment

	Linker.link(gtk_alignment_get_type, "gtk_alignment_get_type", LIBRARY.GTK);
	Linker.link(gtk_alignment_new, "gtk_alignment_new", LIBRARY.GTK);
	Linker.link(gtk_alignment_get_padding, "gtk_alignment_get_padding", LIBRARY.GTK);
	Linker.link(gtk_alignment_set, "gtk_alignment_set", LIBRARY.GTK);
	Linker.link(gtk_alignment_set_padding, "gtk_alignment_set_padding", LIBRARY.GTK);

	// gtk.AppChooser

	Linker.link(gtk_app_chooser_get_type, "gtk_app_chooser_get_type", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_get_app_info, "gtk_app_chooser_get_app_info", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_get_content_type, "gtk_app_chooser_get_content_type", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_refresh, "gtk_app_chooser_refresh", LIBRARY.GTK);

	// gtk.AppChooserButton

	Linker.link(gtk_app_chooser_button_get_type, "gtk_app_chooser_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_new, "gtk_app_chooser_button_new", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_append_custom_item, "gtk_app_chooser_button_append_custom_item", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_append_separator, "gtk_app_chooser_button_append_separator", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_get_heading, "gtk_app_chooser_button_get_heading", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_get_show_default_item, "gtk_app_chooser_button_get_show_default_item", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_get_show_dialog_item, "gtk_app_chooser_button_get_show_dialog_item", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_set_active_custom_item, "gtk_app_chooser_button_set_active_custom_item", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_set_heading, "gtk_app_chooser_button_set_heading", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_set_show_default_item, "gtk_app_chooser_button_set_show_default_item", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_button_set_show_dialog_item, "gtk_app_chooser_button_set_show_dialog_item", LIBRARY.GTK);

	// gtk.AppChooserDialog

	Linker.link(gtk_app_chooser_dialog_get_type, "gtk_app_chooser_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_dialog_new, "gtk_app_chooser_dialog_new", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_dialog_new_for_content_type, "gtk_app_chooser_dialog_new_for_content_type", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_dialog_get_heading, "gtk_app_chooser_dialog_get_heading", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_dialog_get_widget, "gtk_app_chooser_dialog_get_widget", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_dialog_set_heading, "gtk_app_chooser_dialog_set_heading", LIBRARY.GTK);

	// gtk.AppChooserWidget

	Linker.link(gtk_app_chooser_widget_get_type, "gtk_app_chooser_widget_get_type", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_new, "gtk_app_chooser_widget_new", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_get_default_text, "gtk_app_chooser_widget_get_default_text", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_get_show_all, "gtk_app_chooser_widget_get_show_all", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_get_show_default, "gtk_app_chooser_widget_get_show_default", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_get_show_fallback, "gtk_app_chooser_widget_get_show_fallback", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_get_show_other, "gtk_app_chooser_widget_get_show_other", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_get_show_recommended, "gtk_app_chooser_widget_get_show_recommended", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_set_default_text, "gtk_app_chooser_widget_set_default_text", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_set_show_all, "gtk_app_chooser_widget_set_show_all", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_set_show_default, "gtk_app_chooser_widget_set_show_default", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_set_show_fallback, "gtk_app_chooser_widget_set_show_fallback", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_set_show_other, "gtk_app_chooser_widget_set_show_other", LIBRARY.GTK);
	Linker.link(gtk_app_chooser_widget_set_show_recommended, "gtk_app_chooser_widget_set_show_recommended", LIBRARY.GTK);

	// gtk.Application

	Linker.link(gtk_application_get_type, "gtk_application_get_type", LIBRARY.GTK);
	Linker.link(gtk_application_new, "gtk_application_new", LIBRARY.GTK);
	Linker.link(gtk_application_add_accelerator, "gtk_application_add_accelerator", LIBRARY.GTK);
	Linker.link(gtk_application_add_window, "gtk_application_add_window", LIBRARY.GTK);
	Linker.link(gtk_application_get_accels_for_action, "gtk_application_get_accels_for_action", LIBRARY.GTK);
	Linker.link(gtk_application_get_actions_for_accel, "gtk_application_get_actions_for_accel", LIBRARY.GTK);
	Linker.link(gtk_application_get_active_window, "gtk_application_get_active_window", LIBRARY.GTK);
	Linker.link(gtk_application_get_app_menu, "gtk_application_get_app_menu", LIBRARY.GTK);
	Linker.link(gtk_application_get_menu_by_id, "gtk_application_get_menu_by_id", LIBRARY.GTK);
	Linker.link(gtk_application_get_menubar, "gtk_application_get_menubar", LIBRARY.GTK);
	Linker.link(gtk_application_get_window_by_id, "gtk_application_get_window_by_id", LIBRARY.GTK);
	Linker.link(gtk_application_get_windows, "gtk_application_get_windows", LIBRARY.GTK);
	Linker.link(gtk_application_inhibit, "gtk_application_inhibit", LIBRARY.GTK);
	Linker.link(gtk_application_is_inhibited, "gtk_application_is_inhibited", LIBRARY.GTK);
	Linker.link(gtk_application_list_action_descriptions, "gtk_application_list_action_descriptions", LIBRARY.GTK);
	Linker.link(gtk_application_prefers_app_menu, "gtk_application_prefers_app_menu", LIBRARY.GTK);
	Linker.link(gtk_application_remove_accelerator, "gtk_application_remove_accelerator", LIBRARY.GTK);
	Linker.link(gtk_application_remove_window, "gtk_application_remove_window", LIBRARY.GTK);
	Linker.link(gtk_application_set_accels_for_action, "gtk_application_set_accels_for_action", LIBRARY.GTK);
	Linker.link(gtk_application_set_app_menu, "gtk_application_set_app_menu", LIBRARY.GTK);
	Linker.link(gtk_application_set_menubar, "gtk_application_set_menubar", LIBRARY.GTK);
	Linker.link(gtk_application_uninhibit, "gtk_application_uninhibit", LIBRARY.GTK);

	// gtk.ApplicationWindow

	Linker.link(gtk_application_window_get_type, "gtk_application_window_get_type", LIBRARY.GTK);
	Linker.link(gtk_application_window_new, "gtk_application_window_new", LIBRARY.GTK);
	Linker.link(gtk_application_window_get_help_overlay, "gtk_application_window_get_help_overlay", LIBRARY.GTK);
	Linker.link(gtk_application_window_get_id, "gtk_application_window_get_id", LIBRARY.GTK);
	Linker.link(gtk_application_window_get_show_menubar, "gtk_application_window_get_show_menubar", LIBRARY.GTK);
	Linker.link(gtk_application_window_set_help_overlay, "gtk_application_window_set_help_overlay", LIBRARY.GTK);
	Linker.link(gtk_application_window_set_show_menubar, "gtk_application_window_set_show_menubar", LIBRARY.GTK);

	// gtk.Arrow

	Linker.link(gtk_arrow_get_type, "gtk_arrow_get_type", LIBRARY.GTK);
	Linker.link(gtk_arrow_new, "gtk_arrow_new", LIBRARY.GTK);
	Linker.link(gtk_arrow_set, "gtk_arrow_set", LIBRARY.GTK);

	// gtk.ArrowAccessible

	Linker.link(gtk_arrow_accessible_get_type, "gtk_arrow_accessible_get_type", LIBRARY.GTK);

	// gtk.AspectFrame

	Linker.link(gtk_aspect_frame_get_type, "gtk_aspect_frame_get_type", LIBRARY.GTK);
	Linker.link(gtk_aspect_frame_new, "gtk_aspect_frame_new", LIBRARY.GTK);
	Linker.link(gtk_aspect_frame_set, "gtk_aspect_frame_set", LIBRARY.GTK);

	// gtk.Assistant

	Linker.link(gtk_assistant_get_type, "gtk_assistant_get_type", LIBRARY.GTK);
	Linker.link(gtk_assistant_new, "gtk_assistant_new", LIBRARY.GTK);
	Linker.link(gtk_assistant_add_action_widget, "gtk_assistant_add_action_widget", LIBRARY.GTK);
	Linker.link(gtk_assistant_append_page, "gtk_assistant_append_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_commit, "gtk_assistant_commit", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_current_page, "gtk_assistant_get_current_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_n_pages, "gtk_assistant_get_n_pages", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_nth_page, "gtk_assistant_get_nth_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_page_complete, "gtk_assistant_get_page_complete", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_page_has_padding, "gtk_assistant_get_page_has_padding", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_page_header_image, "gtk_assistant_get_page_header_image", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_page_side_image, "gtk_assistant_get_page_side_image", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_page_title, "gtk_assistant_get_page_title", LIBRARY.GTK);
	Linker.link(gtk_assistant_get_page_type, "gtk_assistant_get_page_type", LIBRARY.GTK);
	Linker.link(gtk_assistant_insert_page, "gtk_assistant_insert_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_next_page, "gtk_assistant_next_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_prepend_page, "gtk_assistant_prepend_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_previous_page, "gtk_assistant_previous_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_remove_action_widget, "gtk_assistant_remove_action_widget", LIBRARY.GTK);
	Linker.link(gtk_assistant_remove_page, "gtk_assistant_remove_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_current_page, "gtk_assistant_set_current_page", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_forward_page_func, "gtk_assistant_set_forward_page_func", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_page_complete, "gtk_assistant_set_page_complete", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_page_has_padding, "gtk_assistant_set_page_has_padding", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_page_header_image, "gtk_assistant_set_page_header_image", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_page_side_image, "gtk_assistant_set_page_side_image", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_page_title, "gtk_assistant_set_page_title", LIBRARY.GTK);
	Linker.link(gtk_assistant_set_page_type, "gtk_assistant_set_page_type", LIBRARY.GTK);
	Linker.link(gtk_assistant_update_buttons_state, "gtk_assistant_update_buttons_state", LIBRARY.GTK);

	// gtk.Bin

	Linker.link(gtk_bin_get_type, "gtk_bin_get_type", LIBRARY.GTK);
	Linker.link(gtk_bin_get_child, "gtk_bin_get_child", LIBRARY.GTK);

	// gtk.BindingEntry

	Linker.link(gtk_binding_entry_add_signal, "gtk_binding_entry_add_signal", LIBRARY.GTK);
	Linker.link(gtk_binding_entry_add_signal_from_string, "gtk_binding_entry_add_signal_from_string", LIBRARY.GTK);
	Linker.link(gtk_binding_entry_add_signall, "gtk_binding_entry_add_signall", LIBRARY.GTK);
	Linker.link(gtk_binding_entry_remove, "gtk_binding_entry_remove", LIBRARY.GTK);
	Linker.link(gtk_binding_entry_skip, "gtk_binding_entry_skip", LIBRARY.GTK);

	// gtk.BindingSet

	Linker.link(gtk_binding_set_activate, "gtk_binding_set_activate", LIBRARY.GTK);
	Linker.link(gtk_binding_set_add_path, "gtk_binding_set_add_path", LIBRARY.GTK);
	Linker.link(gtk_binding_set_by_class, "gtk_binding_set_by_class", LIBRARY.GTK);
	Linker.link(gtk_binding_set_find, "gtk_binding_set_find", LIBRARY.GTK);
	Linker.link(gtk_binding_set_new, "gtk_binding_set_new", LIBRARY.GTK);
	Linker.link(gtk_bindings_activate, "gtk_bindings_activate", LIBRARY.GTK);
	Linker.link(gtk_bindings_activate_event, "gtk_bindings_activate_event", LIBRARY.GTK);

	// gtk.BooleanCellAccessible

	Linker.link(gtk_boolean_cell_accessible_get_type, "gtk_boolean_cell_accessible_get_type", LIBRARY.GTK);

	// gtk.Border

	Linker.link(gtk_border_get_type, "gtk_border_get_type", LIBRARY.GTK);
	Linker.link(gtk_border_new, "gtk_border_new", LIBRARY.GTK);
	Linker.link(gtk_border_copy, "gtk_border_copy", LIBRARY.GTK);
	Linker.link(gtk_border_free, "gtk_border_free", LIBRARY.GTK);

	// gtk.Box

	Linker.link(gtk_box_get_type, "gtk_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_box_new, "gtk_box_new", LIBRARY.GTK);
	Linker.link(gtk_box_get_baseline_position, "gtk_box_get_baseline_position", LIBRARY.GTK);
	Linker.link(gtk_box_get_center_widget, "gtk_box_get_center_widget", LIBRARY.GTK);
	Linker.link(gtk_box_get_homogeneous, "gtk_box_get_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_box_get_spacing, "gtk_box_get_spacing", LIBRARY.GTK);
	Linker.link(gtk_box_pack_end, "gtk_box_pack_end", LIBRARY.GTK);
	Linker.link(gtk_box_pack_start, "gtk_box_pack_start", LIBRARY.GTK);
	Linker.link(gtk_box_query_child_packing, "gtk_box_query_child_packing", LIBRARY.GTK);
	Linker.link(gtk_box_reorder_child, "gtk_box_reorder_child", LIBRARY.GTK);
	Linker.link(gtk_box_set_baseline_position, "gtk_box_set_baseline_position", LIBRARY.GTK);
	Linker.link(gtk_box_set_center_widget, "gtk_box_set_center_widget", LIBRARY.GTK);
	Linker.link(gtk_box_set_child_packing, "gtk_box_set_child_packing", LIBRARY.GTK);
	Linker.link(gtk_box_set_homogeneous, "gtk_box_set_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_box_set_spacing, "gtk_box_set_spacing", LIBRARY.GTK);

	// gtk.Buildable

	Linker.link(gtk_buildable_get_type, "gtk_buildable_get_type", LIBRARY.GTK);
	Linker.link(gtk_buildable_add_child, "gtk_buildable_add_child", LIBRARY.GTK);
	Linker.link(gtk_buildable_construct_child, "gtk_buildable_construct_child", LIBRARY.GTK);
	Linker.link(gtk_buildable_custom_finished, "gtk_buildable_custom_finished", LIBRARY.GTK);
	Linker.link(gtk_buildable_custom_tag_end, "gtk_buildable_custom_tag_end", LIBRARY.GTK);
	Linker.link(gtk_buildable_custom_tag_start, "gtk_buildable_custom_tag_start", LIBRARY.GTK);
	Linker.link(gtk_buildable_get_internal_child, "gtk_buildable_get_internal_child", LIBRARY.GTK);
	Linker.link(gtk_buildable_get_name, "gtk_buildable_get_name", LIBRARY.GTK);
	Linker.link(gtk_buildable_parser_finished, "gtk_buildable_parser_finished", LIBRARY.GTK);
	Linker.link(gtk_buildable_set_buildable_property, "gtk_buildable_set_buildable_property", LIBRARY.GTK);
	Linker.link(gtk_buildable_set_name, "gtk_buildable_set_name", LIBRARY.GTK);

	// gtk.Builder

	Linker.link(gtk_builder_get_type, "gtk_builder_get_type", LIBRARY.GTK);
	Linker.link(gtk_builder_new, "gtk_builder_new", LIBRARY.GTK);
	Linker.link(gtk_builder_new_from_file, "gtk_builder_new_from_file", LIBRARY.GTK);
	Linker.link(gtk_builder_new_from_resource, "gtk_builder_new_from_resource", LIBRARY.GTK);
	Linker.link(gtk_builder_new_from_string, "gtk_builder_new_from_string", LIBRARY.GTK);
	Linker.link(gtk_builder_add_callback_symbol, "gtk_builder_add_callback_symbol", LIBRARY.GTK);
	Linker.link(gtk_builder_add_callback_symbols, "gtk_builder_add_callback_symbols", LIBRARY.GTK);
	Linker.link(gtk_builder_add_from_file, "gtk_builder_add_from_file", LIBRARY.GTK);
	Linker.link(gtk_builder_add_from_resource, "gtk_builder_add_from_resource", LIBRARY.GTK);
	Linker.link(gtk_builder_add_from_string, "gtk_builder_add_from_string", LIBRARY.GTK);
	Linker.link(gtk_builder_add_objects_from_file, "gtk_builder_add_objects_from_file", LIBRARY.GTK);
	Linker.link(gtk_builder_add_objects_from_resource, "gtk_builder_add_objects_from_resource", LIBRARY.GTK);
	Linker.link(gtk_builder_add_objects_from_string, "gtk_builder_add_objects_from_string", LIBRARY.GTK);
	Linker.link(gtk_builder_connect_signals, "gtk_builder_connect_signals", LIBRARY.GTK);
	Linker.link(gtk_builder_connect_signals_full, "gtk_builder_connect_signals_full", LIBRARY.GTK);
	Linker.link(gtk_builder_expose_object, "gtk_builder_expose_object", LIBRARY.GTK);
	Linker.link(gtk_builder_extend_with_template, "gtk_builder_extend_with_template", LIBRARY.GTK);
	Linker.link(gtk_builder_get_application, "gtk_builder_get_application", LIBRARY.GTK);
	Linker.link(gtk_builder_get_object, "gtk_builder_get_object", LIBRARY.GTK);
	Linker.link(gtk_builder_get_objects, "gtk_builder_get_objects", LIBRARY.GTK);
	Linker.link(gtk_builder_get_translation_domain, "gtk_builder_get_translation_domain", LIBRARY.GTK);
	Linker.link(gtk_builder_get_type_from_name, "gtk_builder_get_type_from_name", LIBRARY.GTK);
	Linker.link(gtk_builder_lookup_callback_symbol, "gtk_builder_lookup_callback_symbol", LIBRARY.GTK);
	Linker.link(gtk_builder_set_application, "gtk_builder_set_application", LIBRARY.GTK);
	Linker.link(gtk_builder_set_translation_domain, "gtk_builder_set_translation_domain", LIBRARY.GTK);
	Linker.link(gtk_builder_value_from_string, "gtk_builder_value_from_string", LIBRARY.GTK);
	Linker.link(gtk_builder_value_from_string_type, "gtk_builder_value_from_string_type", LIBRARY.GTK);

	// gtk.Button

	Linker.link(gtk_button_get_type, "gtk_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_button_new, "gtk_button_new", LIBRARY.GTK);
	Linker.link(gtk_button_new_from_icon_name, "gtk_button_new_from_icon_name", LIBRARY.GTK);
	Linker.link(gtk_button_new_from_stock, "gtk_button_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_button_new_with_label, "gtk_button_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_button_new_with_mnemonic, "gtk_button_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_button_clicked, "gtk_button_clicked", LIBRARY.GTK);
	Linker.link(gtk_button_enter, "gtk_button_enter", LIBRARY.GTK);
	Linker.link(gtk_button_get_alignment, "gtk_button_get_alignment", LIBRARY.GTK);
	Linker.link(gtk_button_get_always_show_image, "gtk_button_get_always_show_image", LIBRARY.GTK);
	Linker.link(gtk_button_get_event_window, "gtk_button_get_event_window", LIBRARY.GTK);
	Linker.link(gtk_button_get_focus_on_click, "gtk_button_get_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_button_get_image, "gtk_button_get_image", LIBRARY.GTK);
	Linker.link(gtk_button_get_image_position, "gtk_button_get_image_position", LIBRARY.GTK);
	Linker.link(gtk_button_get_label, "gtk_button_get_label", LIBRARY.GTK);
	Linker.link(gtk_button_get_relief, "gtk_button_get_relief", LIBRARY.GTK);
	Linker.link(gtk_button_get_use_stock, "gtk_button_get_use_stock", LIBRARY.GTK);
	Linker.link(gtk_button_get_use_underline, "gtk_button_get_use_underline", LIBRARY.GTK);
	Linker.link(gtk_button_leave, "gtk_button_leave", LIBRARY.GTK);
	Linker.link(gtk_button_pressed, "gtk_button_pressed", LIBRARY.GTK);
	Linker.link(gtk_button_released, "gtk_button_released", LIBRARY.GTK);
	Linker.link(gtk_button_set_alignment, "gtk_button_set_alignment", LIBRARY.GTK);
	Linker.link(gtk_button_set_always_show_image, "gtk_button_set_always_show_image", LIBRARY.GTK);
	Linker.link(gtk_button_set_focus_on_click, "gtk_button_set_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_button_set_image, "gtk_button_set_image", LIBRARY.GTK);
	Linker.link(gtk_button_set_image_position, "gtk_button_set_image_position", LIBRARY.GTK);
	Linker.link(gtk_button_set_label, "gtk_button_set_label", LIBRARY.GTK);
	Linker.link(gtk_button_set_relief, "gtk_button_set_relief", LIBRARY.GTK);
	Linker.link(gtk_button_set_use_stock, "gtk_button_set_use_stock", LIBRARY.GTK);
	Linker.link(gtk_button_set_use_underline, "gtk_button_set_use_underline", LIBRARY.GTK);

	// gtk.ButtonAccessible

	Linker.link(gtk_button_accessible_get_type, "gtk_button_accessible_get_type", LIBRARY.GTK);

	// gtk.ButtonBox

	Linker.link(gtk_button_box_get_type, "gtk_button_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_button_box_new, "gtk_button_box_new", LIBRARY.GTK);
	Linker.link(gtk_button_box_get_child_non_homogeneous, "gtk_button_box_get_child_non_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_button_box_get_child_secondary, "gtk_button_box_get_child_secondary", LIBRARY.GTK);
	Linker.link(gtk_button_box_get_layout, "gtk_button_box_get_layout", LIBRARY.GTK);
	Linker.link(gtk_button_box_set_child_non_homogeneous, "gtk_button_box_set_child_non_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_button_box_set_child_secondary, "gtk_button_box_set_child_secondary", LIBRARY.GTK);
	Linker.link(gtk_button_box_set_layout, "gtk_button_box_set_layout", LIBRARY.GTK);

	// gtk.Calendar

	Linker.link(gtk_calendar_get_type, "gtk_calendar_get_type", LIBRARY.GTK);
	Linker.link(gtk_calendar_new, "gtk_calendar_new", LIBRARY.GTK);
	Linker.link(gtk_calendar_clear_marks, "gtk_calendar_clear_marks", LIBRARY.GTK);
	Linker.link(gtk_calendar_get_date, "gtk_calendar_get_date", LIBRARY.GTK);
	Linker.link(gtk_calendar_get_day_is_marked, "gtk_calendar_get_day_is_marked", LIBRARY.GTK);
	Linker.link(gtk_calendar_get_detail_height_rows, "gtk_calendar_get_detail_height_rows", LIBRARY.GTK);
	Linker.link(gtk_calendar_get_detail_width_chars, "gtk_calendar_get_detail_width_chars", LIBRARY.GTK);
	Linker.link(gtk_calendar_get_display_options, "gtk_calendar_get_display_options", LIBRARY.GTK);
	Linker.link(gtk_calendar_mark_day, "gtk_calendar_mark_day", LIBRARY.GTK);
	Linker.link(gtk_calendar_select_day, "gtk_calendar_select_day", LIBRARY.GTK);
	Linker.link(gtk_calendar_select_month, "gtk_calendar_select_month", LIBRARY.GTK);
	Linker.link(gtk_calendar_set_detail_func, "gtk_calendar_set_detail_func", LIBRARY.GTK);
	Linker.link(gtk_calendar_set_detail_height_rows, "gtk_calendar_set_detail_height_rows", LIBRARY.GTK);
	Linker.link(gtk_calendar_set_detail_width_chars, "gtk_calendar_set_detail_width_chars", LIBRARY.GTK);
	Linker.link(gtk_calendar_set_display_options, "gtk_calendar_set_display_options", LIBRARY.GTK);
	Linker.link(gtk_calendar_unmark_day, "gtk_calendar_unmark_day", LIBRARY.GTK);

	// gtk.CellAccessible

	Linker.link(gtk_cell_accessible_get_type, "gtk_cell_accessible_get_type", LIBRARY.GTK);

	// gtk.CellAccessibleParent

	Linker.link(gtk_cell_accessible_parent_get_type, "gtk_cell_accessible_parent_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_activate, "gtk_cell_accessible_parent_activate", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_edit, "gtk_cell_accessible_parent_edit", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_expand_collapse, "gtk_cell_accessible_parent_expand_collapse", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_get_cell_area, "gtk_cell_accessible_parent_get_cell_area", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_get_cell_extents, "gtk_cell_accessible_parent_get_cell_extents", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_get_child_index, "gtk_cell_accessible_parent_get_child_index", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_get_renderer_state, "gtk_cell_accessible_parent_get_renderer_state", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_grab_focus, "gtk_cell_accessible_parent_grab_focus", LIBRARY.GTK);
	Linker.link(gtk_cell_accessible_parent_update_relationset, "gtk_cell_accessible_parent_update_relationset", LIBRARY.GTK);

	// gtk.CellArea

	Linker.link(gtk_cell_area_get_type, "gtk_cell_area_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_area_activate, "gtk_cell_area_activate", LIBRARY.GTK);
	Linker.link(gtk_cell_area_activate_cell, "gtk_cell_area_activate_cell", LIBRARY.GTK);
	Linker.link(gtk_cell_area_add, "gtk_cell_area_add", LIBRARY.GTK);
	Linker.link(gtk_cell_area_add_focus_sibling, "gtk_cell_area_add_focus_sibling", LIBRARY.GTK);
	Linker.link(gtk_cell_area_add_with_properties, "gtk_cell_area_add_with_properties", LIBRARY.GTK);
	Linker.link(gtk_cell_area_apply_attributes, "gtk_cell_area_apply_attributes", LIBRARY.GTK);
	Linker.link(gtk_cell_area_attribute_connect, "gtk_cell_area_attribute_connect", LIBRARY.GTK);
	Linker.link(gtk_cell_area_attribute_disconnect, "gtk_cell_area_attribute_disconnect", LIBRARY.GTK);
	Linker.link(gtk_cell_area_attribute_get_column, "gtk_cell_area_attribute_get_column", LIBRARY.GTK);
	Linker.link(gtk_cell_area_cell_get, "gtk_cell_area_cell_get", LIBRARY.GTK);
	Linker.link(gtk_cell_area_cell_get_property, "gtk_cell_area_cell_get_property", LIBRARY.GTK);
	Linker.link(gtk_cell_area_cell_get_valist, "gtk_cell_area_cell_get_valist", LIBRARY.GTK);
	Linker.link(gtk_cell_area_cell_set, "gtk_cell_area_cell_set", LIBRARY.GTK);
	Linker.link(gtk_cell_area_cell_set_property, "gtk_cell_area_cell_set_property", LIBRARY.GTK);
	Linker.link(gtk_cell_area_cell_set_valist, "gtk_cell_area_cell_set_valist", LIBRARY.GTK);
	Linker.link(gtk_cell_area_copy_context, "gtk_cell_area_copy_context", LIBRARY.GTK);
	Linker.link(gtk_cell_area_create_context, "gtk_cell_area_create_context", LIBRARY.GTK);
	Linker.link(gtk_cell_area_event, "gtk_cell_area_event", LIBRARY.GTK);
	Linker.link(gtk_cell_area_focus, "gtk_cell_area_focus", LIBRARY.GTK);
	Linker.link(gtk_cell_area_foreach, "gtk_cell_area_foreach", LIBRARY.GTK);
	Linker.link(gtk_cell_area_foreach_alloc, "gtk_cell_area_foreach_alloc", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_cell_allocation, "gtk_cell_area_get_cell_allocation", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_cell_at_position, "gtk_cell_area_get_cell_at_position", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_current_path_string, "gtk_cell_area_get_current_path_string", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_edit_widget, "gtk_cell_area_get_edit_widget", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_edited_cell, "gtk_cell_area_get_edited_cell", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_focus_cell, "gtk_cell_area_get_focus_cell", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_focus_from_sibling, "gtk_cell_area_get_focus_from_sibling", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_focus_siblings, "gtk_cell_area_get_focus_siblings", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_preferred_height, "gtk_cell_area_get_preferred_height", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_preferred_height_for_width, "gtk_cell_area_get_preferred_height_for_width", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_preferred_width, "gtk_cell_area_get_preferred_width", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_preferred_width_for_height, "gtk_cell_area_get_preferred_width_for_height", LIBRARY.GTK);
	Linker.link(gtk_cell_area_get_request_mode, "gtk_cell_area_get_request_mode", LIBRARY.GTK);
	Linker.link(gtk_cell_area_has_renderer, "gtk_cell_area_has_renderer", LIBRARY.GTK);
	Linker.link(gtk_cell_area_inner_cell_area, "gtk_cell_area_inner_cell_area", LIBRARY.GTK);
	Linker.link(gtk_cell_area_is_activatable, "gtk_cell_area_is_activatable", LIBRARY.GTK);
	Linker.link(gtk_cell_area_is_focus_sibling, "gtk_cell_area_is_focus_sibling", LIBRARY.GTK);
	Linker.link(gtk_cell_area_remove, "gtk_cell_area_remove", LIBRARY.GTK);
	Linker.link(gtk_cell_area_remove_focus_sibling, "gtk_cell_area_remove_focus_sibling", LIBRARY.GTK);
	Linker.link(gtk_cell_area_render, "gtk_cell_area_render", LIBRARY.GTK);
	Linker.link(gtk_cell_area_request_renderer, "gtk_cell_area_request_renderer", LIBRARY.GTK);
	Linker.link(gtk_cell_area_set_focus_cell, "gtk_cell_area_set_focus_cell", LIBRARY.GTK);
	Linker.link(gtk_cell_area_stop_editing, "gtk_cell_area_stop_editing", LIBRARY.GTK);

	// gtk.CellAreaBox

	Linker.link(gtk_cell_area_box_get_type, "gtk_cell_area_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_area_box_new, "gtk_cell_area_box_new", LIBRARY.GTK);
	Linker.link(gtk_cell_area_box_get_spacing, "gtk_cell_area_box_get_spacing", LIBRARY.GTK);
	Linker.link(gtk_cell_area_box_pack_end, "gtk_cell_area_box_pack_end", LIBRARY.GTK);
	Linker.link(gtk_cell_area_box_pack_start, "gtk_cell_area_box_pack_start", LIBRARY.GTK);
	Linker.link(gtk_cell_area_box_set_spacing, "gtk_cell_area_box_set_spacing", LIBRARY.GTK);

	// gtk.CellAreaClass

	Linker.link(gtk_cell_area_class_find_cell_property, "gtk_cell_area_class_find_cell_property", LIBRARY.GTK);
	Linker.link(gtk_cell_area_class_install_cell_property, "gtk_cell_area_class_install_cell_property", LIBRARY.GTK);
	Linker.link(gtk_cell_area_class_list_cell_properties, "gtk_cell_area_class_list_cell_properties", LIBRARY.GTK);

	// gtk.CellAreaContext

	Linker.link(gtk_cell_area_context_get_type, "gtk_cell_area_context_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_allocate, "gtk_cell_area_context_allocate", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_get_allocation, "gtk_cell_area_context_get_allocation", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_get_area, "gtk_cell_area_context_get_area", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_get_preferred_height, "gtk_cell_area_context_get_preferred_height", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_get_preferred_height_for_width, "gtk_cell_area_context_get_preferred_height_for_width", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_get_preferred_width, "gtk_cell_area_context_get_preferred_width", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_get_preferred_width_for_height, "gtk_cell_area_context_get_preferred_width_for_height", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_push_preferred_height, "gtk_cell_area_context_push_preferred_height", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_push_preferred_width, "gtk_cell_area_context_push_preferred_width", LIBRARY.GTK);
	Linker.link(gtk_cell_area_context_reset, "gtk_cell_area_context_reset", LIBRARY.GTK);

	// gtk.CellEditable

	Linker.link(gtk_cell_editable_get_type, "gtk_cell_editable_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_editable_editing_done, "gtk_cell_editable_editing_done", LIBRARY.GTK);
	Linker.link(gtk_cell_editable_remove_widget, "gtk_cell_editable_remove_widget", LIBRARY.GTK);
	Linker.link(gtk_cell_editable_start_editing, "gtk_cell_editable_start_editing", LIBRARY.GTK);

	// gtk.CellLayout

	Linker.link(gtk_cell_layout_get_type, "gtk_cell_layout_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_add_attribute, "gtk_cell_layout_add_attribute", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_clear, "gtk_cell_layout_clear", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_clear_attributes, "gtk_cell_layout_clear_attributes", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_get_area, "gtk_cell_layout_get_area", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_get_cells, "gtk_cell_layout_get_cells", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_pack_end, "gtk_cell_layout_pack_end", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_pack_start, "gtk_cell_layout_pack_start", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_reorder, "gtk_cell_layout_reorder", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_set_attributes, "gtk_cell_layout_set_attributes", LIBRARY.GTK);
	Linker.link(gtk_cell_layout_set_cell_data_func, "gtk_cell_layout_set_cell_data_func", LIBRARY.GTK);

	// gtk.CellRenderer

	Linker.link(gtk_cell_renderer_get_type, "gtk_cell_renderer_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_activate, "gtk_cell_renderer_activate", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_aligned_area, "gtk_cell_renderer_get_aligned_area", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_alignment, "gtk_cell_renderer_get_alignment", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_fixed_size, "gtk_cell_renderer_get_fixed_size", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_padding, "gtk_cell_renderer_get_padding", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_preferred_height, "gtk_cell_renderer_get_preferred_height", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_preferred_height_for_width, "gtk_cell_renderer_get_preferred_height_for_width", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_preferred_size, "gtk_cell_renderer_get_preferred_size", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_preferred_width, "gtk_cell_renderer_get_preferred_width", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_preferred_width_for_height, "gtk_cell_renderer_get_preferred_width_for_height", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_request_mode, "gtk_cell_renderer_get_request_mode", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_sensitive, "gtk_cell_renderer_get_sensitive", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_size, "gtk_cell_renderer_get_size", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_state, "gtk_cell_renderer_get_state", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_get_visible, "gtk_cell_renderer_get_visible", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_is_activatable, "gtk_cell_renderer_is_activatable", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_render, "gtk_cell_renderer_render", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_set_alignment, "gtk_cell_renderer_set_alignment", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_set_fixed_size, "gtk_cell_renderer_set_fixed_size", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_set_padding, "gtk_cell_renderer_set_padding", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_set_sensitive, "gtk_cell_renderer_set_sensitive", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_set_visible, "gtk_cell_renderer_set_visible", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_start_editing, "gtk_cell_renderer_start_editing", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_stop_editing, "gtk_cell_renderer_stop_editing", LIBRARY.GTK);

	// gtk.CellRendererAccel

	Linker.link(gtk_cell_renderer_accel_get_type, "gtk_cell_renderer_accel_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_accel_new, "gtk_cell_renderer_accel_new", LIBRARY.GTK);

	// gtk.CellRendererClass

	Linker.link(gtk_cell_renderer_class_set_accessible_type, "gtk_cell_renderer_class_set_accessible_type", LIBRARY.GTK);

	// gtk.CellRendererCombo

	Linker.link(gtk_cell_renderer_combo_get_type, "gtk_cell_renderer_combo_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_combo_new, "gtk_cell_renderer_combo_new", LIBRARY.GTK);

	// gtk.CellRendererPixbuf

	Linker.link(gtk_cell_renderer_pixbuf_get_type, "gtk_cell_renderer_pixbuf_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_pixbuf_new, "gtk_cell_renderer_pixbuf_new", LIBRARY.GTK);

	// gtk.CellRendererProgress

	Linker.link(gtk_cell_renderer_progress_get_type, "gtk_cell_renderer_progress_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_progress_new, "gtk_cell_renderer_progress_new", LIBRARY.GTK);

	// gtk.CellRendererSpin

	Linker.link(gtk_cell_renderer_spin_get_type, "gtk_cell_renderer_spin_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_spin_new, "gtk_cell_renderer_spin_new", LIBRARY.GTK);

	// gtk.CellRendererSpinner

	Linker.link(gtk_cell_renderer_spinner_get_type, "gtk_cell_renderer_spinner_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_spinner_new, "gtk_cell_renderer_spinner_new", LIBRARY.GTK);

	// gtk.CellRendererText

	Linker.link(gtk_cell_renderer_text_get_type, "gtk_cell_renderer_text_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_text_new, "gtk_cell_renderer_text_new", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_text_set_fixed_height_from_font, "gtk_cell_renderer_text_set_fixed_height_from_font", LIBRARY.GTK);

	// gtk.CellRendererToggle

	Linker.link(gtk_cell_renderer_toggle_get_type, "gtk_cell_renderer_toggle_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_toggle_new, "gtk_cell_renderer_toggle_new", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_toggle_get_activatable, "gtk_cell_renderer_toggle_get_activatable", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_toggle_get_active, "gtk_cell_renderer_toggle_get_active", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_toggle_get_radio, "gtk_cell_renderer_toggle_get_radio", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_toggle_set_activatable, "gtk_cell_renderer_toggle_set_activatable", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_toggle_set_active, "gtk_cell_renderer_toggle_set_active", LIBRARY.GTK);
	Linker.link(gtk_cell_renderer_toggle_set_radio, "gtk_cell_renderer_toggle_set_radio", LIBRARY.GTK);

	// gtk.CellView

	Linker.link(gtk_cell_view_get_type, "gtk_cell_view_get_type", LIBRARY.GTK);
	Linker.link(gtk_cell_view_new, "gtk_cell_view_new", LIBRARY.GTK);
	Linker.link(gtk_cell_view_new_with_context, "gtk_cell_view_new_with_context", LIBRARY.GTK);
	Linker.link(gtk_cell_view_new_with_markup, "gtk_cell_view_new_with_markup", LIBRARY.GTK);
	Linker.link(gtk_cell_view_new_with_pixbuf, "gtk_cell_view_new_with_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_cell_view_new_with_text, "gtk_cell_view_new_with_text", LIBRARY.GTK);
	Linker.link(gtk_cell_view_get_displayed_row, "gtk_cell_view_get_displayed_row", LIBRARY.GTK);
	Linker.link(gtk_cell_view_get_draw_sensitive, "gtk_cell_view_get_draw_sensitive", LIBRARY.GTK);
	Linker.link(gtk_cell_view_get_fit_model, "gtk_cell_view_get_fit_model", LIBRARY.GTK);
	Linker.link(gtk_cell_view_get_model, "gtk_cell_view_get_model", LIBRARY.GTK);
	Linker.link(gtk_cell_view_get_size_of_row, "gtk_cell_view_get_size_of_row", LIBRARY.GTK);
	Linker.link(gtk_cell_view_set_background_color, "gtk_cell_view_set_background_color", LIBRARY.GTK);
	Linker.link(gtk_cell_view_set_background_rgba, "gtk_cell_view_set_background_rgba", LIBRARY.GTK);
	Linker.link(gtk_cell_view_set_displayed_row, "gtk_cell_view_set_displayed_row", LIBRARY.GTK);
	Linker.link(gtk_cell_view_set_draw_sensitive, "gtk_cell_view_set_draw_sensitive", LIBRARY.GTK);
	Linker.link(gtk_cell_view_set_fit_model, "gtk_cell_view_set_fit_model", LIBRARY.GTK);
	Linker.link(gtk_cell_view_set_model, "gtk_cell_view_set_model", LIBRARY.GTK);

	// gtk.CheckButton

	Linker.link(gtk_check_button_get_type, "gtk_check_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_check_button_new, "gtk_check_button_new", LIBRARY.GTK);
	Linker.link(gtk_check_button_new_with_label, "gtk_check_button_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_check_button_new_with_mnemonic, "gtk_check_button_new_with_mnemonic", LIBRARY.GTK);

	// gtk.CheckMenuItem

	Linker.link(gtk_check_menu_item_get_type, "gtk_check_menu_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_new, "gtk_check_menu_item_new", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_new_with_label, "gtk_check_menu_item_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_new_with_mnemonic, "gtk_check_menu_item_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_get_active, "gtk_check_menu_item_get_active", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_get_draw_as_radio, "gtk_check_menu_item_get_draw_as_radio", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_get_inconsistent, "gtk_check_menu_item_get_inconsistent", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_set_active, "gtk_check_menu_item_set_active", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_set_draw_as_radio, "gtk_check_menu_item_set_draw_as_radio", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_set_inconsistent, "gtk_check_menu_item_set_inconsistent", LIBRARY.GTK);
	Linker.link(gtk_check_menu_item_toggled, "gtk_check_menu_item_toggled", LIBRARY.GTK);

	// gtk.CheckMenuItemAccessible

	Linker.link(gtk_check_menu_item_accessible_get_type, "gtk_check_menu_item_accessible_get_type", LIBRARY.GTK);

	// gtk.Clipboard

	Linker.link(gtk_clipboard_get_type, "gtk_clipboard_get_type", LIBRARY.GTK);
	Linker.link(gtk_clipboard_get, "gtk_clipboard_get", LIBRARY.GTK);
	Linker.link(gtk_clipboard_get_default, "gtk_clipboard_get_default", LIBRARY.GTK);
	Linker.link(gtk_clipboard_get_for_display, "gtk_clipboard_get_for_display", LIBRARY.GTK);
	Linker.link(gtk_clipboard_clear, "gtk_clipboard_clear", LIBRARY.GTK);
	Linker.link(gtk_clipboard_get_display, "gtk_clipboard_get_display", LIBRARY.GTK);
	Linker.link(gtk_clipboard_get_owner, "gtk_clipboard_get_owner", LIBRARY.GTK);
	Linker.link(gtk_clipboard_get_selection, "gtk_clipboard_get_selection", LIBRARY.GTK);
	Linker.link(gtk_clipboard_request_contents, "gtk_clipboard_request_contents", LIBRARY.GTK);
	Linker.link(gtk_clipboard_request_image, "gtk_clipboard_request_image", LIBRARY.GTK);
	Linker.link(gtk_clipboard_request_rich_text, "gtk_clipboard_request_rich_text", LIBRARY.GTK);
	Linker.link(gtk_clipboard_request_targets, "gtk_clipboard_request_targets", LIBRARY.GTK);
	Linker.link(gtk_clipboard_request_text, "gtk_clipboard_request_text", LIBRARY.GTK);
	Linker.link(gtk_clipboard_request_uris, "gtk_clipboard_request_uris", LIBRARY.GTK);
	Linker.link(gtk_clipboard_set_can_store, "gtk_clipboard_set_can_store", LIBRARY.GTK);
	Linker.link(gtk_clipboard_set_image, "gtk_clipboard_set_image", LIBRARY.GTK);
	Linker.link(gtk_clipboard_set_text, "gtk_clipboard_set_text", LIBRARY.GTK);
	Linker.link(gtk_clipboard_set_with_data, "gtk_clipboard_set_with_data", LIBRARY.GTK);
	Linker.link(gtk_clipboard_set_with_owner, "gtk_clipboard_set_with_owner", LIBRARY.GTK);
	Linker.link(gtk_clipboard_store, "gtk_clipboard_store", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_for_contents, "gtk_clipboard_wait_for_contents", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_for_image, "gtk_clipboard_wait_for_image", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_for_rich_text, "gtk_clipboard_wait_for_rich_text", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_for_targets, "gtk_clipboard_wait_for_targets", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_for_text, "gtk_clipboard_wait_for_text", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_for_uris, "gtk_clipboard_wait_for_uris", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_is_image_available, "gtk_clipboard_wait_is_image_available", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_is_rich_text_available, "gtk_clipboard_wait_is_rich_text_available", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_is_target_available, "gtk_clipboard_wait_is_target_available", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_is_text_available, "gtk_clipboard_wait_is_text_available", LIBRARY.GTK);
	Linker.link(gtk_clipboard_wait_is_uris_available, "gtk_clipboard_wait_is_uris_available", LIBRARY.GTK);

	// gtk.ColorButton

	Linker.link(gtk_color_button_get_type, "gtk_color_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_color_button_new, "gtk_color_button_new", LIBRARY.GTK);
	Linker.link(gtk_color_button_new_with_color, "gtk_color_button_new_with_color", LIBRARY.GTK);
	Linker.link(gtk_color_button_new_with_rgba, "gtk_color_button_new_with_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_button_get_alpha, "gtk_color_button_get_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_button_get_color, "gtk_color_button_get_color", LIBRARY.GTK);
	Linker.link(gtk_color_button_get_rgba, "gtk_color_button_get_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_button_get_title, "gtk_color_button_get_title", LIBRARY.GTK);
	Linker.link(gtk_color_button_get_use_alpha, "gtk_color_button_get_use_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_button_set_alpha, "gtk_color_button_set_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_button_set_color, "gtk_color_button_set_color", LIBRARY.GTK);
	Linker.link(gtk_color_button_set_rgba, "gtk_color_button_set_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_button_set_title, "gtk_color_button_set_title", LIBRARY.GTK);
	Linker.link(gtk_color_button_set_use_alpha, "gtk_color_button_set_use_alpha", LIBRARY.GTK);

	// gtk.ColorChooser

	Linker.link(gtk_color_chooser_get_type, "gtk_color_chooser_get_type", LIBRARY.GTK);
	Linker.link(gtk_color_chooser_add_palette, "gtk_color_chooser_add_palette", LIBRARY.GTK);
	Linker.link(gtk_color_chooser_get_rgba, "gtk_color_chooser_get_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_chooser_get_use_alpha, "gtk_color_chooser_get_use_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_chooser_set_rgba, "gtk_color_chooser_set_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_chooser_set_use_alpha, "gtk_color_chooser_set_use_alpha", LIBRARY.GTK);

	// gtk.ColorChooserDialog

	Linker.link(gtk_color_chooser_dialog_get_type, "gtk_color_chooser_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_color_chooser_dialog_new, "gtk_color_chooser_dialog_new", LIBRARY.GTK);

	// gtk.ColorChooserWidget

	Linker.link(gtk_color_chooser_widget_get_type, "gtk_color_chooser_widget_get_type", LIBRARY.GTK);
	Linker.link(gtk_color_chooser_widget_new, "gtk_color_chooser_widget_new", LIBRARY.GTK);

	// gtk.ColorSelection

	Linker.link(gtk_color_selection_get_type, "gtk_color_selection_get_type", LIBRARY.GTK);
	Linker.link(gtk_color_selection_new, "gtk_color_selection_new", LIBRARY.GTK);
	Linker.link(gtk_color_selection_palette_from_string, "gtk_color_selection_palette_from_string", LIBRARY.GTK);
	Linker.link(gtk_color_selection_palette_to_string, "gtk_color_selection_palette_to_string", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_change_palette_with_screen_hook, "gtk_color_selection_set_change_palette_with_screen_hook", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_current_alpha, "gtk_color_selection_get_current_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_current_color, "gtk_color_selection_get_current_color", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_current_rgba, "gtk_color_selection_get_current_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_has_opacity_control, "gtk_color_selection_get_has_opacity_control", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_has_palette, "gtk_color_selection_get_has_palette", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_previous_alpha, "gtk_color_selection_get_previous_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_previous_color, "gtk_color_selection_get_previous_color", LIBRARY.GTK);
	Linker.link(gtk_color_selection_get_previous_rgba, "gtk_color_selection_get_previous_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_selection_is_adjusting, "gtk_color_selection_is_adjusting", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_current_alpha, "gtk_color_selection_set_current_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_current_color, "gtk_color_selection_set_current_color", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_current_rgba, "gtk_color_selection_set_current_rgba", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_has_opacity_control, "gtk_color_selection_set_has_opacity_control", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_has_palette, "gtk_color_selection_set_has_palette", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_previous_alpha, "gtk_color_selection_set_previous_alpha", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_previous_color, "gtk_color_selection_set_previous_color", LIBRARY.GTK);
	Linker.link(gtk_color_selection_set_previous_rgba, "gtk_color_selection_set_previous_rgba", LIBRARY.GTK);

	// gtk.ColorSelectionDialog

	Linker.link(gtk_color_selection_dialog_get_type, "gtk_color_selection_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_color_selection_dialog_new, "gtk_color_selection_dialog_new", LIBRARY.GTK);
	Linker.link(gtk_color_selection_dialog_get_color_selection, "gtk_color_selection_dialog_get_color_selection", LIBRARY.GTK);

	// gtk.ComboBox

	Linker.link(gtk_combo_box_get_type, "gtk_combo_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_combo_box_new, "gtk_combo_box_new", LIBRARY.GTK);
	Linker.link(gtk_combo_box_new_with_area, "gtk_combo_box_new_with_area", LIBRARY.GTK);
	Linker.link(gtk_combo_box_new_with_area_and_entry, "gtk_combo_box_new_with_area_and_entry", LIBRARY.GTK);
	Linker.link(gtk_combo_box_new_with_entry, "gtk_combo_box_new_with_entry", LIBRARY.GTK);
	Linker.link(gtk_combo_box_new_with_model, "gtk_combo_box_new_with_model", LIBRARY.GTK);
	Linker.link(gtk_combo_box_new_with_model_and_entry, "gtk_combo_box_new_with_model_and_entry", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_active, "gtk_combo_box_get_active", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_active_id, "gtk_combo_box_get_active_id", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_active_iter, "gtk_combo_box_get_active_iter", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_add_tearoffs, "gtk_combo_box_get_add_tearoffs", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_button_sensitivity, "gtk_combo_box_get_button_sensitivity", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_column_span_column, "gtk_combo_box_get_column_span_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_entry_text_column, "gtk_combo_box_get_entry_text_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_focus_on_click, "gtk_combo_box_get_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_has_entry, "gtk_combo_box_get_has_entry", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_id_column, "gtk_combo_box_get_id_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_model, "gtk_combo_box_get_model", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_popup_accessible, "gtk_combo_box_get_popup_accessible", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_popup_fixed_width, "gtk_combo_box_get_popup_fixed_width", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_row_separator_func, "gtk_combo_box_get_row_separator_func", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_row_span_column, "gtk_combo_box_get_row_span_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_title, "gtk_combo_box_get_title", LIBRARY.GTK);
	Linker.link(gtk_combo_box_get_wrap_width, "gtk_combo_box_get_wrap_width", LIBRARY.GTK);
	Linker.link(gtk_combo_box_popdown, "gtk_combo_box_popdown", LIBRARY.GTK);
	Linker.link(gtk_combo_box_popup, "gtk_combo_box_popup", LIBRARY.GTK);
	Linker.link(gtk_combo_box_popup_for_device, "gtk_combo_box_popup_for_device", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_active, "gtk_combo_box_set_active", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_active_id, "gtk_combo_box_set_active_id", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_active_iter, "gtk_combo_box_set_active_iter", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_add_tearoffs, "gtk_combo_box_set_add_tearoffs", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_button_sensitivity, "gtk_combo_box_set_button_sensitivity", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_column_span_column, "gtk_combo_box_set_column_span_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_entry_text_column, "gtk_combo_box_set_entry_text_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_focus_on_click, "gtk_combo_box_set_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_id_column, "gtk_combo_box_set_id_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_model, "gtk_combo_box_set_model", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_popup_fixed_width, "gtk_combo_box_set_popup_fixed_width", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_row_separator_func, "gtk_combo_box_set_row_separator_func", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_row_span_column, "gtk_combo_box_set_row_span_column", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_title, "gtk_combo_box_set_title", LIBRARY.GTK);
	Linker.link(gtk_combo_box_set_wrap_width, "gtk_combo_box_set_wrap_width", LIBRARY.GTK);

	// gtk.ComboBoxAccessible

	Linker.link(gtk_combo_box_accessible_get_type, "gtk_combo_box_accessible_get_type", LIBRARY.GTK);

	// gtk.ComboBoxText

	Linker.link(gtk_combo_box_text_get_type, "gtk_combo_box_text_get_type", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_new, "gtk_combo_box_text_new", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_new_with_entry, "gtk_combo_box_text_new_with_entry", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_append, "gtk_combo_box_text_append", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_append_text, "gtk_combo_box_text_append_text", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_get_active_text, "gtk_combo_box_text_get_active_text", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_insert, "gtk_combo_box_text_insert", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_insert_text, "gtk_combo_box_text_insert_text", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_prepend, "gtk_combo_box_text_prepend", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_prepend_text, "gtk_combo_box_text_prepend_text", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_remove, "gtk_combo_box_text_remove", LIBRARY.GTK);
	Linker.link(gtk_combo_box_text_remove_all, "gtk_combo_box_text_remove_all", LIBRARY.GTK);

	// gtk.Container

	Linker.link(gtk_container_get_type, "gtk_container_get_type", LIBRARY.GTK);
	Linker.link(gtk_container_add, "gtk_container_add", LIBRARY.GTK);
	Linker.link(gtk_container_add_with_properties, "gtk_container_add_with_properties", LIBRARY.GTK);
	Linker.link(gtk_container_check_resize, "gtk_container_check_resize", LIBRARY.GTK);
	Linker.link(gtk_container_child_get, "gtk_container_child_get", LIBRARY.GTK);
	Linker.link(gtk_container_child_get_property, "gtk_container_child_get_property", LIBRARY.GTK);
	Linker.link(gtk_container_child_get_valist, "gtk_container_child_get_valist", LIBRARY.GTK);
	Linker.link(gtk_container_child_notify, "gtk_container_child_notify", LIBRARY.GTK);
	Linker.link(gtk_container_child_notify_by_pspec, "gtk_container_child_notify_by_pspec", LIBRARY.GTK);
	Linker.link(gtk_container_child_set, "gtk_container_child_set", LIBRARY.GTK);
	Linker.link(gtk_container_child_set_property, "gtk_container_child_set_property", LIBRARY.GTK);
	Linker.link(gtk_container_child_set_valist, "gtk_container_child_set_valist", LIBRARY.GTK);
	Linker.link(gtk_container_child_type, "gtk_container_child_type", LIBRARY.GTK);
	Linker.link(gtk_container_forall, "gtk_container_forall", LIBRARY.GTK);
	Linker.link(gtk_container_foreach, "gtk_container_foreach", LIBRARY.GTK);
	Linker.link(gtk_container_get_border_width, "gtk_container_get_border_width", LIBRARY.GTK);
	Linker.link(gtk_container_get_children, "gtk_container_get_children", LIBRARY.GTK);
	Linker.link(gtk_container_get_focus_chain, "gtk_container_get_focus_chain", LIBRARY.GTK);
	Linker.link(gtk_container_get_focus_child, "gtk_container_get_focus_child", LIBRARY.GTK);
	Linker.link(gtk_container_get_focus_hadjustment, "gtk_container_get_focus_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_container_get_focus_vadjustment, "gtk_container_get_focus_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_container_get_path_for_child, "gtk_container_get_path_for_child", LIBRARY.GTK);
	Linker.link(gtk_container_get_resize_mode, "gtk_container_get_resize_mode", LIBRARY.GTK);
	Linker.link(gtk_container_propagate_draw, "gtk_container_propagate_draw", LIBRARY.GTK);
	Linker.link(gtk_container_remove, "gtk_container_remove", LIBRARY.GTK);
	Linker.link(gtk_container_resize_children, "gtk_container_resize_children", LIBRARY.GTK);
	Linker.link(gtk_container_set_border_width, "gtk_container_set_border_width", LIBRARY.GTK);
	Linker.link(gtk_container_set_focus_chain, "gtk_container_set_focus_chain", LIBRARY.GTK);
	Linker.link(gtk_container_set_focus_child, "gtk_container_set_focus_child", LIBRARY.GTK);
	Linker.link(gtk_container_set_focus_hadjustment, "gtk_container_set_focus_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_container_set_focus_vadjustment, "gtk_container_set_focus_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_container_set_reallocate_redraws, "gtk_container_set_reallocate_redraws", LIBRARY.GTK);
	Linker.link(gtk_container_set_resize_mode, "gtk_container_set_resize_mode", LIBRARY.GTK);
	Linker.link(gtk_container_unset_focus_chain, "gtk_container_unset_focus_chain", LIBRARY.GTK);

	// gtk.ContainerAccessible

	Linker.link(gtk_container_accessible_get_type, "gtk_container_accessible_get_type", LIBRARY.GTK);

	// gtk.ContainerCellAccessible

	Linker.link(gtk_container_cell_accessible_get_type, "gtk_container_cell_accessible_get_type", LIBRARY.GTK);
	Linker.link(gtk_container_cell_accessible_new, "gtk_container_cell_accessible_new", LIBRARY.GTK);
	Linker.link(gtk_container_cell_accessible_add_child, "gtk_container_cell_accessible_add_child", LIBRARY.GTK);
	Linker.link(gtk_container_cell_accessible_get_children, "gtk_container_cell_accessible_get_children", LIBRARY.GTK);
	Linker.link(gtk_container_cell_accessible_remove_child, "gtk_container_cell_accessible_remove_child", LIBRARY.GTK);

	// gtk.ContainerClass

	Linker.link(gtk_container_class_find_child_property, "gtk_container_class_find_child_property", LIBRARY.GTK);
	Linker.link(gtk_container_class_handle_border_width, "gtk_container_class_handle_border_width", LIBRARY.GTK);
	Linker.link(gtk_container_class_install_child_properties, "gtk_container_class_install_child_properties", LIBRARY.GTK);
	Linker.link(gtk_container_class_install_child_property, "gtk_container_class_install_child_property", LIBRARY.GTK);
	Linker.link(gtk_container_class_list_child_properties, "gtk_container_class_list_child_properties", LIBRARY.GTK);

	// gtk.CssProvider

	Linker.link(gtk_css_provider_get_type, "gtk_css_provider_get_type", LIBRARY.GTK);
	Linker.link(gtk_css_provider_new, "gtk_css_provider_new", LIBRARY.GTK);
	Linker.link(gtk_css_provider_get_default, "gtk_css_provider_get_default", LIBRARY.GTK);
	Linker.link(gtk_css_provider_get_named, "gtk_css_provider_get_named", LIBRARY.GTK);
	Linker.link(gtk_css_provider_load_from_data, "gtk_css_provider_load_from_data", LIBRARY.GTK);
	Linker.link(gtk_css_provider_load_from_file, "gtk_css_provider_load_from_file", LIBRARY.GTK);
	Linker.link(gtk_css_provider_load_from_path, "gtk_css_provider_load_from_path", LIBRARY.GTK);
	Linker.link(gtk_css_provider_load_from_resource, "gtk_css_provider_load_from_resource", LIBRARY.GTK);
	Linker.link(gtk_css_provider_to_string, "gtk_css_provider_to_string", LIBRARY.GTK);

	// gtk.CssSection

	Linker.link(gtk_css_section_get_type, "gtk_css_section_get_type", LIBRARY.GTK);
	Linker.link(gtk_css_section_get_end_line, "gtk_css_section_get_end_line", LIBRARY.GTK);
	Linker.link(gtk_css_section_get_end_position, "gtk_css_section_get_end_position", LIBRARY.GTK);
	Linker.link(gtk_css_section_get_file, "gtk_css_section_get_file", LIBRARY.GTK);
	Linker.link(gtk_css_section_get_parent, "gtk_css_section_get_parent", LIBRARY.GTK);
	Linker.link(gtk_css_section_get_section_type, "gtk_css_section_get_section_type", LIBRARY.GTK);
	Linker.link(gtk_css_section_get_start_line, "gtk_css_section_get_start_line", LIBRARY.GTK);
	Linker.link(gtk_css_section_get_start_position, "gtk_css_section_get_start_position", LIBRARY.GTK);
	Linker.link(gtk_css_section_ref, "gtk_css_section_ref", LIBRARY.GTK);
	Linker.link(gtk_css_section_unref, "gtk_css_section_unref", LIBRARY.GTK);

	// gtk.Dialog

	Linker.link(gtk_dialog_get_type, "gtk_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_dialog_new, "gtk_dialog_new", LIBRARY.GTK);
	Linker.link(gtk_dialog_new_with_buttons, "gtk_dialog_new_with_buttons", LIBRARY.GTK);
	Linker.link(gtk_dialog_add_action_widget, "gtk_dialog_add_action_widget", LIBRARY.GTK);
	Linker.link(gtk_dialog_add_button, "gtk_dialog_add_button", LIBRARY.GTK);
	Linker.link(gtk_dialog_add_buttons, "gtk_dialog_add_buttons", LIBRARY.GTK);
	Linker.link(gtk_dialog_get_action_area, "gtk_dialog_get_action_area", LIBRARY.GTK);
	Linker.link(gtk_dialog_get_content_area, "gtk_dialog_get_content_area", LIBRARY.GTK);
	Linker.link(gtk_dialog_get_header_bar, "gtk_dialog_get_header_bar", LIBRARY.GTK);
	Linker.link(gtk_dialog_get_response_for_widget, "gtk_dialog_get_response_for_widget", LIBRARY.GTK);
	Linker.link(gtk_dialog_get_widget_for_response, "gtk_dialog_get_widget_for_response", LIBRARY.GTK);
	Linker.link(gtk_dialog_response, "gtk_dialog_response", LIBRARY.GTK);
	Linker.link(gtk_dialog_run, "gtk_dialog_run", LIBRARY.GTK);
	Linker.link(gtk_dialog_set_alternative_button_order, "gtk_dialog_set_alternative_button_order", LIBRARY.GTK);
	Linker.link(gtk_dialog_set_alternative_button_order_from_array, "gtk_dialog_set_alternative_button_order_from_array", LIBRARY.GTK);
	Linker.link(gtk_dialog_set_default_response, "gtk_dialog_set_default_response", LIBRARY.GTK);
	Linker.link(gtk_dialog_set_response_sensitive, "gtk_dialog_set_response_sensitive", LIBRARY.GTK);
	Linker.link(gtk_alternative_dialog_button_order, "gtk_alternative_dialog_button_order", LIBRARY.GTK);

	// gtk.DrawingArea

	Linker.link(gtk_drawing_area_get_type, "gtk_drawing_area_get_type", LIBRARY.GTK);
	Linker.link(gtk_drawing_area_new, "gtk_drawing_area_new", LIBRARY.GTK);

	// gtk.Editable

	Linker.link(gtk_editable_get_type, "gtk_editable_get_type", LIBRARY.GTK);
	Linker.link(gtk_editable_copy_clipboard, "gtk_editable_copy_clipboard", LIBRARY.GTK);
	Linker.link(gtk_editable_cut_clipboard, "gtk_editable_cut_clipboard", LIBRARY.GTK);
	Linker.link(gtk_editable_delete_selection, "gtk_editable_delete_selection", LIBRARY.GTK);
	Linker.link(gtk_editable_delete_text, "gtk_editable_delete_text", LIBRARY.GTK);
	Linker.link(gtk_editable_get_chars, "gtk_editable_get_chars", LIBRARY.GTK);
	Linker.link(gtk_editable_get_editable, "gtk_editable_get_editable", LIBRARY.GTK);
	Linker.link(gtk_editable_get_position, "gtk_editable_get_position", LIBRARY.GTK);
	Linker.link(gtk_editable_get_selection_bounds, "gtk_editable_get_selection_bounds", LIBRARY.GTK);
	Linker.link(gtk_editable_insert_text, "gtk_editable_insert_text", LIBRARY.GTK);
	Linker.link(gtk_editable_paste_clipboard, "gtk_editable_paste_clipboard", LIBRARY.GTK);
	Linker.link(gtk_editable_select_region, "gtk_editable_select_region", LIBRARY.GTK);
	Linker.link(gtk_editable_set_editable, "gtk_editable_set_editable", LIBRARY.GTK);
	Linker.link(gtk_editable_set_position, "gtk_editable_set_position", LIBRARY.GTK);

	// gtk.Entry

	Linker.link(gtk_entry_get_type, "gtk_entry_get_type", LIBRARY.GTK);
	Linker.link(gtk_entry_new, "gtk_entry_new", LIBRARY.GTK);
	Linker.link(gtk_entry_new_with_buffer, "gtk_entry_new_with_buffer", LIBRARY.GTK);
	Linker.link(gtk_entry_get_activates_default, "gtk_entry_get_activates_default", LIBRARY.GTK);
	Linker.link(gtk_entry_get_alignment, "gtk_entry_get_alignment", LIBRARY.GTK);
	Linker.link(gtk_entry_get_attributes, "gtk_entry_get_attributes", LIBRARY.GTK);
	Linker.link(gtk_entry_get_buffer, "gtk_entry_get_buffer", LIBRARY.GTK);
	Linker.link(gtk_entry_get_completion, "gtk_entry_get_completion", LIBRARY.GTK);
	Linker.link(gtk_entry_get_current_icon_drag_source, "gtk_entry_get_current_icon_drag_source", LIBRARY.GTK);
	Linker.link(gtk_entry_get_cursor_hadjustment, "gtk_entry_get_cursor_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_entry_get_has_frame, "gtk_entry_get_has_frame", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_activatable, "gtk_entry_get_icon_activatable", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_area, "gtk_entry_get_icon_area", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_at_pos, "gtk_entry_get_icon_at_pos", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_gicon, "gtk_entry_get_icon_gicon", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_name, "gtk_entry_get_icon_name", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_pixbuf, "gtk_entry_get_icon_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_sensitive, "gtk_entry_get_icon_sensitive", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_stock, "gtk_entry_get_icon_stock", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_storage_type, "gtk_entry_get_icon_storage_type", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_tooltip_markup, "gtk_entry_get_icon_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_entry_get_icon_tooltip_text, "gtk_entry_get_icon_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_entry_get_inner_border, "gtk_entry_get_inner_border", LIBRARY.GTK);
	Linker.link(gtk_entry_get_input_hints, "gtk_entry_get_input_hints", LIBRARY.GTK);
	Linker.link(gtk_entry_get_input_purpose, "gtk_entry_get_input_purpose", LIBRARY.GTK);
	Linker.link(gtk_entry_get_invisible_char, "gtk_entry_get_invisible_char", LIBRARY.GTK);
	Linker.link(gtk_entry_get_layout, "gtk_entry_get_layout", LIBRARY.GTK);
	Linker.link(gtk_entry_get_layout_offsets, "gtk_entry_get_layout_offsets", LIBRARY.GTK);
	Linker.link(gtk_entry_get_max_length, "gtk_entry_get_max_length", LIBRARY.GTK);
	Linker.link(gtk_entry_get_max_width_chars, "gtk_entry_get_max_width_chars", LIBRARY.GTK);
	Linker.link(gtk_entry_get_overwrite_mode, "gtk_entry_get_overwrite_mode", LIBRARY.GTK);
	Linker.link(gtk_entry_get_placeholder_text, "gtk_entry_get_placeholder_text", LIBRARY.GTK);
	Linker.link(gtk_entry_get_progress_fraction, "gtk_entry_get_progress_fraction", LIBRARY.GTK);
	Linker.link(gtk_entry_get_progress_pulse_step, "gtk_entry_get_progress_pulse_step", LIBRARY.GTK);
	Linker.link(gtk_entry_get_tabs, "gtk_entry_get_tabs", LIBRARY.GTK);
	Linker.link(gtk_entry_get_text, "gtk_entry_get_text", LIBRARY.GTK);
	Linker.link(gtk_entry_get_text_area, "gtk_entry_get_text_area", LIBRARY.GTK);
	Linker.link(gtk_entry_get_text_length, "gtk_entry_get_text_length", LIBRARY.GTK);
	Linker.link(gtk_entry_get_visibility, "gtk_entry_get_visibility", LIBRARY.GTK);
	Linker.link(gtk_entry_get_width_chars, "gtk_entry_get_width_chars", LIBRARY.GTK);
	Linker.link(gtk_entry_grab_focus_without_selecting, "gtk_entry_grab_focus_without_selecting", LIBRARY.GTK);
	Linker.link(gtk_entry_im_context_filter_keypress, "gtk_entry_im_context_filter_keypress", LIBRARY.GTK);
	Linker.link(gtk_entry_layout_index_to_text_index, "gtk_entry_layout_index_to_text_index", LIBRARY.GTK);
	Linker.link(gtk_entry_progress_pulse, "gtk_entry_progress_pulse", LIBRARY.GTK);
	Linker.link(gtk_entry_reset_im_context, "gtk_entry_reset_im_context", LIBRARY.GTK);
	Linker.link(gtk_entry_set_activates_default, "gtk_entry_set_activates_default", LIBRARY.GTK);
	Linker.link(gtk_entry_set_alignment, "gtk_entry_set_alignment", LIBRARY.GTK);
	Linker.link(gtk_entry_set_attributes, "gtk_entry_set_attributes", LIBRARY.GTK);
	Linker.link(gtk_entry_set_buffer, "gtk_entry_set_buffer", LIBRARY.GTK);
	Linker.link(gtk_entry_set_completion, "gtk_entry_set_completion", LIBRARY.GTK);
	Linker.link(gtk_entry_set_cursor_hadjustment, "gtk_entry_set_cursor_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_entry_set_has_frame, "gtk_entry_set_has_frame", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_activatable, "gtk_entry_set_icon_activatable", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_drag_source, "gtk_entry_set_icon_drag_source", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_from_gicon, "gtk_entry_set_icon_from_gicon", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_from_icon_name, "gtk_entry_set_icon_from_icon_name", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_from_pixbuf, "gtk_entry_set_icon_from_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_from_stock, "gtk_entry_set_icon_from_stock", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_sensitive, "gtk_entry_set_icon_sensitive", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_tooltip_markup, "gtk_entry_set_icon_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_entry_set_icon_tooltip_text, "gtk_entry_set_icon_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_entry_set_inner_border, "gtk_entry_set_inner_border", LIBRARY.GTK);
	Linker.link(gtk_entry_set_input_hints, "gtk_entry_set_input_hints", LIBRARY.GTK);
	Linker.link(gtk_entry_set_input_purpose, "gtk_entry_set_input_purpose", LIBRARY.GTK);
	Linker.link(gtk_entry_set_invisible_char, "gtk_entry_set_invisible_char", LIBRARY.GTK);
	Linker.link(gtk_entry_set_max_length, "gtk_entry_set_max_length", LIBRARY.GTK);
	Linker.link(gtk_entry_set_max_width_chars, "gtk_entry_set_max_width_chars", LIBRARY.GTK);
	Linker.link(gtk_entry_set_overwrite_mode, "gtk_entry_set_overwrite_mode", LIBRARY.GTK);
	Linker.link(gtk_entry_set_placeholder_text, "gtk_entry_set_placeholder_text", LIBRARY.GTK);
	Linker.link(gtk_entry_set_progress_fraction, "gtk_entry_set_progress_fraction", LIBRARY.GTK);
	Linker.link(gtk_entry_set_progress_pulse_step, "gtk_entry_set_progress_pulse_step", LIBRARY.GTK);
	Linker.link(gtk_entry_set_tabs, "gtk_entry_set_tabs", LIBRARY.GTK);
	Linker.link(gtk_entry_set_text, "gtk_entry_set_text", LIBRARY.GTK);
	Linker.link(gtk_entry_set_visibility, "gtk_entry_set_visibility", LIBRARY.GTK);
	Linker.link(gtk_entry_set_width_chars, "gtk_entry_set_width_chars", LIBRARY.GTK);
	Linker.link(gtk_entry_text_index_to_layout_index, "gtk_entry_text_index_to_layout_index", LIBRARY.GTK);
	Linker.link(gtk_entry_unset_invisible_char, "gtk_entry_unset_invisible_char", LIBRARY.GTK);

	// gtk.EntryAccessible

	Linker.link(gtk_entry_accessible_get_type, "gtk_entry_accessible_get_type", LIBRARY.GTK);

	// gtk.EntryBuffer

	Linker.link(gtk_entry_buffer_get_type, "gtk_entry_buffer_get_type", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_new, "gtk_entry_buffer_new", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_delete_text, "gtk_entry_buffer_delete_text", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_emit_deleted_text, "gtk_entry_buffer_emit_deleted_text", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_emit_inserted_text, "gtk_entry_buffer_emit_inserted_text", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_get_bytes, "gtk_entry_buffer_get_bytes", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_get_length, "gtk_entry_buffer_get_length", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_get_max_length, "gtk_entry_buffer_get_max_length", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_get_text, "gtk_entry_buffer_get_text", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_insert_text, "gtk_entry_buffer_insert_text", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_set_max_length, "gtk_entry_buffer_set_max_length", LIBRARY.GTK);
	Linker.link(gtk_entry_buffer_set_text, "gtk_entry_buffer_set_text", LIBRARY.GTK);

	// gtk.EntryCompletion

	Linker.link(gtk_entry_completion_get_type, "gtk_entry_completion_get_type", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_new, "gtk_entry_completion_new", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_new_with_area, "gtk_entry_completion_new_with_area", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_complete, "gtk_entry_completion_complete", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_compute_prefix, "gtk_entry_completion_compute_prefix", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_delete_action, "gtk_entry_completion_delete_action", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_completion_prefix, "gtk_entry_completion_get_completion_prefix", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_entry, "gtk_entry_completion_get_entry", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_inline_completion, "gtk_entry_completion_get_inline_completion", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_inline_selection, "gtk_entry_completion_get_inline_selection", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_minimum_key_length, "gtk_entry_completion_get_minimum_key_length", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_model, "gtk_entry_completion_get_model", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_popup_completion, "gtk_entry_completion_get_popup_completion", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_popup_set_width, "gtk_entry_completion_get_popup_set_width", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_popup_single_match, "gtk_entry_completion_get_popup_single_match", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_get_text_column, "gtk_entry_completion_get_text_column", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_insert_action_markup, "gtk_entry_completion_insert_action_markup", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_insert_action_text, "gtk_entry_completion_insert_action_text", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_insert_prefix, "gtk_entry_completion_insert_prefix", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_inline_completion, "gtk_entry_completion_set_inline_completion", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_inline_selection, "gtk_entry_completion_set_inline_selection", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_match_func, "gtk_entry_completion_set_match_func", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_minimum_key_length, "gtk_entry_completion_set_minimum_key_length", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_model, "gtk_entry_completion_set_model", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_popup_completion, "gtk_entry_completion_set_popup_completion", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_popup_set_width, "gtk_entry_completion_set_popup_set_width", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_popup_single_match, "gtk_entry_completion_set_popup_single_match", LIBRARY.GTK);
	Linker.link(gtk_entry_completion_set_text_column, "gtk_entry_completion_set_text_column", LIBRARY.GTK);

	// gtk.EntryIconAccessible

	Linker.link(gtk_entry_icon_accessible_get_type, "gtk_entry_icon_accessible_get_type", LIBRARY.GTK);

	// gtk.EventBox

	Linker.link(gtk_event_box_get_type, "gtk_event_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_event_box_new, "gtk_event_box_new", LIBRARY.GTK);
	Linker.link(gtk_event_box_get_above_child, "gtk_event_box_get_above_child", LIBRARY.GTK);
	Linker.link(gtk_event_box_get_visible_window, "gtk_event_box_get_visible_window", LIBRARY.GTK);
	Linker.link(gtk_event_box_set_above_child, "gtk_event_box_set_above_child", LIBRARY.GTK);
	Linker.link(gtk_event_box_set_visible_window, "gtk_event_box_set_visible_window", LIBRARY.GTK);

	// gtk.EventController

	Linker.link(gtk_event_controller_get_type, "gtk_event_controller_get_type", LIBRARY.GTK);
	Linker.link(gtk_event_controller_get_propagation_phase, "gtk_event_controller_get_propagation_phase", LIBRARY.GTK);
	Linker.link(gtk_event_controller_get_widget, "gtk_event_controller_get_widget", LIBRARY.GTK);
	Linker.link(gtk_event_controller_handle_event, "gtk_event_controller_handle_event", LIBRARY.GTK);
	Linker.link(gtk_event_controller_reset, "gtk_event_controller_reset", LIBRARY.GTK);
	Linker.link(gtk_event_controller_set_propagation_phase, "gtk_event_controller_set_propagation_phase", LIBRARY.GTK);

	// gtk.Expander

	Linker.link(gtk_expander_get_type, "gtk_expander_get_type", LIBRARY.GTK);
	Linker.link(gtk_expander_new, "gtk_expander_new", LIBRARY.GTK);
	Linker.link(gtk_expander_new_with_mnemonic, "gtk_expander_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_expander_get_expanded, "gtk_expander_get_expanded", LIBRARY.GTK);
	Linker.link(gtk_expander_get_label, "gtk_expander_get_label", LIBRARY.GTK);
	Linker.link(gtk_expander_get_label_fill, "gtk_expander_get_label_fill", LIBRARY.GTK);
	Linker.link(gtk_expander_get_label_widget, "gtk_expander_get_label_widget", LIBRARY.GTK);
	Linker.link(gtk_expander_get_resize_toplevel, "gtk_expander_get_resize_toplevel", LIBRARY.GTK);
	Linker.link(gtk_expander_get_spacing, "gtk_expander_get_spacing", LIBRARY.GTK);
	Linker.link(gtk_expander_get_use_markup, "gtk_expander_get_use_markup", LIBRARY.GTK);
	Linker.link(gtk_expander_get_use_underline, "gtk_expander_get_use_underline", LIBRARY.GTK);
	Linker.link(gtk_expander_set_expanded, "gtk_expander_set_expanded", LIBRARY.GTK);
	Linker.link(gtk_expander_set_label, "gtk_expander_set_label", LIBRARY.GTK);
	Linker.link(gtk_expander_set_label_fill, "gtk_expander_set_label_fill", LIBRARY.GTK);
	Linker.link(gtk_expander_set_label_widget, "gtk_expander_set_label_widget", LIBRARY.GTK);
	Linker.link(gtk_expander_set_resize_toplevel, "gtk_expander_set_resize_toplevel", LIBRARY.GTK);
	Linker.link(gtk_expander_set_spacing, "gtk_expander_set_spacing", LIBRARY.GTK);
	Linker.link(gtk_expander_set_use_markup, "gtk_expander_set_use_markup", LIBRARY.GTK);
	Linker.link(gtk_expander_set_use_underline, "gtk_expander_set_use_underline", LIBRARY.GTK);

	// gtk.ExpanderAccessible

	Linker.link(gtk_expander_accessible_get_type, "gtk_expander_accessible_get_type", LIBRARY.GTK);

	// gtk.FileChooser

	Linker.link(gtk_file_chooser_get_type, "gtk_file_chooser_get_type", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_add_choice, "gtk_file_chooser_add_choice", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_add_filter, "gtk_file_chooser_add_filter", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_add_shortcut_folder, "gtk_file_chooser_add_shortcut_folder", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_add_shortcut_folder_uri, "gtk_file_chooser_add_shortcut_folder_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_action, "gtk_file_chooser_get_action", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_choice, "gtk_file_chooser_get_choice", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_create_folders, "gtk_file_chooser_get_create_folders", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_current_folder, "gtk_file_chooser_get_current_folder", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_current_folder_file, "gtk_file_chooser_get_current_folder_file", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_current_folder_uri, "gtk_file_chooser_get_current_folder_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_current_name, "gtk_file_chooser_get_current_name", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_do_overwrite_confirmation, "gtk_file_chooser_get_do_overwrite_confirmation", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_extra_widget, "gtk_file_chooser_get_extra_widget", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_file, "gtk_file_chooser_get_file", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_filename, "gtk_file_chooser_get_filename", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_filenames, "gtk_file_chooser_get_filenames", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_files, "gtk_file_chooser_get_files", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_filter, "gtk_file_chooser_get_filter", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_local_only, "gtk_file_chooser_get_local_only", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_preview_file, "gtk_file_chooser_get_preview_file", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_preview_filename, "gtk_file_chooser_get_preview_filename", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_preview_uri, "gtk_file_chooser_get_preview_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_preview_widget, "gtk_file_chooser_get_preview_widget", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_preview_widget_active, "gtk_file_chooser_get_preview_widget_active", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_select_multiple, "gtk_file_chooser_get_select_multiple", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_show_hidden, "gtk_file_chooser_get_show_hidden", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_uri, "gtk_file_chooser_get_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_uris, "gtk_file_chooser_get_uris", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_get_use_preview_label, "gtk_file_chooser_get_use_preview_label", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_list_filters, "gtk_file_chooser_list_filters", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_list_shortcut_folder_uris, "gtk_file_chooser_list_shortcut_folder_uris", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_list_shortcut_folders, "gtk_file_chooser_list_shortcut_folders", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_remove_choice, "gtk_file_chooser_remove_choice", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_remove_filter, "gtk_file_chooser_remove_filter", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_remove_shortcut_folder, "gtk_file_chooser_remove_shortcut_folder", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_remove_shortcut_folder_uri, "gtk_file_chooser_remove_shortcut_folder_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_select_all, "gtk_file_chooser_select_all", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_select_file, "gtk_file_chooser_select_file", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_select_filename, "gtk_file_chooser_select_filename", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_select_uri, "gtk_file_chooser_select_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_action, "gtk_file_chooser_set_action", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_choice, "gtk_file_chooser_set_choice", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_create_folders, "gtk_file_chooser_set_create_folders", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_current_folder, "gtk_file_chooser_set_current_folder", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_current_folder_file, "gtk_file_chooser_set_current_folder_file", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_current_folder_uri, "gtk_file_chooser_set_current_folder_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_current_name, "gtk_file_chooser_set_current_name", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_do_overwrite_confirmation, "gtk_file_chooser_set_do_overwrite_confirmation", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_extra_widget, "gtk_file_chooser_set_extra_widget", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_file, "gtk_file_chooser_set_file", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_filename, "gtk_file_chooser_set_filename", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_filter, "gtk_file_chooser_set_filter", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_local_only, "gtk_file_chooser_set_local_only", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_preview_widget, "gtk_file_chooser_set_preview_widget", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_preview_widget_active, "gtk_file_chooser_set_preview_widget_active", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_select_multiple, "gtk_file_chooser_set_select_multiple", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_show_hidden, "gtk_file_chooser_set_show_hidden", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_uri, "gtk_file_chooser_set_uri", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_set_use_preview_label, "gtk_file_chooser_set_use_preview_label", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_unselect_all, "gtk_file_chooser_unselect_all", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_unselect_file, "gtk_file_chooser_unselect_file", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_unselect_filename, "gtk_file_chooser_unselect_filename", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_unselect_uri, "gtk_file_chooser_unselect_uri", LIBRARY.GTK);

	// gtk.FileChooserButton

	Linker.link(gtk_file_chooser_button_get_type, "gtk_file_chooser_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_new, "gtk_file_chooser_button_new", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_new_with_dialog, "gtk_file_chooser_button_new_with_dialog", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_get_focus_on_click, "gtk_file_chooser_button_get_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_get_title, "gtk_file_chooser_button_get_title", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_get_width_chars, "gtk_file_chooser_button_get_width_chars", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_set_focus_on_click, "gtk_file_chooser_button_set_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_set_title, "gtk_file_chooser_button_set_title", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_button_set_width_chars, "gtk_file_chooser_button_set_width_chars", LIBRARY.GTK);

	// gtk.FileChooserDialog

	Linker.link(gtk_file_chooser_dialog_get_type, "gtk_file_chooser_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_dialog_new, "gtk_file_chooser_dialog_new", LIBRARY.GTK);

	// gtk.FileChooserNative

	Linker.link(gtk_file_chooser_native_get_type, "gtk_file_chooser_native_get_type", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_native_new, "gtk_file_chooser_native_new", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_native_get_accept_label, "gtk_file_chooser_native_get_accept_label", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_native_get_cancel_label, "gtk_file_chooser_native_get_cancel_label", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_native_set_accept_label, "gtk_file_chooser_native_set_accept_label", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_native_set_cancel_label, "gtk_file_chooser_native_set_cancel_label", LIBRARY.GTK);

	// gtk.FileChooserWidget

	Linker.link(gtk_file_chooser_widget_get_type, "gtk_file_chooser_widget_get_type", LIBRARY.GTK);
	Linker.link(gtk_file_chooser_widget_new, "gtk_file_chooser_widget_new", LIBRARY.GTK);

	// gtk.FileFilter

	Linker.link(gtk_file_filter_get_type, "gtk_file_filter_get_type", LIBRARY.GTK);
	Linker.link(gtk_file_filter_new, "gtk_file_filter_new", LIBRARY.GTK);
	Linker.link(gtk_file_filter_new_from_gvariant, "gtk_file_filter_new_from_gvariant", LIBRARY.GTK);
	Linker.link(gtk_file_filter_add_custom, "gtk_file_filter_add_custom", LIBRARY.GTK);
	Linker.link(gtk_file_filter_add_mime_type, "gtk_file_filter_add_mime_type", LIBRARY.GTK);
	Linker.link(gtk_file_filter_add_pattern, "gtk_file_filter_add_pattern", LIBRARY.GTK);
	Linker.link(gtk_file_filter_add_pixbuf_formats, "gtk_file_filter_add_pixbuf_formats", LIBRARY.GTK);
	Linker.link(gtk_file_filter_filter, "gtk_file_filter_filter", LIBRARY.GTK);
	Linker.link(gtk_file_filter_get_name, "gtk_file_filter_get_name", LIBRARY.GTK);
	Linker.link(gtk_file_filter_get_needed, "gtk_file_filter_get_needed", LIBRARY.GTK);
	Linker.link(gtk_file_filter_set_name, "gtk_file_filter_set_name", LIBRARY.GTK);
	Linker.link(gtk_file_filter_to_gvariant, "gtk_file_filter_to_gvariant", LIBRARY.GTK);

	// gtk.Fixed

	Linker.link(gtk_fixed_get_type, "gtk_fixed_get_type", LIBRARY.GTK);
	Linker.link(gtk_fixed_new, "gtk_fixed_new", LIBRARY.GTK);
	Linker.link(gtk_fixed_move, "gtk_fixed_move", LIBRARY.GTK);
	Linker.link(gtk_fixed_put, "gtk_fixed_put", LIBRARY.GTK);

	// gtk.FlowBox

	Linker.link(gtk_flow_box_get_type, "gtk_flow_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_flow_box_new, "gtk_flow_box_new", LIBRARY.GTK);
	Linker.link(gtk_flow_box_bind_model, "gtk_flow_box_bind_model", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_activate_on_single_click, "gtk_flow_box_get_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_child_at_index, "gtk_flow_box_get_child_at_index", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_column_spacing, "gtk_flow_box_get_column_spacing", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_homogeneous, "gtk_flow_box_get_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_max_children_per_line, "gtk_flow_box_get_max_children_per_line", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_min_children_per_line, "gtk_flow_box_get_min_children_per_line", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_row_spacing, "gtk_flow_box_get_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_selected_children, "gtk_flow_box_get_selected_children", LIBRARY.GTK);
	Linker.link(gtk_flow_box_get_selection_mode, "gtk_flow_box_get_selection_mode", LIBRARY.GTK);
	Linker.link(gtk_flow_box_insert, "gtk_flow_box_insert", LIBRARY.GTK);
	Linker.link(gtk_flow_box_invalidate_filter, "gtk_flow_box_invalidate_filter", LIBRARY.GTK);
	Linker.link(gtk_flow_box_invalidate_sort, "gtk_flow_box_invalidate_sort", LIBRARY.GTK);
	Linker.link(gtk_flow_box_select_all, "gtk_flow_box_select_all", LIBRARY.GTK);
	Linker.link(gtk_flow_box_select_child, "gtk_flow_box_select_child", LIBRARY.GTK);
	Linker.link(gtk_flow_box_selected_foreach, "gtk_flow_box_selected_foreach", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_activate_on_single_click, "gtk_flow_box_set_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_column_spacing, "gtk_flow_box_set_column_spacing", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_filter_func, "gtk_flow_box_set_filter_func", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_hadjustment, "gtk_flow_box_set_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_homogeneous, "gtk_flow_box_set_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_max_children_per_line, "gtk_flow_box_set_max_children_per_line", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_min_children_per_line, "gtk_flow_box_set_min_children_per_line", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_row_spacing, "gtk_flow_box_set_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_selection_mode, "gtk_flow_box_set_selection_mode", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_sort_func, "gtk_flow_box_set_sort_func", LIBRARY.GTK);
	Linker.link(gtk_flow_box_set_vadjustment, "gtk_flow_box_set_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_flow_box_unselect_all, "gtk_flow_box_unselect_all", LIBRARY.GTK);
	Linker.link(gtk_flow_box_unselect_child, "gtk_flow_box_unselect_child", LIBRARY.GTK);

	// gtk.FlowBoxAccessible

	Linker.link(gtk_flow_box_accessible_get_type, "gtk_flow_box_accessible_get_type", LIBRARY.GTK);

	// gtk.FlowBoxChild

	Linker.link(gtk_flow_box_child_get_type, "gtk_flow_box_child_get_type", LIBRARY.GTK);
	Linker.link(gtk_flow_box_child_new, "gtk_flow_box_child_new", LIBRARY.GTK);
	Linker.link(gtk_flow_box_child_changed, "gtk_flow_box_child_changed", LIBRARY.GTK);
	Linker.link(gtk_flow_box_child_get_index, "gtk_flow_box_child_get_index", LIBRARY.GTK);
	Linker.link(gtk_flow_box_child_is_selected, "gtk_flow_box_child_is_selected", LIBRARY.GTK);

	// gtk.FlowBoxChildAccessible

	Linker.link(gtk_flow_box_child_accessible_get_type, "gtk_flow_box_child_accessible_get_type", LIBRARY.GTK);

	// gtk.FontButton

	Linker.link(gtk_font_button_get_type, "gtk_font_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_font_button_new, "gtk_font_button_new", LIBRARY.GTK);
	Linker.link(gtk_font_button_new_with_font, "gtk_font_button_new_with_font", LIBRARY.GTK);
	Linker.link(gtk_font_button_get_font_name, "gtk_font_button_get_font_name", LIBRARY.GTK);
	Linker.link(gtk_font_button_get_show_size, "gtk_font_button_get_show_size", LIBRARY.GTK);
	Linker.link(gtk_font_button_get_show_style, "gtk_font_button_get_show_style", LIBRARY.GTK);
	Linker.link(gtk_font_button_get_title, "gtk_font_button_get_title", LIBRARY.GTK);
	Linker.link(gtk_font_button_get_use_font, "gtk_font_button_get_use_font", LIBRARY.GTK);
	Linker.link(gtk_font_button_get_use_size, "gtk_font_button_get_use_size", LIBRARY.GTK);
	Linker.link(gtk_font_button_set_font_name, "gtk_font_button_set_font_name", LIBRARY.GTK);
	Linker.link(gtk_font_button_set_show_size, "gtk_font_button_set_show_size", LIBRARY.GTK);
	Linker.link(gtk_font_button_set_show_style, "gtk_font_button_set_show_style", LIBRARY.GTK);
	Linker.link(gtk_font_button_set_title, "gtk_font_button_set_title", LIBRARY.GTK);
	Linker.link(gtk_font_button_set_use_font, "gtk_font_button_set_use_font", LIBRARY.GTK);
	Linker.link(gtk_font_button_set_use_size, "gtk_font_button_set_use_size", LIBRARY.GTK);

	// gtk.FontChooser

	Linker.link(gtk_font_chooser_get_type, "gtk_font_chooser_get_type", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_font, "gtk_font_chooser_get_font", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_font_desc, "gtk_font_chooser_get_font_desc", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_font_face, "gtk_font_chooser_get_font_face", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_font_family, "gtk_font_chooser_get_font_family", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_font_map, "gtk_font_chooser_get_font_map", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_font_size, "gtk_font_chooser_get_font_size", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_preview_text, "gtk_font_chooser_get_preview_text", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_get_show_preview_entry, "gtk_font_chooser_get_show_preview_entry", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_set_filter_func, "gtk_font_chooser_set_filter_func", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_set_font, "gtk_font_chooser_set_font", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_set_font_desc, "gtk_font_chooser_set_font_desc", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_set_font_map, "gtk_font_chooser_set_font_map", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_set_preview_text, "gtk_font_chooser_set_preview_text", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_set_show_preview_entry, "gtk_font_chooser_set_show_preview_entry", LIBRARY.GTK);

	// gtk.FontChooserDialog

	Linker.link(gtk_font_chooser_dialog_get_type, "gtk_font_chooser_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_dialog_new, "gtk_font_chooser_dialog_new", LIBRARY.GTK);

	// gtk.FontChooserWidget

	Linker.link(gtk_font_chooser_widget_get_type, "gtk_font_chooser_widget_get_type", LIBRARY.GTK);
	Linker.link(gtk_font_chooser_widget_new, "gtk_font_chooser_widget_new", LIBRARY.GTK);

	// gtk.FontSelection

	Linker.link(gtk_font_selection_get_type, "gtk_font_selection_get_type", LIBRARY.GTK);
	Linker.link(gtk_font_selection_new, "gtk_font_selection_new", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_face, "gtk_font_selection_get_face", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_face_list, "gtk_font_selection_get_face_list", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_family, "gtk_font_selection_get_family", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_family_list, "gtk_font_selection_get_family_list", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_font_name, "gtk_font_selection_get_font_name", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_preview_entry, "gtk_font_selection_get_preview_entry", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_preview_text, "gtk_font_selection_get_preview_text", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_size, "gtk_font_selection_get_size", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_size_entry, "gtk_font_selection_get_size_entry", LIBRARY.GTK);
	Linker.link(gtk_font_selection_get_size_list, "gtk_font_selection_get_size_list", LIBRARY.GTK);
	Linker.link(gtk_font_selection_set_font_name, "gtk_font_selection_set_font_name", LIBRARY.GTK);
	Linker.link(gtk_font_selection_set_preview_text, "gtk_font_selection_set_preview_text", LIBRARY.GTK);

	// gtk.FontSelectionDialog

	Linker.link(gtk_font_selection_dialog_get_type, "gtk_font_selection_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_new, "gtk_font_selection_dialog_new", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_get_cancel_button, "gtk_font_selection_dialog_get_cancel_button", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_get_font_name, "gtk_font_selection_dialog_get_font_name", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_get_font_selection, "gtk_font_selection_dialog_get_font_selection", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_get_ok_button, "gtk_font_selection_dialog_get_ok_button", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_get_preview_text, "gtk_font_selection_dialog_get_preview_text", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_set_font_name, "gtk_font_selection_dialog_set_font_name", LIBRARY.GTK);
	Linker.link(gtk_font_selection_dialog_set_preview_text, "gtk_font_selection_dialog_set_preview_text", LIBRARY.GTK);

	// gtk.Frame

	Linker.link(gtk_frame_get_type, "gtk_frame_get_type", LIBRARY.GTK);
	Linker.link(gtk_frame_new, "gtk_frame_new", LIBRARY.GTK);
	Linker.link(gtk_frame_get_label, "gtk_frame_get_label", LIBRARY.GTK);
	Linker.link(gtk_frame_get_label_align, "gtk_frame_get_label_align", LIBRARY.GTK);
	Linker.link(gtk_frame_get_label_widget, "gtk_frame_get_label_widget", LIBRARY.GTK);
	Linker.link(gtk_frame_get_shadow_type, "gtk_frame_get_shadow_type", LIBRARY.GTK);
	Linker.link(gtk_frame_set_label, "gtk_frame_set_label", LIBRARY.GTK);
	Linker.link(gtk_frame_set_label_align, "gtk_frame_set_label_align", LIBRARY.GTK);
	Linker.link(gtk_frame_set_label_widget, "gtk_frame_set_label_widget", LIBRARY.GTK);
	Linker.link(gtk_frame_set_shadow_type, "gtk_frame_set_shadow_type", LIBRARY.GTK);

	// gtk.FrameAccessible

	Linker.link(gtk_frame_accessible_get_type, "gtk_frame_accessible_get_type", LIBRARY.GTK);

	// gtk.GLArea

	Linker.link(gtk_gl_area_get_type, "gtk_gl_area_get_type", LIBRARY.GTK);
	Linker.link(gtk_gl_area_new, "gtk_gl_area_new", LIBRARY.GTK);
	Linker.link(gtk_gl_area_attach_buffers, "gtk_gl_area_attach_buffers", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_auto_render, "gtk_gl_area_get_auto_render", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_context, "gtk_gl_area_get_context", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_error, "gtk_gl_area_get_error", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_has_alpha, "gtk_gl_area_get_has_alpha", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_has_depth_buffer, "gtk_gl_area_get_has_depth_buffer", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_has_stencil_buffer, "gtk_gl_area_get_has_stencil_buffer", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_required_version, "gtk_gl_area_get_required_version", LIBRARY.GTK);
	Linker.link(gtk_gl_area_get_use_es, "gtk_gl_area_get_use_es", LIBRARY.GTK);
	Linker.link(gtk_gl_area_make_current, "gtk_gl_area_make_current", LIBRARY.GTK);
	Linker.link(gtk_gl_area_queue_render, "gtk_gl_area_queue_render", LIBRARY.GTK);
	Linker.link(gtk_gl_area_set_auto_render, "gtk_gl_area_set_auto_render", LIBRARY.GTK);
	Linker.link(gtk_gl_area_set_error, "gtk_gl_area_set_error", LIBRARY.GTK);
	Linker.link(gtk_gl_area_set_has_alpha, "gtk_gl_area_set_has_alpha", LIBRARY.GTK);
	Linker.link(gtk_gl_area_set_has_depth_buffer, "gtk_gl_area_set_has_depth_buffer", LIBRARY.GTK);
	Linker.link(gtk_gl_area_set_has_stencil_buffer, "gtk_gl_area_set_has_stencil_buffer", LIBRARY.GTK);
	Linker.link(gtk_gl_area_set_required_version, "gtk_gl_area_set_required_version", LIBRARY.GTK);
	Linker.link(gtk_gl_area_set_use_es, "gtk_gl_area_set_use_es", LIBRARY.GTK);

	// gtk.Gesture

	Linker.link(gtk_gesture_get_type, "gtk_gesture_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_bounding_box, "gtk_gesture_get_bounding_box", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_bounding_box_center, "gtk_gesture_get_bounding_box_center", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_device, "gtk_gesture_get_device", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_group, "gtk_gesture_get_group", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_last_event, "gtk_gesture_get_last_event", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_last_updated_sequence, "gtk_gesture_get_last_updated_sequence", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_point, "gtk_gesture_get_point", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_sequence_state, "gtk_gesture_get_sequence_state", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_sequences, "gtk_gesture_get_sequences", LIBRARY.GTK);
	Linker.link(gtk_gesture_get_window, "gtk_gesture_get_window", LIBRARY.GTK);
	Linker.link(gtk_gesture_group, "gtk_gesture_group", LIBRARY.GTK);
	Linker.link(gtk_gesture_handles_sequence, "gtk_gesture_handles_sequence", LIBRARY.GTK);
	Linker.link(gtk_gesture_is_active, "gtk_gesture_is_active", LIBRARY.GTK);
	Linker.link(gtk_gesture_is_grouped_with, "gtk_gesture_is_grouped_with", LIBRARY.GTK);
	Linker.link(gtk_gesture_is_recognized, "gtk_gesture_is_recognized", LIBRARY.GTK);
	Linker.link(gtk_gesture_set_sequence_state, "gtk_gesture_set_sequence_state", LIBRARY.GTK);
	Linker.link(gtk_gesture_set_state, "gtk_gesture_set_state", LIBRARY.GTK);
	Linker.link(gtk_gesture_set_window, "gtk_gesture_set_window", LIBRARY.GTK);
	Linker.link(gtk_gesture_ungroup, "gtk_gesture_ungroup", LIBRARY.GTK);

	// gtk.GestureDrag

	Linker.link(gtk_gesture_drag_get_type, "gtk_gesture_drag_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_drag_new, "gtk_gesture_drag_new", LIBRARY.GTK);
	Linker.link(gtk_gesture_drag_get_offset, "gtk_gesture_drag_get_offset", LIBRARY.GTK);
	Linker.link(gtk_gesture_drag_get_start_point, "gtk_gesture_drag_get_start_point", LIBRARY.GTK);

	// gtk.GestureLongPress

	Linker.link(gtk_gesture_long_press_get_type, "gtk_gesture_long_press_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_long_press_new, "gtk_gesture_long_press_new", LIBRARY.GTK);

	// gtk.GestureMultiPress

	Linker.link(gtk_gesture_multi_press_get_type, "gtk_gesture_multi_press_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_multi_press_new, "gtk_gesture_multi_press_new", LIBRARY.GTK);
	Linker.link(gtk_gesture_multi_press_get_area, "gtk_gesture_multi_press_get_area", LIBRARY.GTK);
	Linker.link(gtk_gesture_multi_press_set_area, "gtk_gesture_multi_press_set_area", LIBRARY.GTK);

	// gtk.GesturePan

	Linker.link(gtk_gesture_pan_get_type, "gtk_gesture_pan_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_pan_new, "gtk_gesture_pan_new", LIBRARY.GTK);
	Linker.link(gtk_gesture_pan_get_orientation, "gtk_gesture_pan_get_orientation", LIBRARY.GTK);
	Linker.link(gtk_gesture_pan_set_orientation, "gtk_gesture_pan_set_orientation", LIBRARY.GTK);

	// gtk.GestureRotate

	Linker.link(gtk_gesture_rotate_get_type, "gtk_gesture_rotate_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_rotate_new, "gtk_gesture_rotate_new", LIBRARY.GTK);
	Linker.link(gtk_gesture_rotate_get_angle_delta, "gtk_gesture_rotate_get_angle_delta", LIBRARY.GTK);

	// gtk.GestureSingle

	Linker.link(gtk_gesture_single_get_type, "gtk_gesture_single_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_get_button, "gtk_gesture_single_get_button", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_get_current_button, "gtk_gesture_single_get_current_button", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_get_current_sequence, "gtk_gesture_single_get_current_sequence", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_get_exclusive, "gtk_gesture_single_get_exclusive", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_get_touch_only, "gtk_gesture_single_get_touch_only", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_set_button, "gtk_gesture_single_set_button", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_set_exclusive, "gtk_gesture_single_set_exclusive", LIBRARY.GTK);
	Linker.link(gtk_gesture_single_set_touch_only, "gtk_gesture_single_set_touch_only", LIBRARY.GTK);

	// gtk.GestureSwipe

	Linker.link(gtk_gesture_swipe_get_type, "gtk_gesture_swipe_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_swipe_new, "gtk_gesture_swipe_new", LIBRARY.GTK);
	Linker.link(gtk_gesture_swipe_get_velocity, "gtk_gesture_swipe_get_velocity", LIBRARY.GTK);

	// gtk.GestureZoom

	Linker.link(gtk_gesture_zoom_get_type, "gtk_gesture_zoom_get_type", LIBRARY.GTK);
	Linker.link(gtk_gesture_zoom_new, "gtk_gesture_zoom_new", LIBRARY.GTK);
	Linker.link(gtk_gesture_zoom_get_scale_delta, "gtk_gesture_zoom_get_scale_delta", LIBRARY.GTK);

	// gtk.Gradient

	Linker.link(gtk_gradient_get_type, "gtk_gradient_get_type", LIBRARY.GTK);
	Linker.link(gtk_gradient_new_linear, "gtk_gradient_new_linear", LIBRARY.GTK);
	Linker.link(gtk_gradient_new_radial, "gtk_gradient_new_radial", LIBRARY.GTK);
	Linker.link(gtk_gradient_add_color_stop, "gtk_gradient_add_color_stop", LIBRARY.GTK);
	Linker.link(gtk_gradient_ref, "gtk_gradient_ref", LIBRARY.GTK);
	Linker.link(gtk_gradient_resolve, "gtk_gradient_resolve", LIBRARY.GTK);
	Linker.link(gtk_gradient_resolve_for_context, "gtk_gradient_resolve_for_context", LIBRARY.GTK);
	Linker.link(gtk_gradient_to_string, "gtk_gradient_to_string", LIBRARY.GTK);
	Linker.link(gtk_gradient_unref, "gtk_gradient_unref", LIBRARY.GTK);

	// gtk.Grid

	Linker.link(gtk_grid_get_type, "gtk_grid_get_type", LIBRARY.GTK);
	Linker.link(gtk_grid_new, "gtk_grid_new", LIBRARY.GTK);
	Linker.link(gtk_grid_attach, "gtk_grid_attach", LIBRARY.GTK);
	Linker.link(gtk_grid_attach_next_to, "gtk_grid_attach_next_to", LIBRARY.GTK);
	Linker.link(gtk_grid_get_baseline_row, "gtk_grid_get_baseline_row", LIBRARY.GTK);
	Linker.link(gtk_grid_get_child_at, "gtk_grid_get_child_at", LIBRARY.GTK);
	Linker.link(gtk_grid_get_column_homogeneous, "gtk_grid_get_column_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_grid_get_column_spacing, "gtk_grid_get_column_spacing", LIBRARY.GTK);
	Linker.link(gtk_grid_get_row_baseline_position, "gtk_grid_get_row_baseline_position", LIBRARY.GTK);
	Linker.link(gtk_grid_get_row_homogeneous, "gtk_grid_get_row_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_grid_get_row_spacing, "gtk_grid_get_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_grid_insert_column, "gtk_grid_insert_column", LIBRARY.GTK);
	Linker.link(gtk_grid_insert_next_to, "gtk_grid_insert_next_to", LIBRARY.GTK);
	Linker.link(gtk_grid_insert_row, "gtk_grid_insert_row", LIBRARY.GTK);
	Linker.link(gtk_grid_remove_column, "gtk_grid_remove_column", LIBRARY.GTK);
	Linker.link(gtk_grid_remove_row, "gtk_grid_remove_row", LIBRARY.GTK);
	Linker.link(gtk_grid_set_baseline_row, "gtk_grid_set_baseline_row", LIBRARY.GTK);
	Linker.link(gtk_grid_set_column_homogeneous, "gtk_grid_set_column_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_grid_set_column_spacing, "gtk_grid_set_column_spacing", LIBRARY.GTK);
	Linker.link(gtk_grid_set_row_baseline_position, "gtk_grid_set_row_baseline_position", LIBRARY.GTK);
	Linker.link(gtk_grid_set_row_homogeneous, "gtk_grid_set_row_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_grid_set_row_spacing, "gtk_grid_set_row_spacing", LIBRARY.GTK);

	// gtk.HBox

	Linker.link(gtk_hbox_get_type, "gtk_hbox_get_type", LIBRARY.GTK);
	Linker.link(gtk_hbox_new, "gtk_hbox_new", LIBRARY.GTK);

	// gtk.HButtonBox

	Linker.link(gtk_hbutton_box_get_type, "gtk_hbutton_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_hbutton_box_new, "gtk_hbutton_box_new", LIBRARY.GTK);

	// gtk.HPaned

	Linker.link(gtk_hpaned_get_type, "gtk_hpaned_get_type", LIBRARY.GTK);
	Linker.link(gtk_hpaned_new, "gtk_hpaned_new", LIBRARY.GTK);

	// gtk.HSV

	Linker.link(gtk_hsv_get_type, "gtk_hsv_get_type", LIBRARY.GTK);
	Linker.link(gtk_hsv_new, "gtk_hsv_new", LIBRARY.GTK);
	Linker.link(gtk_hsv_to_rgb, "gtk_hsv_to_rgb", LIBRARY.GTK);
	Linker.link(gtk_hsv_get_color, "gtk_hsv_get_color", LIBRARY.GTK);
	Linker.link(gtk_hsv_get_metrics, "gtk_hsv_get_metrics", LIBRARY.GTK);
	Linker.link(gtk_hsv_is_adjusting, "gtk_hsv_is_adjusting", LIBRARY.GTK);
	Linker.link(gtk_hsv_set_color, "gtk_hsv_set_color", LIBRARY.GTK);
	Linker.link(gtk_hsv_set_metrics, "gtk_hsv_set_metrics", LIBRARY.GTK);
	Linker.link(gtk_rgb_to_hsv, "gtk_rgb_to_hsv", LIBRARY.GTK);

	// gtk.HScale

	Linker.link(gtk_hscale_get_type, "gtk_hscale_get_type", LIBRARY.GTK);
	Linker.link(gtk_hscale_new, "gtk_hscale_new", LIBRARY.GTK);
	Linker.link(gtk_hscale_new_with_range, "gtk_hscale_new_with_range", LIBRARY.GTK);

	// gtk.HScrollbar

	Linker.link(gtk_hscrollbar_get_type, "gtk_hscrollbar_get_type", LIBRARY.GTK);
	Linker.link(gtk_hscrollbar_new, "gtk_hscrollbar_new", LIBRARY.GTK);

	// gtk.HSeparator

	Linker.link(gtk_hseparator_get_type, "gtk_hseparator_get_type", LIBRARY.GTK);
	Linker.link(gtk_hseparator_new, "gtk_hseparator_new", LIBRARY.GTK);

	// gtk.HandleBox

	Linker.link(gtk_handle_box_get_type, "gtk_handle_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_handle_box_new, "gtk_handle_box_new", LIBRARY.GTK);
	Linker.link(gtk_handle_box_get_child_detached, "gtk_handle_box_get_child_detached", LIBRARY.GTK);
	Linker.link(gtk_handle_box_get_handle_position, "gtk_handle_box_get_handle_position", LIBRARY.GTK);
	Linker.link(gtk_handle_box_get_shadow_type, "gtk_handle_box_get_shadow_type", LIBRARY.GTK);
	Linker.link(gtk_handle_box_get_snap_edge, "gtk_handle_box_get_snap_edge", LIBRARY.GTK);
	Linker.link(gtk_handle_box_set_handle_position, "gtk_handle_box_set_handle_position", LIBRARY.GTK);
	Linker.link(gtk_handle_box_set_shadow_type, "gtk_handle_box_set_shadow_type", LIBRARY.GTK);
	Linker.link(gtk_handle_box_set_snap_edge, "gtk_handle_box_set_snap_edge", LIBRARY.GTK);

	// gtk.HeaderBar

	Linker.link(gtk_header_bar_get_type, "gtk_header_bar_get_type", LIBRARY.GTK);
	Linker.link(gtk_header_bar_new, "gtk_header_bar_new", LIBRARY.GTK);
	Linker.link(gtk_header_bar_get_custom_title, "gtk_header_bar_get_custom_title", LIBRARY.GTK);
	Linker.link(gtk_header_bar_get_decoration_layout, "gtk_header_bar_get_decoration_layout", LIBRARY.GTK);
	Linker.link(gtk_header_bar_get_has_subtitle, "gtk_header_bar_get_has_subtitle", LIBRARY.GTK);
	Linker.link(gtk_header_bar_get_show_close_button, "gtk_header_bar_get_show_close_button", LIBRARY.GTK);
	Linker.link(gtk_header_bar_get_subtitle, "gtk_header_bar_get_subtitle", LIBRARY.GTK);
	Linker.link(gtk_header_bar_get_title, "gtk_header_bar_get_title", LIBRARY.GTK);
	Linker.link(gtk_header_bar_pack_end, "gtk_header_bar_pack_end", LIBRARY.GTK);
	Linker.link(gtk_header_bar_pack_start, "gtk_header_bar_pack_start", LIBRARY.GTK);
	Linker.link(gtk_header_bar_set_custom_title, "gtk_header_bar_set_custom_title", LIBRARY.GTK);
	Linker.link(gtk_header_bar_set_decoration_layout, "gtk_header_bar_set_decoration_layout", LIBRARY.GTK);
	Linker.link(gtk_header_bar_set_has_subtitle, "gtk_header_bar_set_has_subtitle", LIBRARY.GTK);
	Linker.link(gtk_header_bar_set_show_close_button, "gtk_header_bar_set_show_close_button", LIBRARY.GTK);
	Linker.link(gtk_header_bar_set_subtitle, "gtk_header_bar_set_subtitle", LIBRARY.GTK);
	Linker.link(gtk_header_bar_set_title, "gtk_header_bar_set_title", LIBRARY.GTK);

	// gtk.IMContext

	Linker.link(gtk_im_context_get_type, "gtk_im_context_get_type", LIBRARY.GTK);
	Linker.link(gtk_im_context_delete_surrounding, "gtk_im_context_delete_surrounding", LIBRARY.GTK);
	Linker.link(gtk_im_context_filter_keypress, "gtk_im_context_filter_keypress", LIBRARY.GTK);
	Linker.link(gtk_im_context_focus_in, "gtk_im_context_focus_in", LIBRARY.GTK);
	Linker.link(gtk_im_context_focus_out, "gtk_im_context_focus_out", LIBRARY.GTK);
	Linker.link(gtk_im_context_get_preedit_string, "gtk_im_context_get_preedit_string", LIBRARY.GTK);
	Linker.link(gtk_im_context_get_surrounding, "gtk_im_context_get_surrounding", LIBRARY.GTK);
	Linker.link(gtk_im_context_reset, "gtk_im_context_reset", LIBRARY.GTK);
	Linker.link(gtk_im_context_set_client_window, "gtk_im_context_set_client_window", LIBRARY.GTK);
	Linker.link(gtk_im_context_set_cursor_location, "gtk_im_context_set_cursor_location", LIBRARY.GTK);
	Linker.link(gtk_im_context_set_surrounding, "gtk_im_context_set_surrounding", LIBRARY.GTK);
	Linker.link(gtk_im_context_set_use_preedit, "gtk_im_context_set_use_preedit", LIBRARY.GTK);

	// gtk.IMContextSimple

	Linker.link(gtk_im_context_simple_get_type, "gtk_im_context_simple_get_type", LIBRARY.GTK);
	Linker.link(gtk_im_context_simple_new, "gtk_im_context_simple_new", LIBRARY.GTK);
	Linker.link(gtk_im_context_simple_add_compose_file, "gtk_im_context_simple_add_compose_file", LIBRARY.GTK);
	Linker.link(gtk_im_context_simple_add_table, "gtk_im_context_simple_add_table", LIBRARY.GTK);

	// gtk.IMMulticontext

	Linker.link(gtk_im_multicontext_get_type, "gtk_im_multicontext_get_type", LIBRARY.GTK);
	Linker.link(gtk_im_multicontext_new, "gtk_im_multicontext_new", LIBRARY.GTK);
	Linker.link(gtk_im_multicontext_append_menuitems, "gtk_im_multicontext_append_menuitems", LIBRARY.GTK);
	Linker.link(gtk_im_multicontext_get_context_id, "gtk_im_multicontext_get_context_id", LIBRARY.GTK);
	Linker.link(gtk_im_multicontext_set_context_id, "gtk_im_multicontext_set_context_id", LIBRARY.GTK);

	// gtk.IconFactory

	Linker.link(gtk_icon_factory_get_type, "gtk_icon_factory_get_type", LIBRARY.GTK);
	Linker.link(gtk_icon_factory_new, "gtk_icon_factory_new", LIBRARY.GTK);
	Linker.link(gtk_icon_factory_lookup_default, "gtk_icon_factory_lookup_default", LIBRARY.GTK);
	Linker.link(gtk_icon_factory_add, "gtk_icon_factory_add", LIBRARY.GTK);
	Linker.link(gtk_icon_factory_add_default, "gtk_icon_factory_add_default", LIBRARY.GTK);
	Linker.link(gtk_icon_factory_lookup, "gtk_icon_factory_lookup", LIBRARY.GTK);
	Linker.link(gtk_icon_factory_remove_default, "gtk_icon_factory_remove_default", LIBRARY.GTK);

	// gtk.IconInfo

	Linker.link(gtk_icon_info_get_type, "gtk_icon_info_get_type", LIBRARY.GTK);
	Linker.link(gtk_icon_info_new_for_pixbuf, "gtk_icon_info_new_for_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_icon_info_copy, "gtk_icon_info_copy", LIBRARY.GTK);
	Linker.link(gtk_icon_info_free, "gtk_icon_info_free", LIBRARY.GTK);
	Linker.link(gtk_icon_info_get_attach_points, "gtk_icon_info_get_attach_points", LIBRARY.GTK);
	Linker.link(gtk_icon_info_get_base_scale, "gtk_icon_info_get_base_scale", LIBRARY.GTK);
	Linker.link(gtk_icon_info_get_base_size, "gtk_icon_info_get_base_size", LIBRARY.GTK);
	Linker.link(gtk_icon_info_get_builtin_pixbuf, "gtk_icon_info_get_builtin_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_icon_info_get_display_name, "gtk_icon_info_get_display_name", LIBRARY.GTK);
	Linker.link(gtk_icon_info_get_embedded_rect, "gtk_icon_info_get_embedded_rect", LIBRARY.GTK);
	Linker.link(gtk_icon_info_get_filename, "gtk_icon_info_get_filename", LIBRARY.GTK);
	Linker.link(gtk_icon_info_is_symbolic, "gtk_icon_info_is_symbolic", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_icon, "gtk_icon_info_load_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_icon_async, "gtk_icon_info_load_icon_async", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_icon_finish, "gtk_icon_info_load_icon_finish", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_surface, "gtk_icon_info_load_surface", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_symbolic, "gtk_icon_info_load_symbolic", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_symbolic_async, "gtk_icon_info_load_symbolic_async", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_symbolic_finish, "gtk_icon_info_load_symbolic_finish", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_symbolic_for_context, "gtk_icon_info_load_symbolic_for_context", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_symbolic_for_context_async, "gtk_icon_info_load_symbolic_for_context_async", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_symbolic_for_context_finish, "gtk_icon_info_load_symbolic_for_context_finish", LIBRARY.GTK);
	Linker.link(gtk_icon_info_load_symbolic_for_style, "gtk_icon_info_load_symbolic_for_style", LIBRARY.GTK);
	Linker.link(gtk_icon_info_set_raw_coordinates, "gtk_icon_info_set_raw_coordinates", LIBRARY.GTK);

	// gtk.IconSet

	Linker.link(gtk_icon_set_get_type, "gtk_icon_set_get_type", LIBRARY.GTK);
	Linker.link(gtk_icon_set_new, "gtk_icon_set_new", LIBRARY.GTK);
	Linker.link(gtk_icon_set_new_from_pixbuf, "gtk_icon_set_new_from_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_icon_set_add_source, "gtk_icon_set_add_source", LIBRARY.GTK);
	Linker.link(gtk_icon_set_copy, "gtk_icon_set_copy", LIBRARY.GTK);
	Linker.link(gtk_icon_set_get_sizes, "gtk_icon_set_get_sizes", LIBRARY.GTK);
	Linker.link(gtk_icon_set_ref, "gtk_icon_set_ref", LIBRARY.GTK);
	Linker.link(gtk_icon_set_render_icon, "gtk_icon_set_render_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_set_render_icon_pixbuf, "gtk_icon_set_render_icon_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_icon_set_render_icon_surface, "gtk_icon_set_render_icon_surface", LIBRARY.GTK);
	Linker.link(gtk_icon_set_unref, "gtk_icon_set_unref", LIBRARY.GTK);

	// gtk.IconSource

	Linker.link(gtk_icon_source_get_type, "gtk_icon_source_get_type", LIBRARY.GTK);
	Linker.link(gtk_icon_source_new, "gtk_icon_source_new", LIBRARY.GTK);
	Linker.link(gtk_icon_source_copy, "gtk_icon_source_copy", LIBRARY.GTK);
	Linker.link(gtk_icon_source_free, "gtk_icon_source_free", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_direction, "gtk_icon_source_get_direction", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_direction_wildcarded, "gtk_icon_source_get_direction_wildcarded", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_filename, "gtk_icon_source_get_filename", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_icon_name, "gtk_icon_source_get_icon_name", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_pixbuf, "gtk_icon_source_get_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_size, "gtk_icon_source_get_size", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_size_wildcarded, "gtk_icon_source_get_size_wildcarded", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_state, "gtk_icon_source_get_state", LIBRARY.GTK);
	Linker.link(gtk_icon_source_get_state_wildcarded, "gtk_icon_source_get_state_wildcarded", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_direction, "gtk_icon_source_set_direction", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_direction_wildcarded, "gtk_icon_source_set_direction_wildcarded", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_filename, "gtk_icon_source_set_filename", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_icon_name, "gtk_icon_source_set_icon_name", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_pixbuf, "gtk_icon_source_set_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_size, "gtk_icon_source_set_size", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_size_wildcarded, "gtk_icon_source_set_size_wildcarded", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_state, "gtk_icon_source_set_state", LIBRARY.GTK);
	Linker.link(gtk_icon_source_set_state_wildcarded, "gtk_icon_source_set_state_wildcarded", LIBRARY.GTK);

	// gtk.IconTheme

	Linker.link(gtk_icon_theme_get_type, "gtk_icon_theme_get_type", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_new, "gtk_icon_theme_new", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_add_builtin_icon, "gtk_icon_theme_add_builtin_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_get_default, "gtk_icon_theme_get_default", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_get_for_screen, "gtk_icon_theme_get_for_screen", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_add_resource_path, "gtk_icon_theme_add_resource_path", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_append_search_path, "gtk_icon_theme_append_search_path", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_choose_icon, "gtk_icon_theme_choose_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_choose_icon_for_scale, "gtk_icon_theme_choose_icon_for_scale", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_get_example_icon_name, "gtk_icon_theme_get_example_icon_name", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_get_icon_sizes, "gtk_icon_theme_get_icon_sizes", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_get_search_path, "gtk_icon_theme_get_search_path", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_has_icon, "gtk_icon_theme_has_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_list_contexts, "gtk_icon_theme_list_contexts", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_list_icons, "gtk_icon_theme_list_icons", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_load_icon, "gtk_icon_theme_load_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_load_icon_for_scale, "gtk_icon_theme_load_icon_for_scale", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_load_surface, "gtk_icon_theme_load_surface", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_lookup_by_gicon, "gtk_icon_theme_lookup_by_gicon", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_lookup_by_gicon_for_scale, "gtk_icon_theme_lookup_by_gicon_for_scale", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_lookup_icon, "gtk_icon_theme_lookup_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_lookup_icon_for_scale, "gtk_icon_theme_lookup_icon_for_scale", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_prepend_search_path, "gtk_icon_theme_prepend_search_path", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_rescan_if_needed, "gtk_icon_theme_rescan_if_needed", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_set_custom_theme, "gtk_icon_theme_set_custom_theme", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_set_screen, "gtk_icon_theme_set_screen", LIBRARY.GTK);
	Linker.link(gtk_icon_theme_set_search_path, "gtk_icon_theme_set_search_path", LIBRARY.GTK);

	// gtk.IconView

	Linker.link(gtk_icon_view_get_type, "gtk_icon_view_get_type", LIBRARY.GTK);
	Linker.link(gtk_icon_view_new, "gtk_icon_view_new", LIBRARY.GTK);
	Linker.link(gtk_icon_view_new_with_area, "gtk_icon_view_new_with_area", LIBRARY.GTK);
	Linker.link(gtk_icon_view_new_with_model, "gtk_icon_view_new_with_model", LIBRARY.GTK);
	Linker.link(gtk_icon_view_convert_widget_to_bin_window_coords, "gtk_icon_view_convert_widget_to_bin_window_coords", LIBRARY.GTK);
	Linker.link(gtk_icon_view_create_drag_icon, "gtk_icon_view_create_drag_icon", LIBRARY.GTK);
	Linker.link(gtk_icon_view_enable_model_drag_dest, "gtk_icon_view_enable_model_drag_dest", LIBRARY.GTK);
	Linker.link(gtk_icon_view_enable_model_drag_source, "gtk_icon_view_enable_model_drag_source", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_activate_on_single_click, "gtk_icon_view_get_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_cell_rect, "gtk_icon_view_get_cell_rect", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_column_spacing, "gtk_icon_view_get_column_spacing", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_columns, "gtk_icon_view_get_columns", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_cursor, "gtk_icon_view_get_cursor", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_dest_item_at_pos, "gtk_icon_view_get_dest_item_at_pos", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_drag_dest_item, "gtk_icon_view_get_drag_dest_item", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_item_at_pos, "gtk_icon_view_get_item_at_pos", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_item_column, "gtk_icon_view_get_item_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_item_orientation, "gtk_icon_view_get_item_orientation", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_item_padding, "gtk_icon_view_get_item_padding", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_item_row, "gtk_icon_view_get_item_row", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_item_width, "gtk_icon_view_get_item_width", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_margin, "gtk_icon_view_get_margin", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_markup_column, "gtk_icon_view_get_markup_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_model, "gtk_icon_view_get_model", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_path_at_pos, "gtk_icon_view_get_path_at_pos", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_pixbuf_column, "gtk_icon_view_get_pixbuf_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_reorderable, "gtk_icon_view_get_reorderable", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_row_spacing, "gtk_icon_view_get_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_selected_items, "gtk_icon_view_get_selected_items", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_selection_mode, "gtk_icon_view_get_selection_mode", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_spacing, "gtk_icon_view_get_spacing", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_text_column, "gtk_icon_view_get_text_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_tooltip_column, "gtk_icon_view_get_tooltip_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_tooltip_context, "gtk_icon_view_get_tooltip_context", LIBRARY.GTK);
	Linker.link(gtk_icon_view_get_visible_range, "gtk_icon_view_get_visible_range", LIBRARY.GTK);
	Linker.link(gtk_icon_view_item_activated, "gtk_icon_view_item_activated", LIBRARY.GTK);
	Linker.link(gtk_icon_view_path_is_selected, "gtk_icon_view_path_is_selected", LIBRARY.GTK);
	Linker.link(gtk_icon_view_scroll_to_path, "gtk_icon_view_scroll_to_path", LIBRARY.GTK);
	Linker.link(gtk_icon_view_select_all, "gtk_icon_view_select_all", LIBRARY.GTK);
	Linker.link(gtk_icon_view_select_path, "gtk_icon_view_select_path", LIBRARY.GTK);
	Linker.link(gtk_icon_view_selected_foreach, "gtk_icon_view_selected_foreach", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_activate_on_single_click, "gtk_icon_view_set_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_column_spacing, "gtk_icon_view_set_column_spacing", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_columns, "gtk_icon_view_set_columns", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_cursor, "gtk_icon_view_set_cursor", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_drag_dest_item, "gtk_icon_view_set_drag_dest_item", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_item_orientation, "gtk_icon_view_set_item_orientation", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_item_padding, "gtk_icon_view_set_item_padding", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_item_width, "gtk_icon_view_set_item_width", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_margin, "gtk_icon_view_set_margin", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_markup_column, "gtk_icon_view_set_markup_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_model, "gtk_icon_view_set_model", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_pixbuf_column, "gtk_icon_view_set_pixbuf_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_reorderable, "gtk_icon_view_set_reorderable", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_row_spacing, "gtk_icon_view_set_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_selection_mode, "gtk_icon_view_set_selection_mode", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_spacing, "gtk_icon_view_set_spacing", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_text_column, "gtk_icon_view_set_text_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_tooltip_cell, "gtk_icon_view_set_tooltip_cell", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_tooltip_column, "gtk_icon_view_set_tooltip_column", LIBRARY.GTK);
	Linker.link(gtk_icon_view_set_tooltip_item, "gtk_icon_view_set_tooltip_item", LIBRARY.GTK);
	Linker.link(gtk_icon_view_unselect_all, "gtk_icon_view_unselect_all", LIBRARY.GTK);
	Linker.link(gtk_icon_view_unselect_path, "gtk_icon_view_unselect_path", LIBRARY.GTK);
	Linker.link(gtk_icon_view_unset_model_drag_dest, "gtk_icon_view_unset_model_drag_dest", LIBRARY.GTK);
	Linker.link(gtk_icon_view_unset_model_drag_source, "gtk_icon_view_unset_model_drag_source", LIBRARY.GTK);

	// gtk.IconViewAccessible

	Linker.link(gtk_icon_view_accessible_get_type, "gtk_icon_view_accessible_get_type", LIBRARY.GTK);

	// gtk.Image

	Linker.link(gtk_image_get_type, "gtk_image_get_type", LIBRARY.GTK);
	Linker.link(gtk_image_new, "gtk_image_new", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_animation, "gtk_image_new_from_animation", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_file, "gtk_image_new_from_file", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_gicon, "gtk_image_new_from_gicon", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_icon_name, "gtk_image_new_from_icon_name", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_icon_set, "gtk_image_new_from_icon_set", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_pixbuf, "gtk_image_new_from_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_resource, "gtk_image_new_from_resource", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_stock, "gtk_image_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_image_new_from_surface, "gtk_image_new_from_surface", LIBRARY.GTK);
	Linker.link(gtk_image_clear, "gtk_image_clear", LIBRARY.GTK);
	Linker.link(gtk_image_get_animation, "gtk_image_get_animation", LIBRARY.GTK);
	Linker.link(gtk_image_get_gicon, "gtk_image_get_gicon", LIBRARY.GTK);
	Linker.link(gtk_image_get_icon_name, "gtk_image_get_icon_name", LIBRARY.GTK);
	Linker.link(gtk_image_get_icon_set, "gtk_image_get_icon_set", LIBRARY.GTK);
	Linker.link(gtk_image_get_pixbuf, "gtk_image_get_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_image_get_pixel_size, "gtk_image_get_pixel_size", LIBRARY.GTK);
	Linker.link(gtk_image_get_stock, "gtk_image_get_stock", LIBRARY.GTK);
	Linker.link(gtk_image_get_storage_type, "gtk_image_get_storage_type", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_animation, "gtk_image_set_from_animation", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_file, "gtk_image_set_from_file", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_gicon, "gtk_image_set_from_gicon", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_icon_name, "gtk_image_set_from_icon_name", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_icon_set, "gtk_image_set_from_icon_set", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_pixbuf, "gtk_image_set_from_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_resource, "gtk_image_set_from_resource", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_stock, "gtk_image_set_from_stock", LIBRARY.GTK);
	Linker.link(gtk_image_set_from_surface, "gtk_image_set_from_surface", LIBRARY.GTK);
	Linker.link(gtk_image_set_pixel_size, "gtk_image_set_pixel_size", LIBRARY.GTK);

	// gtk.ImageAccessible

	Linker.link(gtk_image_accessible_get_type, "gtk_image_accessible_get_type", LIBRARY.GTK);

	// gtk.ImageCellAccessible

	Linker.link(gtk_image_cell_accessible_get_type, "gtk_image_cell_accessible_get_type", LIBRARY.GTK);

	// gtk.ImageMenuItem

	Linker.link(gtk_image_menu_item_get_type, "gtk_image_menu_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_new, "gtk_image_menu_item_new", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_new_from_stock, "gtk_image_menu_item_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_new_with_label, "gtk_image_menu_item_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_new_with_mnemonic, "gtk_image_menu_item_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_get_always_show_image, "gtk_image_menu_item_get_always_show_image", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_get_image, "gtk_image_menu_item_get_image", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_get_use_stock, "gtk_image_menu_item_get_use_stock", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_set_accel_group, "gtk_image_menu_item_set_accel_group", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_set_always_show_image, "gtk_image_menu_item_set_always_show_image", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_set_image, "gtk_image_menu_item_set_image", LIBRARY.GTK);
	Linker.link(gtk_image_menu_item_set_use_stock, "gtk_image_menu_item_set_use_stock", LIBRARY.GTK);

	// gtk.InfoBar

	Linker.link(gtk_info_bar_get_type, "gtk_info_bar_get_type", LIBRARY.GTK);
	Linker.link(gtk_info_bar_new, "gtk_info_bar_new", LIBRARY.GTK);
	Linker.link(gtk_info_bar_new_with_buttons, "gtk_info_bar_new_with_buttons", LIBRARY.GTK);
	Linker.link(gtk_info_bar_add_action_widget, "gtk_info_bar_add_action_widget", LIBRARY.GTK);
	Linker.link(gtk_info_bar_add_button, "gtk_info_bar_add_button", LIBRARY.GTK);
	Linker.link(gtk_info_bar_add_buttons, "gtk_info_bar_add_buttons", LIBRARY.GTK);
	Linker.link(gtk_info_bar_get_action_area, "gtk_info_bar_get_action_area", LIBRARY.GTK);
	Linker.link(gtk_info_bar_get_content_area, "gtk_info_bar_get_content_area", LIBRARY.GTK);
	Linker.link(gtk_info_bar_get_message_type, "gtk_info_bar_get_message_type", LIBRARY.GTK);
	Linker.link(gtk_info_bar_get_show_close_button, "gtk_info_bar_get_show_close_button", LIBRARY.GTK);
	Linker.link(gtk_info_bar_response, "gtk_info_bar_response", LIBRARY.GTK);
	Linker.link(gtk_info_bar_set_default_response, "gtk_info_bar_set_default_response", LIBRARY.GTK);
	Linker.link(gtk_info_bar_set_message_type, "gtk_info_bar_set_message_type", LIBRARY.GTK);
	Linker.link(gtk_info_bar_set_response_sensitive, "gtk_info_bar_set_response_sensitive", LIBRARY.GTK);
	Linker.link(gtk_info_bar_set_show_close_button, "gtk_info_bar_set_show_close_button", LIBRARY.GTK);

	// gtk.Invisible

	Linker.link(gtk_invisible_get_type, "gtk_invisible_get_type", LIBRARY.GTK);
	Linker.link(gtk_invisible_new, "gtk_invisible_new", LIBRARY.GTK);
	Linker.link(gtk_invisible_new_for_screen, "gtk_invisible_new_for_screen", LIBRARY.GTK);
	Linker.link(gtk_invisible_get_screen, "gtk_invisible_get_screen", LIBRARY.GTK);
	Linker.link(gtk_invisible_set_screen, "gtk_invisible_set_screen", LIBRARY.GTK);

	// gtk.Label

	Linker.link(gtk_label_get_type, "gtk_label_get_type", LIBRARY.GTK);
	Linker.link(gtk_label_new, "gtk_label_new", LIBRARY.GTK);
	Linker.link(gtk_label_new_with_mnemonic, "gtk_label_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_label_get_angle, "gtk_label_get_angle", LIBRARY.GTK);
	Linker.link(gtk_label_get_attributes, "gtk_label_get_attributes", LIBRARY.GTK);
	Linker.link(gtk_label_get_current_uri, "gtk_label_get_current_uri", LIBRARY.GTK);
	Linker.link(gtk_label_get_ellipsize, "gtk_label_get_ellipsize", LIBRARY.GTK);
	Linker.link(gtk_label_get_justify, "gtk_label_get_justify", LIBRARY.GTK);
	Linker.link(gtk_label_get_label, "gtk_label_get_label", LIBRARY.GTK);
	Linker.link(gtk_label_get_layout, "gtk_label_get_layout", LIBRARY.GTK);
	Linker.link(gtk_label_get_layout_offsets, "gtk_label_get_layout_offsets", LIBRARY.GTK);
	Linker.link(gtk_label_get_line_wrap, "gtk_label_get_line_wrap", LIBRARY.GTK);
	Linker.link(gtk_label_get_line_wrap_mode, "gtk_label_get_line_wrap_mode", LIBRARY.GTK);
	Linker.link(gtk_label_get_lines, "gtk_label_get_lines", LIBRARY.GTK);
	Linker.link(gtk_label_get_max_width_chars, "gtk_label_get_max_width_chars", LIBRARY.GTK);
	Linker.link(gtk_label_get_mnemonic_keyval, "gtk_label_get_mnemonic_keyval", LIBRARY.GTK);
	Linker.link(gtk_label_get_mnemonic_widget, "gtk_label_get_mnemonic_widget", LIBRARY.GTK);
	Linker.link(gtk_label_get_selectable, "gtk_label_get_selectable", LIBRARY.GTK);
	Linker.link(gtk_label_get_selection_bounds, "gtk_label_get_selection_bounds", LIBRARY.GTK);
	Linker.link(gtk_label_get_single_line_mode, "gtk_label_get_single_line_mode", LIBRARY.GTK);
	Linker.link(gtk_label_get_text, "gtk_label_get_text", LIBRARY.GTK);
	Linker.link(gtk_label_get_track_visited_links, "gtk_label_get_track_visited_links", LIBRARY.GTK);
	Linker.link(gtk_label_get_use_markup, "gtk_label_get_use_markup", LIBRARY.GTK);
	Linker.link(gtk_label_get_use_underline, "gtk_label_get_use_underline", LIBRARY.GTK);
	Linker.link(gtk_label_get_width_chars, "gtk_label_get_width_chars", LIBRARY.GTK);
	Linker.link(gtk_label_get_xalign, "gtk_label_get_xalign", LIBRARY.GTK);
	Linker.link(gtk_label_get_yalign, "gtk_label_get_yalign", LIBRARY.GTK);
	Linker.link(gtk_label_select_region, "gtk_label_select_region", LIBRARY.GTK);
	Linker.link(gtk_label_set_angle, "gtk_label_set_angle", LIBRARY.GTK);
	Linker.link(gtk_label_set_attributes, "gtk_label_set_attributes", LIBRARY.GTK);
	Linker.link(gtk_label_set_ellipsize, "gtk_label_set_ellipsize", LIBRARY.GTK);
	Linker.link(gtk_label_set_justify, "gtk_label_set_justify", LIBRARY.GTK);
	Linker.link(gtk_label_set_label, "gtk_label_set_label", LIBRARY.GTK);
	Linker.link(gtk_label_set_line_wrap, "gtk_label_set_line_wrap", LIBRARY.GTK);
	Linker.link(gtk_label_set_line_wrap_mode, "gtk_label_set_line_wrap_mode", LIBRARY.GTK);
	Linker.link(gtk_label_set_lines, "gtk_label_set_lines", LIBRARY.GTK);
	Linker.link(gtk_label_set_markup, "gtk_label_set_markup", LIBRARY.GTK);
	Linker.link(gtk_label_set_markup_with_mnemonic, "gtk_label_set_markup_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_label_set_max_width_chars, "gtk_label_set_max_width_chars", LIBRARY.GTK);
	Linker.link(gtk_label_set_mnemonic_widget, "gtk_label_set_mnemonic_widget", LIBRARY.GTK);
	Linker.link(gtk_label_set_pattern, "gtk_label_set_pattern", LIBRARY.GTK);
	Linker.link(gtk_label_set_selectable, "gtk_label_set_selectable", LIBRARY.GTK);
	Linker.link(gtk_label_set_single_line_mode, "gtk_label_set_single_line_mode", LIBRARY.GTK);
	Linker.link(gtk_label_set_text, "gtk_label_set_text", LIBRARY.GTK);
	Linker.link(gtk_label_set_text_with_mnemonic, "gtk_label_set_text_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_label_set_track_visited_links, "gtk_label_set_track_visited_links", LIBRARY.GTK);
	Linker.link(gtk_label_set_use_markup, "gtk_label_set_use_markup", LIBRARY.GTK);
	Linker.link(gtk_label_set_use_underline, "gtk_label_set_use_underline", LIBRARY.GTK);
	Linker.link(gtk_label_set_width_chars, "gtk_label_set_width_chars", LIBRARY.GTK);
	Linker.link(gtk_label_set_xalign, "gtk_label_set_xalign", LIBRARY.GTK);
	Linker.link(gtk_label_set_yalign, "gtk_label_set_yalign", LIBRARY.GTK);

	// gtk.LabelAccessible

	Linker.link(gtk_label_accessible_get_type, "gtk_label_accessible_get_type", LIBRARY.GTK);

	// gtk.Layout

	Linker.link(gtk_layout_get_type, "gtk_layout_get_type", LIBRARY.GTK);
	Linker.link(gtk_layout_new, "gtk_layout_new", LIBRARY.GTK);
	Linker.link(gtk_layout_get_bin_window, "gtk_layout_get_bin_window", LIBRARY.GTK);
	Linker.link(gtk_layout_get_hadjustment, "gtk_layout_get_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_layout_get_size, "gtk_layout_get_size", LIBRARY.GTK);
	Linker.link(gtk_layout_get_vadjustment, "gtk_layout_get_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_layout_move, "gtk_layout_move", LIBRARY.GTK);
	Linker.link(gtk_layout_put, "gtk_layout_put", LIBRARY.GTK);
	Linker.link(gtk_layout_set_hadjustment, "gtk_layout_set_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_layout_set_size, "gtk_layout_set_size", LIBRARY.GTK);
	Linker.link(gtk_layout_set_vadjustment, "gtk_layout_set_vadjustment", LIBRARY.GTK);

	// gtk.LevelBar

	Linker.link(gtk_level_bar_get_type, "gtk_level_bar_get_type", LIBRARY.GTK);
	Linker.link(gtk_level_bar_new, "gtk_level_bar_new", LIBRARY.GTK);
	Linker.link(gtk_level_bar_new_for_interval, "gtk_level_bar_new_for_interval", LIBRARY.GTK);
	Linker.link(gtk_level_bar_add_offset_value, "gtk_level_bar_add_offset_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_get_inverted, "gtk_level_bar_get_inverted", LIBRARY.GTK);
	Linker.link(gtk_level_bar_get_max_value, "gtk_level_bar_get_max_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_get_min_value, "gtk_level_bar_get_min_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_get_mode, "gtk_level_bar_get_mode", LIBRARY.GTK);
	Linker.link(gtk_level_bar_get_offset_value, "gtk_level_bar_get_offset_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_get_value, "gtk_level_bar_get_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_remove_offset_value, "gtk_level_bar_remove_offset_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_set_inverted, "gtk_level_bar_set_inverted", LIBRARY.GTK);
	Linker.link(gtk_level_bar_set_max_value, "gtk_level_bar_set_max_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_set_min_value, "gtk_level_bar_set_min_value", LIBRARY.GTK);
	Linker.link(gtk_level_bar_set_mode, "gtk_level_bar_set_mode", LIBRARY.GTK);
	Linker.link(gtk_level_bar_set_value, "gtk_level_bar_set_value", LIBRARY.GTK);

	// gtk.LevelBarAccessible

	Linker.link(gtk_level_bar_accessible_get_type, "gtk_level_bar_accessible_get_type", LIBRARY.GTK);

	// gtk.LinkButton

	Linker.link(gtk_link_button_get_type, "gtk_link_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_link_button_new, "gtk_link_button_new", LIBRARY.GTK);
	Linker.link(gtk_link_button_new_with_label, "gtk_link_button_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_link_button_get_uri, "gtk_link_button_get_uri", LIBRARY.GTK);
	Linker.link(gtk_link_button_get_visited, "gtk_link_button_get_visited", LIBRARY.GTK);
	Linker.link(gtk_link_button_set_uri, "gtk_link_button_set_uri", LIBRARY.GTK);
	Linker.link(gtk_link_button_set_visited, "gtk_link_button_set_visited", LIBRARY.GTK);

	// gtk.LinkButtonAccessible

	Linker.link(gtk_link_button_accessible_get_type, "gtk_link_button_accessible_get_type", LIBRARY.GTK);

	// gtk.ListBox

	Linker.link(gtk_list_box_get_type, "gtk_list_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_list_box_new, "gtk_list_box_new", LIBRARY.GTK);
	Linker.link(gtk_list_box_bind_model, "gtk_list_box_bind_model", LIBRARY.GTK);
	Linker.link(gtk_list_box_drag_highlight_row, "gtk_list_box_drag_highlight_row", LIBRARY.GTK);
	Linker.link(gtk_list_box_drag_unhighlight_row, "gtk_list_box_drag_unhighlight_row", LIBRARY.GTK);
	Linker.link(gtk_list_box_get_activate_on_single_click, "gtk_list_box_get_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_list_box_get_adjustment, "gtk_list_box_get_adjustment", LIBRARY.GTK);
	Linker.link(gtk_list_box_get_row_at_index, "gtk_list_box_get_row_at_index", LIBRARY.GTK);
	Linker.link(gtk_list_box_get_row_at_y, "gtk_list_box_get_row_at_y", LIBRARY.GTK);
	Linker.link(gtk_list_box_get_selected_row, "gtk_list_box_get_selected_row", LIBRARY.GTK);
	Linker.link(gtk_list_box_get_selected_rows, "gtk_list_box_get_selected_rows", LIBRARY.GTK);
	Linker.link(gtk_list_box_get_selection_mode, "gtk_list_box_get_selection_mode", LIBRARY.GTK);
	Linker.link(gtk_list_box_insert, "gtk_list_box_insert", LIBRARY.GTK);
	Linker.link(gtk_list_box_invalidate_filter, "gtk_list_box_invalidate_filter", LIBRARY.GTK);
	Linker.link(gtk_list_box_invalidate_headers, "gtk_list_box_invalidate_headers", LIBRARY.GTK);
	Linker.link(gtk_list_box_invalidate_sort, "gtk_list_box_invalidate_sort", LIBRARY.GTK);
	Linker.link(gtk_list_box_prepend, "gtk_list_box_prepend", LIBRARY.GTK);
	Linker.link(gtk_list_box_select_all, "gtk_list_box_select_all", LIBRARY.GTK);
	Linker.link(gtk_list_box_select_row, "gtk_list_box_select_row", LIBRARY.GTK);
	Linker.link(gtk_list_box_selected_foreach, "gtk_list_box_selected_foreach", LIBRARY.GTK);
	Linker.link(gtk_list_box_set_activate_on_single_click, "gtk_list_box_set_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_list_box_set_adjustment, "gtk_list_box_set_adjustment", LIBRARY.GTK);
	Linker.link(gtk_list_box_set_filter_func, "gtk_list_box_set_filter_func", LIBRARY.GTK);
	Linker.link(gtk_list_box_set_header_func, "gtk_list_box_set_header_func", LIBRARY.GTK);
	Linker.link(gtk_list_box_set_placeholder, "gtk_list_box_set_placeholder", LIBRARY.GTK);
	Linker.link(gtk_list_box_set_selection_mode, "gtk_list_box_set_selection_mode", LIBRARY.GTK);
	Linker.link(gtk_list_box_set_sort_func, "gtk_list_box_set_sort_func", LIBRARY.GTK);
	Linker.link(gtk_list_box_unselect_all, "gtk_list_box_unselect_all", LIBRARY.GTK);
	Linker.link(gtk_list_box_unselect_row, "gtk_list_box_unselect_row", LIBRARY.GTK);

	// gtk.ListBoxAccessible

	Linker.link(gtk_list_box_accessible_get_type, "gtk_list_box_accessible_get_type", LIBRARY.GTK);

	// gtk.ListBoxRow

	Linker.link(gtk_list_box_row_get_type, "gtk_list_box_row_get_type", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_new, "gtk_list_box_row_new", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_changed, "gtk_list_box_row_changed", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_get_activatable, "gtk_list_box_row_get_activatable", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_get_header, "gtk_list_box_row_get_header", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_get_index, "gtk_list_box_row_get_index", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_get_selectable, "gtk_list_box_row_get_selectable", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_is_selected, "gtk_list_box_row_is_selected", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_set_activatable, "gtk_list_box_row_set_activatable", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_set_header, "gtk_list_box_row_set_header", LIBRARY.GTK);
	Linker.link(gtk_list_box_row_set_selectable, "gtk_list_box_row_set_selectable", LIBRARY.GTK);

	// gtk.ListBoxRowAccessible

	Linker.link(gtk_list_box_row_accessible_get_type, "gtk_list_box_row_accessible_get_type", LIBRARY.GTK);

	// gtk.ListStore

	Linker.link(gtk_list_store_get_type, "gtk_list_store_get_type", LIBRARY.GTK);
	Linker.link(gtk_list_store_new, "gtk_list_store_new", LIBRARY.GTK);
	Linker.link(gtk_list_store_newv, "gtk_list_store_newv", LIBRARY.GTK);
	Linker.link(gtk_list_store_append, "gtk_list_store_append", LIBRARY.GTK);
	Linker.link(gtk_list_store_clear, "gtk_list_store_clear", LIBRARY.GTK);
	Linker.link(gtk_list_store_insert, "gtk_list_store_insert", LIBRARY.GTK);
	Linker.link(gtk_list_store_insert_after, "gtk_list_store_insert_after", LIBRARY.GTK);
	Linker.link(gtk_list_store_insert_before, "gtk_list_store_insert_before", LIBRARY.GTK);
	Linker.link(gtk_list_store_insert_with_values, "gtk_list_store_insert_with_values", LIBRARY.GTK);
	Linker.link(gtk_list_store_insert_with_valuesv, "gtk_list_store_insert_with_valuesv", LIBRARY.GTK);
	Linker.link(gtk_list_store_iter_is_valid, "gtk_list_store_iter_is_valid", LIBRARY.GTK);
	Linker.link(gtk_list_store_move_after, "gtk_list_store_move_after", LIBRARY.GTK);
	Linker.link(gtk_list_store_move_before, "gtk_list_store_move_before", LIBRARY.GTK);
	Linker.link(gtk_list_store_prepend, "gtk_list_store_prepend", LIBRARY.GTK);
	Linker.link(gtk_list_store_remove, "gtk_list_store_remove", LIBRARY.GTK);
	Linker.link(gtk_list_store_reorder, "gtk_list_store_reorder", LIBRARY.GTK);
	Linker.link(gtk_list_store_set, "gtk_list_store_set", LIBRARY.GTK);
	Linker.link(gtk_list_store_set_column_types, "gtk_list_store_set_column_types", LIBRARY.GTK);
	Linker.link(gtk_list_store_set_valist, "gtk_list_store_set_valist", LIBRARY.GTK);
	Linker.link(gtk_list_store_set_value, "gtk_list_store_set_value", LIBRARY.GTK);
	Linker.link(gtk_list_store_set_valuesv, "gtk_list_store_set_valuesv", LIBRARY.GTK);
	Linker.link(gtk_list_store_swap, "gtk_list_store_swap", LIBRARY.GTK);

	// gtk.LockButton

	Linker.link(gtk_lock_button_get_type, "gtk_lock_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_lock_button_new, "gtk_lock_button_new", LIBRARY.GTK);
	Linker.link(gtk_lock_button_get_permission, "gtk_lock_button_get_permission", LIBRARY.GTK);
	Linker.link(gtk_lock_button_set_permission, "gtk_lock_button_set_permission", LIBRARY.GTK);

	// gtk.LockButtonAccessible

	Linker.link(gtk_lock_button_accessible_get_type, "gtk_lock_button_accessible_get_type", LIBRARY.GTK);

	// gtk.Menu

	Linker.link(gtk_menu_get_type, "gtk_menu_get_type", LIBRARY.GTK);
	Linker.link(gtk_menu_new, "gtk_menu_new", LIBRARY.GTK);
	Linker.link(gtk_menu_new_from_model, "gtk_menu_new_from_model", LIBRARY.GTK);
	Linker.link(gtk_menu_get_for_attach_widget, "gtk_menu_get_for_attach_widget", LIBRARY.GTK);
	Linker.link(gtk_menu_attach, "gtk_menu_attach", LIBRARY.GTK);
	Linker.link(gtk_menu_attach_to_widget, "gtk_menu_attach_to_widget", LIBRARY.GTK);
	Linker.link(gtk_menu_detach, "gtk_menu_detach", LIBRARY.GTK);
	Linker.link(gtk_menu_get_accel_group, "gtk_menu_get_accel_group", LIBRARY.GTK);
	Linker.link(gtk_menu_get_accel_path, "gtk_menu_get_accel_path", LIBRARY.GTK);
	Linker.link(gtk_menu_get_active, "gtk_menu_get_active", LIBRARY.GTK);
	Linker.link(gtk_menu_get_attach_widget, "gtk_menu_get_attach_widget", LIBRARY.GTK);
	Linker.link(gtk_menu_get_monitor, "gtk_menu_get_monitor", LIBRARY.GTK);
	Linker.link(gtk_menu_get_reserve_toggle_size, "gtk_menu_get_reserve_toggle_size", LIBRARY.GTK);
	Linker.link(gtk_menu_get_tearoff_state, "gtk_menu_get_tearoff_state", LIBRARY.GTK);
	Linker.link(gtk_menu_get_title, "gtk_menu_get_title", LIBRARY.GTK);
	Linker.link(gtk_menu_place_on_monitor, "gtk_menu_place_on_monitor", LIBRARY.GTK);
	Linker.link(gtk_menu_popdown, "gtk_menu_popdown", LIBRARY.GTK);
	Linker.link(gtk_menu_popup, "gtk_menu_popup", LIBRARY.GTK);
	Linker.link(gtk_menu_popup_at_pointer, "gtk_menu_popup_at_pointer", LIBRARY.GTK);
	Linker.link(gtk_menu_popup_at_rect, "gtk_menu_popup_at_rect", LIBRARY.GTK);
	Linker.link(gtk_menu_popup_at_widget, "gtk_menu_popup_at_widget", LIBRARY.GTK);
	Linker.link(gtk_menu_popup_for_device, "gtk_menu_popup_for_device", LIBRARY.GTK);
	Linker.link(gtk_menu_reorder_child, "gtk_menu_reorder_child", LIBRARY.GTK);
	Linker.link(gtk_menu_reposition, "gtk_menu_reposition", LIBRARY.GTK);
	Linker.link(gtk_menu_set_accel_group, "gtk_menu_set_accel_group", LIBRARY.GTK);
	Linker.link(gtk_menu_set_accel_path, "gtk_menu_set_accel_path", LIBRARY.GTK);
	Linker.link(gtk_menu_set_active, "gtk_menu_set_active", LIBRARY.GTK);
	Linker.link(gtk_menu_set_monitor, "gtk_menu_set_monitor", LIBRARY.GTK);
	Linker.link(gtk_menu_set_reserve_toggle_size, "gtk_menu_set_reserve_toggle_size", LIBRARY.GTK);
	Linker.link(gtk_menu_set_screen, "gtk_menu_set_screen", LIBRARY.GTK);
	Linker.link(gtk_menu_set_tearoff_state, "gtk_menu_set_tearoff_state", LIBRARY.GTK);
	Linker.link(gtk_menu_set_title, "gtk_menu_set_title", LIBRARY.GTK);

	// gtk.MenuAccessible

	Linker.link(gtk_menu_accessible_get_type, "gtk_menu_accessible_get_type", LIBRARY.GTK);

	// gtk.MenuBar

	Linker.link(gtk_menu_bar_get_type, "gtk_menu_bar_get_type", LIBRARY.GTK);
	Linker.link(gtk_menu_bar_new, "gtk_menu_bar_new", LIBRARY.GTK);
	Linker.link(gtk_menu_bar_new_from_model, "gtk_menu_bar_new_from_model", LIBRARY.GTK);
	Linker.link(gtk_menu_bar_get_child_pack_direction, "gtk_menu_bar_get_child_pack_direction", LIBRARY.GTK);
	Linker.link(gtk_menu_bar_get_pack_direction, "gtk_menu_bar_get_pack_direction", LIBRARY.GTK);
	Linker.link(gtk_menu_bar_set_child_pack_direction, "gtk_menu_bar_set_child_pack_direction", LIBRARY.GTK);
	Linker.link(gtk_menu_bar_set_pack_direction, "gtk_menu_bar_set_pack_direction", LIBRARY.GTK);

	// gtk.MenuButton

	Linker.link(gtk_menu_button_get_type, "gtk_menu_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_menu_button_new, "gtk_menu_button_new", LIBRARY.GTK);
	Linker.link(gtk_menu_button_get_align_widget, "gtk_menu_button_get_align_widget", LIBRARY.GTK);
	Linker.link(gtk_menu_button_get_direction, "gtk_menu_button_get_direction", LIBRARY.GTK);
	Linker.link(gtk_menu_button_get_menu_model, "gtk_menu_button_get_menu_model", LIBRARY.GTK);
	Linker.link(gtk_menu_button_get_popover, "gtk_menu_button_get_popover", LIBRARY.GTK);
	Linker.link(gtk_menu_button_get_popup, "gtk_menu_button_get_popup", LIBRARY.GTK);
	Linker.link(gtk_menu_button_get_use_popover, "gtk_menu_button_get_use_popover", LIBRARY.GTK);
	Linker.link(gtk_menu_button_set_align_widget, "gtk_menu_button_set_align_widget", LIBRARY.GTK);
	Linker.link(gtk_menu_button_set_direction, "gtk_menu_button_set_direction", LIBRARY.GTK);
	Linker.link(gtk_menu_button_set_menu_model, "gtk_menu_button_set_menu_model", LIBRARY.GTK);
	Linker.link(gtk_menu_button_set_popover, "gtk_menu_button_set_popover", LIBRARY.GTK);
	Linker.link(gtk_menu_button_set_popup, "gtk_menu_button_set_popup", LIBRARY.GTK);
	Linker.link(gtk_menu_button_set_use_popover, "gtk_menu_button_set_use_popover", LIBRARY.GTK);

	// gtk.MenuButtonAccessible

	Linker.link(gtk_menu_button_accessible_get_type, "gtk_menu_button_accessible_get_type", LIBRARY.GTK);

	// gtk.MenuItem

	Linker.link(gtk_menu_item_get_type, "gtk_menu_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_menu_item_new, "gtk_menu_item_new", LIBRARY.GTK);
	Linker.link(gtk_menu_item_new_with_label, "gtk_menu_item_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_menu_item_new_with_mnemonic, "gtk_menu_item_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_menu_item_activate, "gtk_menu_item_activate", LIBRARY.GTK);
	Linker.link(gtk_menu_item_deselect, "gtk_menu_item_deselect", LIBRARY.GTK);
	Linker.link(gtk_menu_item_get_accel_path, "gtk_menu_item_get_accel_path", LIBRARY.GTK);
	Linker.link(gtk_menu_item_get_label, "gtk_menu_item_get_label", LIBRARY.GTK);
	Linker.link(gtk_menu_item_get_reserve_indicator, "gtk_menu_item_get_reserve_indicator", LIBRARY.GTK);
	Linker.link(gtk_menu_item_get_right_justified, "gtk_menu_item_get_right_justified", LIBRARY.GTK);
	Linker.link(gtk_menu_item_get_submenu, "gtk_menu_item_get_submenu", LIBRARY.GTK);
	Linker.link(gtk_menu_item_get_use_underline, "gtk_menu_item_get_use_underline", LIBRARY.GTK);
	Linker.link(gtk_menu_item_select, "gtk_menu_item_select", LIBRARY.GTK);
	Linker.link(gtk_menu_item_set_accel_path, "gtk_menu_item_set_accel_path", LIBRARY.GTK);
	Linker.link(gtk_menu_item_set_label, "gtk_menu_item_set_label", LIBRARY.GTK);
	Linker.link(gtk_menu_item_set_reserve_indicator, "gtk_menu_item_set_reserve_indicator", LIBRARY.GTK);
	Linker.link(gtk_menu_item_set_right_justified, "gtk_menu_item_set_right_justified", LIBRARY.GTK);
	Linker.link(gtk_menu_item_set_submenu, "gtk_menu_item_set_submenu", LIBRARY.GTK);
	Linker.link(gtk_menu_item_set_use_underline, "gtk_menu_item_set_use_underline", LIBRARY.GTK);
	Linker.link(gtk_menu_item_toggle_size_allocate, "gtk_menu_item_toggle_size_allocate", LIBRARY.GTK);
	Linker.link(gtk_menu_item_toggle_size_request, "gtk_menu_item_toggle_size_request", LIBRARY.GTK);

	// gtk.MenuItemAccessible

	Linker.link(gtk_menu_item_accessible_get_type, "gtk_menu_item_accessible_get_type", LIBRARY.GTK);

	// gtk.MenuShell

	Linker.link(gtk_menu_shell_get_type, "gtk_menu_shell_get_type", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_activate_item, "gtk_menu_shell_activate_item", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_append, "gtk_menu_shell_append", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_bind_model, "gtk_menu_shell_bind_model", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_cancel, "gtk_menu_shell_cancel", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_deactivate, "gtk_menu_shell_deactivate", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_deselect, "gtk_menu_shell_deselect", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_get_parent_shell, "gtk_menu_shell_get_parent_shell", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_get_selected_item, "gtk_menu_shell_get_selected_item", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_get_take_focus, "gtk_menu_shell_get_take_focus", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_insert, "gtk_menu_shell_insert", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_prepend, "gtk_menu_shell_prepend", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_select_first, "gtk_menu_shell_select_first", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_select_item, "gtk_menu_shell_select_item", LIBRARY.GTK);
	Linker.link(gtk_menu_shell_set_take_focus, "gtk_menu_shell_set_take_focus", LIBRARY.GTK);

	// gtk.MenuShellAccessible

	Linker.link(gtk_menu_shell_accessible_get_type, "gtk_menu_shell_accessible_get_type", LIBRARY.GTK);

	// gtk.MenuToolButton

	Linker.link(gtk_menu_tool_button_get_type, "gtk_menu_tool_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_menu_tool_button_new, "gtk_menu_tool_button_new", LIBRARY.GTK);
	Linker.link(gtk_menu_tool_button_new_from_stock, "gtk_menu_tool_button_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_menu_tool_button_get_menu, "gtk_menu_tool_button_get_menu", LIBRARY.GTK);
	Linker.link(gtk_menu_tool_button_set_arrow_tooltip_markup, "gtk_menu_tool_button_set_arrow_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_menu_tool_button_set_arrow_tooltip_text, "gtk_menu_tool_button_set_arrow_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_menu_tool_button_set_menu, "gtk_menu_tool_button_set_menu", LIBRARY.GTK);

	// gtk.MessageDialog

	Linker.link(gtk_message_dialog_get_type, "gtk_message_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_new, "gtk_message_dialog_new", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_new_with_markup, "gtk_message_dialog_new_with_markup", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_format_secondary_markup, "gtk_message_dialog_format_secondary_markup", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_format_secondary_text, "gtk_message_dialog_format_secondary_text", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_get_image, "gtk_message_dialog_get_image", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_get_message_area, "gtk_message_dialog_get_message_area", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_set_image, "gtk_message_dialog_set_image", LIBRARY.GTK);
	Linker.link(gtk_message_dialog_set_markup, "gtk_message_dialog_set_markup", LIBRARY.GTK);

	// gtk.Misc

	Linker.link(gtk_misc_get_type, "gtk_misc_get_type", LIBRARY.GTK);
	Linker.link(gtk_misc_get_alignment, "gtk_misc_get_alignment", LIBRARY.GTK);
	Linker.link(gtk_misc_get_padding, "gtk_misc_get_padding", LIBRARY.GTK);
	Linker.link(gtk_misc_set_alignment, "gtk_misc_set_alignment", LIBRARY.GTK);
	Linker.link(gtk_misc_set_padding, "gtk_misc_set_padding", LIBRARY.GTK);

	// gtk.ModelButton

	Linker.link(gtk_model_button_get_type, "gtk_model_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_model_button_new, "gtk_model_button_new", LIBRARY.GTK);

	// gtk.MountOperation

	Linker.link(gtk_mount_operation_get_type, "gtk_mount_operation_get_type", LIBRARY.GTK);
	Linker.link(gtk_mount_operation_new, "gtk_mount_operation_new", LIBRARY.GTK);
	Linker.link(gtk_mount_operation_get_parent, "gtk_mount_operation_get_parent", LIBRARY.GTK);
	Linker.link(gtk_mount_operation_get_screen, "gtk_mount_operation_get_screen", LIBRARY.GTK);
	Linker.link(gtk_mount_operation_is_showing, "gtk_mount_operation_is_showing", LIBRARY.GTK);
	Linker.link(gtk_mount_operation_set_parent, "gtk_mount_operation_set_parent", LIBRARY.GTK);
	Linker.link(gtk_mount_operation_set_screen, "gtk_mount_operation_set_screen", LIBRARY.GTK);
	Linker.link(gtk_show_uri, "gtk_show_uri", LIBRARY.GTK);

	// gtk.NativeDialog

	Linker.link(gtk_native_dialog_get_type, "gtk_native_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_destroy, "gtk_native_dialog_destroy", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_get_modal, "gtk_native_dialog_get_modal", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_get_title, "gtk_native_dialog_get_title", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_get_transient_for, "gtk_native_dialog_get_transient_for", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_get_visible, "gtk_native_dialog_get_visible", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_hide, "gtk_native_dialog_hide", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_run, "gtk_native_dialog_run", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_set_modal, "gtk_native_dialog_set_modal", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_set_title, "gtk_native_dialog_set_title", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_set_transient_for, "gtk_native_dialog_set_transient_for", LIBRARY.GTK);
	Linker.link(gtk_native_dialog_show, "gtk_native_dialog_show", LIBRARY.GTK);

	// gtk.Notebook

	Linker.link(gtk_notebook_get_type, "gtk_notebook_get_type", LIBRARY.GTK);
	Linker.link(gtk_notebook_new, "gtk_notebook_new", LIBRARY.GTK);
	Linker.link(gtk_notebook_append_page, "gtk_notebook_append_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_append_page_menu, "gtk_notebook_append_page_menu", LIBRARY.GTK);
	Linker.link(gtk_notebook_detach_tab, "gtk_notebook_detach_tab", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_action_widget, "gtk_notebook_get_action_widget", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_current_page, "gtk_notebook_get_current_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_group_name, "gtk_notebook_get_group_name", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_menu_label, "gtk_notebook_get_menu_label", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_menu_label_text, "gtk_notebook_get_menu_label_text", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_n_pages, "gtk_notebook_get_n_pages", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_nth_page, "gtk_notebook_get_nth_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_scrollable, "gtk_notebook_get_scrollable", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_show_border, "gtk_notebook_get_show_border", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_show_tabs, "gtk_notebook_get_show_tabs", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_tab_detachable, "gtk_notebook_get_tab_detachable", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_tab_hborder, "gtk_notebook_get_tab_hborder", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_tab_label, "gtk_notebook_get_tab_label", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_tab_label_text, "gtk_notebook_get_tab_label_text", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_tab_pos, "gtk_notebook_get_tab_pos", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_tab_reorderable, "gtk_notebook_get_tab_reorderable", LIBRARY.GTK);
	Linker.link(gtk_notebook_get_tab_vborder, "gtk_notebook_get_tab_vborder", LIBRARY.GTK);
	Linker.link(gtk_notebook_insert_page, "gtk_notebook_insert_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_insert_page_menu, "gtk_notebook_insert_page_menu", LIBRARY.GTK);
	Linker.link(gtk_notebook_next_page, "gtk_notebook_next_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_page_num, "gtk_notebook_page_num", LIBRARY.GTK);
	Linker.link(gtk_notebook_popup_disable, "gtk_notebook_popup_disable", LIBRARY.GTK);
	Linker.link(gtk_notebook_popup_enable, "gtk_notebook_popup_enable", LIBRARY.GTK);
	Linker.link(gtk_notebook_prepend_page, "gtk_notebook_prepend_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_prepend_page_menu, "gtk_notebook_prepend_page_menu", LIBRARY.GTK);
	Linker.link(gtk_notebook_prev_page, "gtk_notebook_prev_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_remove_page, "gtk_notebook_remove_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_reorder_child, "gtk_notebook_reorder_child", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_action_widget, "gtk_notebook_set_action_widget", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_current_page, "gtk_notebook_set_current_page", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_group_name, "gtk_notebook_set_group_name", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_menu_label, "gtk_notebook_set_menu_label", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_menu_label_text, "gtk_notebook_set_menu_label_text", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_scrollable, "gtk_notebook_set_scrollable", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_show_border, "gtk_notebook_set_show_border", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_show_tabs, "gtk_notebook_set_show_tabs", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_tab_detachable, "gtk_notebook_set_tab_detachable", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_tab_label, "gtk_notebook_set_tab_label", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_tab_label_text, "gtk_notebook_set_tab_label_text", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_tab_pos, "gtk_notebook_set_tab_pos", LIBRARY.GTK);
	Linker.link(gtk_notebook_set_tab_reorderable, "gtk_notebook_set_tab_reorderable", LIBRARY.GTK);

	// gtk.NotebookAccessible

	Linker.link(gtk_notebook_accessible_get_type, "gtk_notebook_accessible_get_type", LIBRARY.GTK);

	// gtk.NotebookPageAccessible

	Linker.link(gtk_notebook_page_accessible_get_type, "gtk_notebook_page_accessible_get_type", LIBRARY.GTK);
	Linker.link(gtk_notebook_page_accessible_new, "gtk_notebook_page_accessible_new", LIBRARY.GTK);
	Linker.link(gtk_notebook_page_accessible_invalidate, "gtk_notebook_page_accessible_invalidate", LIBRARY.GTK);

	// gtk.NumerableIcon

	Linker.link(gtk_numerable_icon_get_type, "gtk_numerable_icon_get_type", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_new, "gtk_numerable_icon_new", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_new_with_style_context, "gtk_numerable_icon_new_with_style_context", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_get_background_gicon, "gtk_numerable_icon_get_background_gicon", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_get_background_icon_name, "gtk_numerable_icon_get_background_icon_name", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_get_count, "gtk_numerable_icon_get_count", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_get_label, "gtk_numerable_icon_get_label", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_get_style_context, "gtk_numerable_icon_get_style_context", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_set_background_gicon, "gtk_numerable_icon_set_background_gicon", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_set_background_icon_name, "gtk_numerable_icon_set_background_icon_name", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_set_count, "gtk_numerable_icon_set_count", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_set_label, "gtk_numerable_icon_set_label", LIBRARY.GTK);
	Linker.link(gtk_numerable_icon_set_style_context, "gtk_numerable_icon_set_style_context", LIBRARY.GTK);

	// gtk.OffscreenWindow

	Linker.link(gtk_offscreen_window_get_type, "gtk_offscreen_window_get_type", LIBRARY.GTK);
	Linker.link(gtk_offscreen_window_new, "gtk_offscreen_window_new", LIBRARY.GTK);
	Linker.link(gtk_offscreen_window_get_pixbuf, "gtk_offscreen_window_get_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_offscreen_window_get_surface, "gtk_offscreen_window_get_surface", LIBRARY.GTK);

	// gtk.Orientable

	Linker.link(gtk_orientable_get_type, "gtk_orientable_get_type", LIBRARY.GTK);
	Linker.link(gtk_orientable_get_orientation, "gtk_orientable_get_orientation", LIBRARY.GTK);
	Linker.link(gtk_orientable_set_orientation, "gtk_orientable_set_orientation", LIBRARY.GTK);

	// gtk.Overlay

	Linker.link(gtk_overlay_get_type, "gtk_overlay_get_type", LIBRARY.GTK);
	Linker.link(gtk_overlay_new, "gtk_overlay_new", LIBRARY.GTK);
	Linker.link(gtk_overlay_add_overlay, "gtk_overlay_add_overlay", LIBRARY.GTK);
	Linker.link(gtk_overlay_get_overlay_pass_through, "gtk_overlay_get_overlay_pass_through", LIBRARY.GTK);
	Linker.link(gtk_overlay_reorder_overlay, "gtk_overlay_reorder_overlay", LIBRARY.GTK);
	Linker.link(gtk_overlay_set_overlay_pass_through, "gtk_overlay_set_overlay_pass_through", LIBRARY.GTK);

	// gtk.PadController

	Linker.link(gtk_pad_controller_get_type, "gtk_pad_controller_get_type", LIBRARY.GTK);
	Linker.link(gtk_pad_controller_new, "gtk_pad_controller_new", LIBRARY.GTK);
	Linker.link(gtk_pad_controller_set_action, "gtk_pad_controller_set_action", LIBRARY.GTK);
	Linker.link(gtk_pad_controller_set_action_entries, "gtk_pad_controller_set_action_entries", LIBRARY.GTK);

	// gtk.PageSetup

	Linker.link(gtk_page_setup_get_type, "gtk_page_setup_get_type", LIBRARY.GTK);
	Linker.link(gtk_page_setup_new, "gtk_page_setup_new", LIBRARY.GTK);
	Linker.link(gtk_page_setup_new_from_file, "gtk_page_setup_new_from_file", LIBRARY.GTK);
	Linker.link(gtk_page_setup_new_from_gvariant, "gtk_page_setup_new_from_gvariant", LIBRARY.GTK);
	Linker.link(gtk_page_setup_new_from_key_file, "gtk_page_setup_new_from_key_file", LIBRARY.GTK);
	Linker.link(gtk_page_setup_copy, "gtk_page_setup_copy", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_bottom_margin, "gtk_page_setup_get_bottom_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_left_margin, "gtk_page_setup_get_left_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_orientation, "gtk_page_setup_get_orientation", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_page_height, "gtk_page_setup_get_page_height", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_page_width, "gtk_page_setup_get_page_width", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_paper_height, "gtk_page_setup_get_paper_height", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_paper_size, "gtk_page_setup_get_paper_size", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_paper_width, "gtk_page_setup_get_paper_width", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_right_margin, "gtk_page_setup_get_right_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_get_top_margin, "gtk_page_setup_get_top_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_load_file, "gtk_page_setup_load_file", LIBRARY.GTK);
	Linker.link(gtk_page_setup_load_key_file, "gtk_page_setup_load_key_file", LIBRARY.GTK);
	Linker.link(gtk_page_setup_set_bottom_margin, "gtk_page_setup_set_bottom_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_set_left_margin, "gtk_page_setup_set_left_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_set_orientation, "gtk_page_setup_set_orientation", LIBRARY.GTK);
	Linker.link(gtk_page_setup_set_paper_size, "gtk_page_setup_set_paper_size", LIBRARY.GTK);
	Linker.link(gtk_page_setup_set_paper_size_and_default_margins, "gtk_page_setup_set_paper_size_and_default_margins", LIBRARY.GTK);
	Linker.link(gtk_page_setup_set_right_margin, "gtk_page_setup_set_right_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_set_top_margin, "gtk_page_setup_set_top_margin", LIBRARY.GTK);
	Linker.link(gtk_page_setup_to_file, "gtk_page_setup_to_file", LIBRARY.GTK);
	Linker.link(gtk_page_setup_to_gvariant, "gtk_page_setup_to_gvariant", LIBRARY.GTK);
	Linker.link(gtk_page_setup_to_key_file, "gtk_page_setup_to_key_file", LIBRARY.GTK);

	// gtk.Paned

	Linker.link(gtk_paned_get_type, "gtk_paned_get_type", LIBRARY.GTK);
	Linker.link(gtk_paned_new, "gtk_paned_new", LIBRARY.GTK);
	Linker.link(gtk_paned_add1, "gtk_paned_add1", LIBRARY.GTK);
	Linker.link(gtk_paned_add2, "gtk_paned_add2", LIBRARY.GTK);
	Linker.link(gtk_paned_get_child1, "gtk_paned_get_child1", LIBRARY.GTK);
	Linker.link(gtk_paned_get_child2, "gtk_paned_get_child2", LIBRARY.GTK);
	Linker.link(gtk_paned_get_handle_window, "gtk_paned_get_handle_window", LIBRARY.GTK);
	Linker.link(gtk_paned_get_position, "gtk_paned_get_position", LIBRARY.GTK);
	Linker.link(gtk_paned_get_wide_handle, "gtk_paned_get_wide_handle", LIBRARY.GTK);
	Linker.link(gtk_paned_pack1, "gtk_paned_pack1", LIBRARY.GTK);
	Linker.link(gtk_paned_pack2, "gtk_paned_pack2", LIBRARY.GTK);
	Linker.link(gtk_paned_set_position, "gtk_paned_set_position", LIBRARY.GTK);
	Linker.link(gtk_paned_set_wide_handle, "gtk_paned_set_wide_handle", LIBRARY.GTK);

	// gtk.PanedAccessible

	Linker.link(gtk_paned_accessible_get_type, "gtk_paned_accessible_get_type", LIBRARY.GTK);

	// gtk.PaperSize

	Linker.link(gtk_paper_size_get_type, "gtk_paper_size_get_type", LIBRARY.GTK);
	Linker.link(gtk_paper_size_new, "gtk_paper_size_new", LIBRARY.GTK);
	Linker.link(gtk_paper_size_new_custom, "gtk_paper_size_new_custom", LIBRARY.GTK);
	Linker.link(gtk_paper_size_new_from_gvariant, "gtk_paper_size_new_from_gvariant", LIBRARY.GTK);
	Linker.link(gtk_paper_size_new_from_ipp, "gtk_paper_size_new_from_ipp", LIBRARY.GTK);
	Linker.link(gtk_paper_size_new_from_key_file, "gtk_paper_size_new_from_key_file", LIBRARY.GTK);
	Linker.link(gtk_paper_size_new_from_ppd, "gtk_paper_size_new_from_ppd", LIBRARY.GTK);
	Linker.link(gtk_paper_size_copy, "gtk_paper_size_copy", LIBRARY.GTK);
	Linker.link(gtk_paper_size_free, "gtk_paper_size_free", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_default_bottom_margin, "gtk_paper_size_get_default_bottom_margin", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_default_left_margin, "gtk_paper_size_get_default_left_margin", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_default_right_margin, "gtk_paper_size_get_default_right_margin", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_default_top_margin, "gtk_paper_size_get_default_top_margin", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_display_name, "gtk_paper_size_get_display_name", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_height, "gtk_paper_size_get_height", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_name, "gtk_paper_size_get_name", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_ppd_name, "gtk_paper_size_get_ppd_name", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_width, "gtk_paper_size_get_width", LIBRARY.GTK);
	Linker.link(gtk_paper_size_is_custom, "gtk_paper_size_is_custom", LIBRARY.GTK);
	Linker.link(gtk_paper_size_is_equal, "gtk_paper_size_is_equal", LIBRARY.GTK);
	Linker.link(gtk_paper_size_is_ipp, "gtk_paper_size_is_ipp", LIBRARY.GTK);
	Linker.link(gtk_paper_size_set_size, "gtk_paper_size_set_size", LIBRARY.GTK);
	Linker.link(gtk_paper_size_to_gvariant, "gtk_paper_size_to_gvariant", LIBRARY.GTK);
	Linker.link(gtk_paper_size_to_key_file, "gtk_paper_size_to_key_file", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_default, "gtk_paper_size_get_default", LIBRARY.GTK);
	Linker.link(gtk_paper_size_get_paper_sizes, "gtk_paper_size_get_paper_sizes", LIBRARY.GTK);

	// gtk.PlacesSidebar

	Linker.link(gtk_places_sidebar_get_type, "gtk_places_sidebar_get_type", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_new, "gtk_places_sidebar_new", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_add_shortcut, "gtk_places_sidebar_add_shortcut", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_local_only, "gtk_places_sidebar_get_local_only", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_location, "gtk_places_sidebar_get_location", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_nth_bookmark, "gtk_places_sidebar_get_nth_bookmark", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_open_flags, "gtk_places_sidebar_get_open_flags", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_show_connect_to_server, "gtk_places_sidebar_get_show_connect_to_server", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_show_desktop, "gtk_places_sidebar_get_show_desktop", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_show_enter_location, "gtk_places_sidebar_get_show_enter_location", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_show_other_locations, "gtk_places_sidebar_get_show_other_locations", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_show_recent, "gtk_places_sidebar_get_show_recent", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_get_show_trash, "gtk_places_sidebar_get_show_trash", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_list_shortcuts, "gtk_places_sidebar_list_shortcuts", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_remove_shortcut, "gtk_places_sidebar_remove_shortcut", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_drop_targets_visible, "gtk_places_sidebar_set_drop_targets_visible", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_local_only, "gtk_places_sidebar_set_local_only", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_location, "gtk_places_sidebar_set_location", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_open_flags, "gtk_places_sidebar_set_open_flags", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_show_connect_to_server, "gtk_places_sidebar_set_show_connect_to_server", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_show_desktop, "gtk_places_sidebar_set_show_desktop", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_show_enter_location, "gtk_places_sidebar_set_show_enter_location", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_show_other_locations, "gtk_places_sidebar_set_show_other_locations", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_show_recent, "gtk_places_sidebar_set_show_recent", LIBRARY.GTK);
	Linker.link(gtk_places_sidebar_set_show_trash, "gtk_places_sidebar_set_show_trash", LIBRARY.GTK);

	// gtk.Plug

	Linker.link(gtk_plug_get_type, "gtk_plug_get_type", LIBRARY.GTK);
	Linker.link(gtk_plug_new, "gtk_plug_new", LIBRARY.GTK);
	Linker.link(gtk_plug_new_for_display, "gtk_plug_new_for_display", LIBRARY.GTK);
	Linker.link(gtk_plug_construct, "gtk_plug_construct", LIBRARY.GTK);
	Linker.link(gtk_plug_construct_for_display, "gtk_plug_construct_for_display", LIBRARY.GTK);
	Linker.link(gtk_plug_get_embedded, "gtk_plug_get_embedded", LIBRARY.GTK);
	Linker.link(gtk_plug_get_id, "gtk_plug_get_id", LIBRARY.GTK);
	Linker.link(gtk_plug_get_socket_window, "gtk_plug_get_socket_window", LIBRARY.GTK);

	// gtk.Popover

	Linker.link(gtk_popover_get_type, "gtk_popover_get_type", LIBRARY.GTK);
	Linker.link(gtk_popover_new, "gtk_popover_new", LIBRARY.GTK);
	Linker.link(gtk_popover_new_from_model, "gtk_popover_new_from_model", LIBRARY.GTK);
	Linker.link(gtk_popover_bind_model, "gtk_popover_bind_model", LIBRARY.GTK);
	Linker.link(gtk_popover_get_constrain_to, "gtk_popover_get_constrain_to", LIBRARY.GTK);
	Linker.link(gtk_popover_get_default_widget, "gtk_popover_get_default_widget", LIBRARY.GTK);
	Linker.link(gtk_popover_get_modal, "gtk_popover_get_modal", LIBRARY.GTK);
	Linker.link(gtk_popover_get_pointing_to, "gtk_popover_get_pointing_to", LIBRARY.GTK);
	Linker.link(gtk_popover_get_position, "gtk_popover_get_position", LIBRARY.GTK);
	Linker.link(gtk_popover_get_relative_to, "gtk_popover_get_relative_to", LIBRARY.GTK);
	Linker.link(gtk_popover_get_transitions_enabled, "gtk_popover_get_transitions_enabled", LIBRARY.GTK);
	Linker.link(gtk_popover_popdown, "gtk_popover_popdown", LIBRARY.GTK);
	Linker.link(gtk_popover_popup, "gtk_popover_popup", LIBRARY.GTK);
	Linker.link(gtk_popover_set_constrain_to, "gtk_popover_set_constrain_to", LIBRARY.GTK);
	Linker.link(gtk_popover_set_default_widget, "gtk_popover_set_default_widget", LIBRARY.GTK);
	Linker.link(gtk_popover_set_modal, "gtk_popover_set_modal", LIBRARY.GTK);
	Linker.link(gtk_popover_set_pointing_to, "gtk_popover_set_pointing_to", LIBRARY.GTK);
	Linker.link(gtk_popover_set_position, "gtk_popover_set_position", LIBRARY.GTK);
	Linker.link(gtk_popover_set_relative_to, "gtk_popover_set_relative_to", LIBRARY.GTK);
	Linker.link(gtk_popover_set_transitions_enabled, "gtk_popover_set_transitions_enabled", LIBRARY.GTK);

	// gtk.PopoverAccessible

	Linker.link(gtk_popover_accessible_get_type, "gtk_popover_accessible_get_type", LIBRARY.GTK);

	// gtk.PopoverMenu

	Linker.link(gtk_popover_menu_get_type, "gtk_popover_menu_get_type", LIBRARY.GTK);
	Linker.link(gtk_popover_menu_new, "gtk_popover_menu_new", LIBRARY.GTK);
	Linker.link(gtk_popover_menu_open_submenu, "gtk_popover_menu_open_submenu", LIBRARY.GTK);

	// gtk.PrintContext

	Linker.link(gtk_print_context_get_type, "gtk_print_context_get_type", LIBRARY.GTK);
	Linker.link(gtk_print_context_create_pango_context, "gtk_print_context_create_pango_context", LIBRARY.GTK);
	Linker.link(gtk_print_context_create_pango_layout, "gtk_print_context_create_pango_layout", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_cairo_context, "gtk_print_context_get_cairo_context", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_dpi_x, "gtk_print_context_get_dpi_x", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_dpi_y, "gtk_print_context_get_dpi_y", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_hard_margins, "gtk_print_context_get_hard_margins", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_height, "gtk_print_context_get_height", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_page_setup, "gtk_print_context_get_page_setup", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_pango_fontmap, "gtk_print_context_get_pango_fontmap", LIBRARY.GTK);
	Linker.link(gtk_print_context_get_width, "gtk_print_context_get_width", LIBRARY.GTK);
	Linker.link(gtk_print_context_set_cairo_context, "gtk_print_context_set_cairo_context", LIBRARY.GTK);

	// gtk.PrintOperation

	Linker.link(gtk_print_operation_get_type, "gtk_print_operation_get_type", LIBRARY.GTK);
	Linker.link(gtk_print_operation_new, "gtk_print_operation_new", LIBRARY.GTK);
	Linker.link(gtk_print_operation_cancel, "gtk_print_operation_cancel", LIBRARY.GTK);
	Linker.link(gtk_print_operation_draw_page_finish, "gtk_print_operation_draw_page_finish", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_default_page_setup, "gtk_print_operation_get_default_page_setup", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_embed_page_setup, "gtk_print_operation_get_embed_page_setup", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_error, "gtk_print_operation_get_error", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_has_selection, "gtk_print_operation_get_has_selection", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_n_pages_to_print, "gtk_print_operation_get_n_pages_to_print", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_print_settings, "gtk_print_operation_get_print_settings", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_status, "gtk_print_operation_get_status", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_status_string, "gtk_print_operation_get_status_string", LIBRARY.GTK);
	Linker.link(gtk_print_operation_get_support_selection, "gtk_print_operation_get_support_selection", LIBRARY.GTK);
	Linker.link(gtk_print_operation_is_finished, "gtk_print_operation_is_finished", LIBRARY.GTK);
	Linker.link(gtk_print_operation_run, "gtk_print_operation_run", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_allow_async, "gtk_print_operation_set_allow_async", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_current_page, "gtk_print_operation_set_current_page", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_custom_tab_label, "gtk_print_operation_set_custom_tab_label", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_default_page_setup, "gtk_print_operation_set_default_page_setup", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_defer_drawing, "gtk_print_operation_set_defer_drawing", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_embed_page_setup, "gtk_print_operation_set_embed_page_setup", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_export_filename, "gtk_print_operation_set_export_filename", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_has_selection, "gtk_print_operation_set_has_selection", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_job_name, "gtk_print_operation_set_job_name", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_n_pages, "gtk_print_operation_set_n_pages", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_print_settings, "gtk_print_operation_set_print_settings", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_show_progress, "gtk_print_operation_set_show_progress", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_support_selection, "gtk_print_operation_set_support_selection", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_track_print_status, "gtk_print_operation_set_track_print_status", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_unit, "gtk_print_operation_set_unit", LIBRARY.GTK);
	Linker.link(gtk_print_operation_set_use_full_page, "gtk_print_operation_set_use_full_page", LIBRARY.GTK);
	Linker.link(gtk_print_run_page_setup_dialog, "gtk_print_run_page_setup_dialog", LIBRARY.GTK);
	Linker.link(gtk_print_run_page_setup_dialog_async, "gtk_print_run_page_setup_dialog_async", LIBRARY.GTK);

	// gtk.PrintOperationPreview

	Linker.link(gtk_print_operation_preview_get_type, "gtk_print_operation_preview_get_type", LIBRARY.GTK);
	Linker.link(gtk_print_operation_preview_end_preview, "gtk_print_operation_preview_end_preview", LIBRARY.GTK);
	Linker.link(gtk_print_operation_preview_is_selected, "gtk_print_operation_preview_is_selected", LIBRARY.GTK);
	Linker.link(gtk_print_operation_preview_render_page, "gtk_print_operation_preview_render_page", LIBRARY.GTK);

	// gtk.PrintSettings

	Linker.link(gtk_print_settings_get_type, "gtk_print_settings_get_type", LIBRARY.GTK);
	Linker.link(gtk_print_settings_new, "gtk_print_settings_new", LIBRARY.GTK);
	Linker.link(gtk_print_settings_new_from_file, "gtk_print_settings_new_from_file", LIBRARY.GTK);
	Linker.link(gtk_print_settings_new_from_gvariant, "gtk_print_settings_new_from_gvariant", LIBRARY.GTK);
	Linker.link(gtk_print_settings_new_from_key_file, "gtk_print_settings_new_from_key_file", LIBRARY.GTK);
	Linker.link(gtk_print_settings_copy, "gtk_print_settings_copy", LIBRARY.GTK);
	Linker.link(gtk_print_settings_foreach, "gtk_print_settings_foreach", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get, "gtk_print_settings_get", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_bool, "gtk_print_settings_get_bool", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_collate, "gtk_print_settings_get_collate", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_default_source, "gtk_print_settings_get_default_source", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_dither, "gtk_print_settings_get_dither", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_double, "gtk_print_settings_get_double", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_double_with_default, "gtk_print_settings_get_double_with_default", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_duplex, "gtk_print_settings_get_duplex", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_finishings, "gtk_print_settings_get_finishings", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_int, "gtk_print_settings_get_int", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_int_with_default, "gtk_print_settings_get_int_with_default", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_length, "gtk_print_settings_get_length", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_media_type, "gtk_print_settings_get_media_type", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_n_copies, "gtk_print_settings_get_n_copies", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_number_up, "gtk_print_settings_get_number_up", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_number_up_layout, "gtk_print_settings_get_number_up_layout", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_orientation, "gtk_print_settings_get_orientation", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_output_bin, "gtk_print_settings_get_output_bin", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_page_ranges, "gtk_print_settings_get_page_ranges", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_page_set, "gtk_print_settings_get_page_set", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_paper_height, "gtk_print_settings_get_paper_height", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_paper_size, "gtk_print_settings_get_paper_size", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_paper_width, "gtk_print_settings_get_paper_width", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_print_pages, "gtk_print_settings_get_print_pages", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_printer, "gtk_print_settings_get_printer", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_printer_lpi, "gtk_print_settings_get_printer_lpi", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_quality, "gtk_print_settings_get_quality", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_resolution, "gtk_print_settings_get_resolution", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_resolution_x, "gtk_print_settings_get_resolution_x", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_resolution_y, "gtk_print_settings_get_resolution_y", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_reverse, "gtk_print_settings_get_reverse", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_scale, "gtk_print_settings_get_scale", LIBRARY.GTK);
	Linker.link(gtk_print_settings_get_use_color, "gtk_print_settings_get_use_color", LIBRARY.GTK);
	Linker.link(gtk_print_settings_has_key, "gtk_print_settings_has_key", LIBRARY.GTK);
	Linker.link(gtk_print_settings_load_file, "gtk_print_settings_load_file", LIBRARY.GTK);
	Linker.link(gtk_print_settings_load_key_file, "gtk_print_settings_load_key_file", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set, "gtk_print_settings_set", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_bool, "gtk_print_settings_set_bool", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_collate, "gtk_print_settings_set_collate", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_default_source, "gtk_print_settings_set_default_source", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_dither, "gtk_print_settings_set_dither", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_double, "gtk_print_settings_set_double", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_duplex, "gtk_print_settings_set_duplex", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_finishings, "gtk_print_settings_set_finishings", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_int, "gtk_print_settings_set_int", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_length, "gtk_print_settings_set_length", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_media_type, "gtk_print_settings_set_media_type", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_n_copies, "gtk_print_settings_set_n_copies", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_number_up, "gtk_print_settings_set_number_up", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_number_up_layout, "gtk_print_settings_set_number_up_layout", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_orientation, "gtk_print_settings_set_orientation", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_output_bin, "gtk_print_settings_set_output_bin", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_page_ranges, "gtk_print_settings_set_page_ranges", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_page_set, "gtk_print_settings_set_page_set", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_paper_height, "gtk_print_settings_set_paper_height", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_paper_size, "gtk_print_settings_set_paper_size", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_paper_width, "gtk_print_settings_set_paper_width", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_print_pages, "gtk_print_settings_set_print_pages", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_printer, "gtk_print_settings_set_printer", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_printer_lpi, "gtk_print_settings_set_printer_lpi", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_quality, "gtk_print_settings_set_quality", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_resolution, "gtk_print_settings_set_resolution", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_resolution_xy, "gtk_print_settings_set_resolution_xy", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_reverse, "gtk_print_settings_set_reverse", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_scale, "gtk_print_settings_set_scale", LIBRARY.GTK);
	Linker.link(gtk_print_settings_set_use_color, "gtk_print_settings_set_use_color", LIBRARY.GTK);
	Linker.link(gtk_print_settings_to_file, "gtk_print_settings_to_file", LIBRARY.GTK);
	Linker.link(gtk_print_settings_to_gvariant, "gtk_print_settings_to_gvariant", LIBRARY.GTK);
	Linker.link(gtk_print_settings_to_key_file, "gtk_print_settings_to_key_file", LIBRARY.GTK);
	Linker.link(gtk_print_settings_unset, "gtk_print_settings_unset", LIBRARY.GTK);

	// gtk.ProgressBar

	Linker.link(gtk_progress_bar_get_type, "gtk_progress_bar_get_type", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_new, "gtk_progress_bar_new", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_get_ellipsize, "gtk_progress_bar_get_ellipsize", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_get_fraction, "gtk_progress_bar_get_fraction", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_get_inverted, "gtk_progress_bar_get_inverted", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_get_pulse_step, "gtk_progress_bar_get_pulse_step", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_get_show_text, "gtk_progress_bar_get_show_text", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_get_text, "gtk_progress_bar_get_text", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_pulse, "gtk_progress_bar_pulse", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_set_ellipsize, "gtk_progress_bar_set_ellipsize", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_set_fraction, "gtk_progress_bar_set_fraction", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_set_inverted, "gtk_progress_bar_set_inverted", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_set_pulse_step, "gtk_progress_bar_set_pulse_step", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_set_show_text, "gtk_progress_bar_set_show_text", LIBRARY.GTK);
	Linker.link(gtk_progress_bar_set_text, "gtk_progress_bar_set_text", LIBRARY.GTK);

	// gtk.ProgressBarAccessible

	Linker.link(gtk_progress_bar_accessible_get_type, "gtk_progress_bar_accessible_get_type", LIBRARY.GTK);

	// gtk.RadioAction

	Linker.link(gtk_radio_action_get_type, "gtk_radio_action_get_type", LIBRARY.GTK);
	Linker.link(gtk_radio_action_new, "gtk_radio_action_new", LIBRARY.GTK);
	Linker.link(gtk_radio_action_get_current_value, "gtk_radio_action_get_current_value", LIBRARY.GTK);
	Linker.link(gtk_radio_action_get_group, "gtk_radio_action_get_group", LIBRARY.GTK);
	Linker.link(gtk_radio_action_join_group, "gtk_radio_action_join_group", LIBRARY.GTK);
	Linker.link(gtk_radio_action_set_current_value, "gtk_radio_action_set_current_value", LIBRARY.GTK);
	Linker.link(gtk_radio_action_set_group, "gtk_radio_action_set_group", LIBRARY.GTK);

	// gtk.RadioButton

	Linker.link(gtk_radio_button_get_type, "gtk_radio_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_radio_button_new, "gtk_radio_button_new", LIBRARY.GTK);
	Linker.link(gtk_radio_button_new_from_widget, "gtk_radio_button_new_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_button_new_with_label, "gtk_radio_button_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_radio_button_new_with_label_from_widget, "gtk_radio_button_new_with_label_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_button_new_with_mnemonic, "gtk_radio_button_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_radio_button_new_with_mnemonic_from_widget, "gtk_radio_button_new_with_mnemonic_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_button_get_group, "gtk_radio_button_get_group", LIBRARY.GTK);
	Linker.link(gtk_radio_button_join_group, "gtk_radio_button_join_group", LIBRARY.GTK);
	Linker.link(gtk_radio_button_set_group, "gtk_radio_button_set_group", LIBRARY.GTK);

	// gtk.RadioButtonAccessible

	Linker.link(gtk_radio_button_accessible_get_type, "gtk_radio_button_accessible_get_type", LIBRARY.GTK);

	// gtk.RadioMenuItem

	Linker.link(gtk_radio_menu_item_get_type, "gtk_radio_menu_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_new, "gtk_radio_menu_item_new", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_new_from_widget, "gtk_radio_menu_item_new_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_new_with_label, "gtk_radio_menu_item_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_new_with_label_from_widget, "gtk_radio_menu_item_new_with_label_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_new_with_mnemonic, "gtk_radio_menu_item_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_new_with_mnemonic_from_widget, "gtk_radio_menu_item_new_with_mnemonic_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_get_group, "gtk_radio_menu_item_get_group", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_join_group, "gtk_radio_menu_item_join_group", LIBRARY.GTK);
	Linker.link(gtk_radio_menu_item_set_group, "gtk_radio_menu_item_set_group", LIBRARY.GTK);

	// gtk.RadioMenuItemAccessible

	Linker.link(gtk_radio_menu_item_accessible_get_type, "gtk_radio_menu_item_accessible_get_type", LIBRARY.GTK);

	// gtk.RadioToolButton

	Linker.link(gtk_radio_tool_button_get_type, "gtk_radio_tool_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_radio_tool_button_new, "gtk_radio_tool_button_new", LIBRARY.GTK);
	Linker.link(gtk_radio_tool_button_new_from_stock, "gtk_radio_tool_button_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_radio_tool_button_new_from_widget, "gtk_radio_tool_button_new_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_tool_button_new_with_stock_from_widget, "gtk_radio_tool_button_new_with_stock_from_widget", LIBRARY.GTK);
	Linker.link(gtk_radio_tool_button_get_group, "gtk_radio_tool_button_get_group", LIBRARY.GTK);
	Linker.link(gtk_radio_tool_button_set_group, "gtk_radio_tool_button_set_group", LIBRARY.GTK);

	// gtk.Range

	Linker.link(gtk_range_get_type, "gtk_range_get_type", LIBRARY.GTK);
	Linker.link(gtk_range_get_adjustment, "gtk_range_get_adjustment", LIBRARY.GTK);
	Linker.link(gtk_range_get_fill_level, "gtk_range_get_fill_level", LIBRARY.GTK);
	Linker.link(gtk_range_get_flippable, "gtk_range_get_flippable", LIBRARY.GTK);
	Linker.link(gtk_range_get_inverted, "gtk_range_get_inverted", LIBRARY.GTK);
	Linker.link(gtk_range_get_lower_stepper_sensitivity, "gtk_range_get_lower_stepper_sensitivity", LIBRARY.GTK);
	Linker.link(gtk_range_get_min_slider_size, "gtk_range_get_min_slider_size", LIBRARY.GTK);
	Linker.link(gtk_range_get_range_rect, "gtk_range_get_range_rect", LIBRARY.GTK);
	Linker.link(gtk_range_get_restrict_to_fill_level, "gtk_range_get_restrict_to_fill_level", LIBRARY.GTK);
	Linker.link(gtk_range_get_round_digits, "gtk_range_get_round_digits", LIBRARY.GTK);
	Linker.link(gtk_range_get_show_fill_level, "gtk_range_get_show_fill_level", LIBRARY.GTK);
	Linker.link(gtk_range_get_slider_range, "gtk_range_get_slider_range", LIBRARY.GTK);
	Linker.link(gtk_range_get_slider_size_fixed, "gtk_range_get_slider_size_fixed", LIBRARY.GTK);
	Linker.link(gtk_range_get_upper_stepper_sensitivity, "gtk_range_get_upper_stepper_sensitivity", LIBRARY.GTK);
	Linker.link(gtk_range_get_value, "gtk_range_get_value", LIBRARY.GTK);
	Linker.link(gtk_range_set_adjustment, "gtk_range_set_adjustment", LIBRARY.GTK);
	Linker.link(gtk_range_set_fill_level, "gtk_range_set_fill_level", LIBRARY.GTK);
	Linker.link(gtk_range_set_flippable, "gtk_range_set_flippable", LIBRARY.GTK);
	Linker.link(gtk_range_set_increments, "gtk_range_set_increments", LIBRARY.GTK);
	Linker.link(gtk_range_set_inverted, "gtk_range_set_inverted", LIBRARY.GTK);
	Linker.link(gtk_range_set_lower_stepper_sensitivity, "gtk_range_set_lower_stepper_sensitivity", LIBRARY.GTK);
	Linker.link(gtk_range_set_min_slider_size, "gtk_range_set_min_slider_size", LIBRARY.GTK);
	Linker.link(gtk_range_set_range, "gtk_range_set_range", LIBRARY.GTK);
	Linker.link(gtk_range_set_restrict_to_fill_level, "gtk_range_set_restrict_to_fill_level", LIBRARY.GTK);
	Linker.link(gtk_range_set_round_digits, "gtk_range_set_round_digits", LIBRARY.GTK);
	Linker.link(gtk_range_set_show_fill_level, "gtk_range_set_show_fill_level", LIBRARY.GTK);
	Linker.link(gtk_range_set_slider_size_fixed, "gtk_range_set_slider_size_fixed", LIBRARY.GTK);
	Linker.link(gtk_range_set_upper_stepper_sensitivity, "gtk_range_set_upper_stepper_sensitivity", LIBRARY.GTK);
	Linker.link(gtk_range_set_value, "gtk_range_set_value", LIBRARY.GTK);

	// gtk.RangeAccessible

	Linker.link(gtk_range_accessible_get_type, "gtk_range_accessible_get_type", LIBRARY.GTK);

	// gtk.RcProperty

	Linker.link(gtk_rc_property_parse_border, "gtk_rc_property_parse_border", LIBRARY.GTK);
	Linker.link(gtk_rc_property_parse_color, "gtk_rc_property_parse_color", LIBRARY.GTK);
	Linker.link(gtk_rc_property_parse_enum, "gtk_rc_property_parse_enum", LIBRARY.GTK);
	Linker.link(gtk_rc_property_parse_flags, "gtk_rc_property_parse_flags", LIBRARY.GTK);
	Linker.link(gtk_rc_property_parse_requisition, "gtk_rc_property_parse_requisition", LIBRARY.GTK);

	// gtk.RcStyle

	Linker.link(gtk_rc_style_get_type, "gtk_rc_style_get_type", LIBRARY.GTK);
	Linker.link(gtk_rc_style_new, "gtk_rc_style_new", LIBRARY.GTK);
	Linker.link(gtk_rc_style_copy, "gtk_rc_style_copy", LIBRARY.GTK);
	Linker.link(gtk_rc_add_default_file, "gtk_rc_add_default_file", LIBRARY.GTK);
	Linker.link(gtk_rc_find_module_in_path, "gtk_rc_find_module_in_path", LIBRARY.GTK);
	Linker.link(gtk_rc_find_pixmap_in_path, "gtk_rc_find_pixmap_in_path", LIBRARY.GTK);
	Linker.link(gtk_rc_get_default_files, "gtk_rc_get_default_files", LIBRARY.GTK);
	Linker.link(gtk_rc_get_im_module_file, "gtk_rc_get_im_module_file", LIBRARY.GTK);
	Linker.link(gtk_rc_get_im_module_path, "gtk_rc_get_im_module_path", LIBRARY.GTK);
	Linker.link(gtk_rc_get_module_dir, "gtk_rc_get_module_dir", LIBRARY.GTK);
	Linker.link(gtk_rc_get_style, "gtk_rc_get_style", LIBRARY.GTK);
	Linker.link(gtk_rc_get_style_by_paths, "gtk_rc_get_style_by_paths", LIBRARY.GTK);
	Linker.link(gtk_rc_get_theme_dir, "gtk_rc_get_theme_dir", LIBRARY.GTK);
	Linker.link(gtk_rc_parse, "gtk_rc_parse", LIBRARY.GTK);
	Linker.link(gtk_rc_parse_color, "gtk_rc_parse_color", LIBRARY.GTK);
	Linker.link(gtk_rc_parse_color_full, "gtk_rc_parse_color_full", LIBRARY.GTK);
	Linker.link(gtk_rc_parse_priority, "gtk_rc_parse_priority", LIBRARY.GTK);
	Linker.link(gtk_rc_parse_state, "gtk_rc_parse_state", LIBRARY.GTK);
	Linker.link(gtk_rc_parse_string, "gtk_rc_parse_string", LIBRARY.GTK);
	Linker.link(gtk_rc_reparse_all, "gtk_rc_reparse_all", LIBRARY.GTK);
	Linker.link(gtk_rc_reparse_all_for_settings, "gtk_rc_reparse_all_for_settings", LIBRARY.GTK);
	Linker.link(gtk_rc_reset_styles, "gtk_rc_reset_styles", LIBRARY.GTK);
	Linker.link(gtk_rc_scanner_new, "gtk_rc_scanner_new", LIBRARY.GTK);
	Linker.link(gtk_rc_set_default_files, "gtk_rc_set_default_files", LIBRARY.GTK);

	// gtk.RecentAction

	Linker.link(gtk_recent_action_get_type, "gtk_recent_action_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_action_new, "gtk_recent_action_new", LIBRARY.GTK);
	Linker.link(gtk_recent_action_new_for_manager, "gtk_recent_action_new_for_manager", LIBRARY.GTK);
	Linker.link(gtk_recent_action_get_show_numbers, "gtk_recent_action_get_show_numbers", LIBRARY.GTK);
	Linker.link(gtk_recent_action_set_show_numbers, "gtk_recent_action_set_show_numbers", LIBRARY.GTK);

	// gtk.RecentChooser

	Linker.link(gtk_recent_chooser_get_type, "gtk_recent_chooser_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_add_filter, "gtk_recent_chooser_add_filter", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_current_item, "gtk_recent_chooser_get_current_item", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_current_uri, "gtk_recent_chooser_get_current_uri", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_filter, "gtk_recent_chooser_get_filter", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_items, "gtk_recent_chooser_get_items", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_limit, "gtk_recent_chooser_get_limit", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_local_only, "gtk_recent_chooser_get_local_only", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_select_multiple, "gtk_recent_chooser_get_select_multiple", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_show_icons, "gtk_recent_chooser_get_show_icons", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_show_not_found, "gtk_recent_chooser_get_show_not_found", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_show_private, "gtk_recent_chooser_get_show_private", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_show_tips, "gtk_recent_chooser_get_show_tips", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_sort_type, "gtk_recent_chooser_get_sort_type", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_get_uris, "gtk_recent_chooser_get_uris", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_list_filters, "gtk_recent_chooser_list_filters", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_remove_filter, "gtk_recent_chooser_remove_filter", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_select_all, "gtk_recent_chooser_select_all", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_select_uri, "gtk_recent_chooser_select_uri", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_current_uri, "gtk_recent_chooser_set_current_uri", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_filter, "gtk_recent_chooser_set_filter", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_limit, "gtk_recent_chooser_set_limit", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_local_only, "gtk_recent_chooser_set_local_only", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_select_multiple, "gtk_recent_chooser_set_select_multiple", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_show_icons, "gtk_recent_chooser_set_show_icons", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_show_not_found, "gtk_recent_chooser_set_show_not_found", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_show_private, "gtk_recent_chooser_set_show_private", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_show_tips, "gtk_recent_chooser_set_show_tips", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_sort_func, "gtk_recent_chooser_set_sort_func", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_set_sort_type, "gtk_recent_chooser_set_sort_type", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_unselect_all, "gtk_recent_chooser_unselect_all", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_unselect_uri, "gtk_recent_chooser_unselect_uri", LIBRARY.GTK);

	// gtk.RecentChooserDialog

	Linker.link(gtk_recent_chooser_dialog_get_type, "gtk_recent_chooser_dialog_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_dialog_new, "gtk_recent_chooser_dialog_new", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_dialog_new_for_manager, "gtk_recent_chooser_dialog_new_for_manager", LIBRARY.GTK);

	// gtk.RecentChooserMenu

	Linker.link(gtk_recent_chooser_menu_get_type, "gtk_recent_chooser_menu_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_menu_new, "gtk_recent_chooser_menu_new", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_menu_new_for_manager, "gtk_recent_chooser_menu_new_for_manager", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_menu_get_show_numbers, "gtk_recent_chooser_menu_get_show_numbers", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_menu_set_show_numbers, "gtk_recent_chooser_menu_set_show_numbers", LIBRARY.GTK);

	// gtk.RecentChooserWidget

	Linker.link(gtk_recent_chooser_widget_get_type, "gtk_recent_chooser_widget_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_widget_new, "gtk_recent_chooser_widget_new", LIBRARY.GTK);
	Linker.link(gtk_recent_chooser_widget_new_for_manager, "gtk_recent_chooser_widget_new_for_manager", LIBRARY.GTK);

	// gtk.RecentFilter

	Linker.link(gtk_recent_filter_get_type, "gtk_recent_filter_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_new, "gtk_recent_filter_new", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_add_age, "gtk_recent_filter_add_age", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_add_application, "gtk_recent_filter_add_application", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_add_custom, "gtk_recent_filter_add_custom", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_add_group, "gtk_recent_filter_add_group", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_add_mime_type, "gtk_recent_filter_add_mime_type", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_add_pattern, "gtk_recent_filter_add_pattern", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_add_pixbuf_formats, "gtk_recent_filter_add_pixbuf_formats", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_filter, "gtk_recent_filter_filter", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_get_name, "gtk_recent_filter_get_name", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_get_needed, "gtk_recent_filter_get_needed", LIBRARY.GTK);
	Linker.link(gtk_recent_filter_set_name, "gtk_recent_filter_set_name", LIBRARY.GTK);

	// gtk.RecentInfo

	Linker.link(gtk_recent_info_get_type, "gtk_recent_info_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_info_create_app_info, "gtk_recent_info_create_app_info", LIBRARY.GTK);
	Linker.link(gtk_recent_info_exists, "gtk_recent_info_exists", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_added, "gtk_recent_info_get_added", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_age, "gtk_recent_info_get_age", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_application_info, "gtk_recent_info_get_application_info", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_applications, "gtk_recent_info_get_applications", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_description, "gtk_recent_info_get_description", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_display_name, "gtk_recent_info_get_display_name", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_gicon, "gtk_recent_info_get_gicon", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_groups, "gtk_recent_info_get_groups", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_icon, "gtk_recent_info_get_icon", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_mime_type, "gtk_recent_info_get_mime_type", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_modified, "gtk_recent_info_get_modified", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_private_hint, "gtk_recent_info_get_private_hint", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_short_name, "gtk_recent_info_get_short_name", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_uri, "gtk_recent_info_get_uri", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_uri_display, "gtk_recent_info_get_uri_display", LIBRARY.GTK);
	Linker.link(gtk_recent_info_get_visited, "gtk_recent_info_get_visited", LIBRARY.GTK);
	Linker.link(gtk_recent_info_has_application, "gtk_recent_info_has_application", LIBRARY.GTK);
	Linker.link(gtk_recent_info_has_group, "gtk_recent_info_has_group", LIBRARY.GTK);
	Linker.link(gtk_recent_info_is_local, "gtk_recent_info_is_local", LIBRARY.GTK);
	Linker.link(gtk_recent_info_last_application, "gtk_recent_info_last_application", LIBRARY.GTK);
	Linker.link(gtk_recent_info_match, "gtk_recent_info_match", LIBRARY.GTK);
	Linker.link(gtk_recent_info_ref, "gtk_recent_info_ref", LIBRARY.GTK);
	Linker.link(gtk_recent_info_unref, "gtk_recent_info_unref", LIBRARY.GTK);

	// gtk.RecentManager

	Linker.link(gtk_recent_manager_get_type, "gtk_recent_manager_get_type", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_new, "gtk_recent_manager_new", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_get_default, "gtk_recent_manager_get_default", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_add_full, "gtk_recent_manager_add_full", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_add_item, "gtk_recent_manager_add_item", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_get_items, "gtk_recent_manager_get_items", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_has_item, "gtk_recent_manager_has_item", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_lookup_item, "gtk_recent_manager_lookup_item", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_move_item, "gtk_recent_manager_move_item", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_purge_items, "gtk_recent_manager_purge_items", LIBRARY.GTK);
	Linker.link(gtk_recent_manager_remove_item, "gtk_recent_manager_remove_item", LIBRARY.GTK);

	// gtk.RendererCellAccessible

	Linker.link(gtk_renderer_cell_accessible_get_type, "gtk_renderer_cell_accessible_get_type", LIBRARY.GTK);
	Linker.link(gtk_renderer_cell_accessible_new, "gtk_renderer_cell_accessible_new", LIBRARY.GTK);

	// gtk.Requisition

	Linker.link(gtk_requisition_get_type, "gtk_requisition_get_type", LIBRARY.GTK);
	Linker.link(gtk_requisition_new, "gtk_requisition_new", LIBRARY.GTK);
	Linker.link(gtk_requisition_copy, "gtk_requisition_copy", LIBRARY.GTK);
	Linker.link(gtk_requisition_free, "gtk_requisition_free", LIBRARY.GTK);

	// gtk.Revealer

	Linker.link(gtk_revealer_get_type, "gtk_revealer_get_type", LIBRARY.GTK);
	Linker.link(gtk_revealer_new, "gtk_revealer_new", LIBRARY.GTK);
	Linker.link(gtk_revealer_get_child_revealed, "gtk_revealer_get_child_revealed", LIBRARY.GTK);
	Linker.link(gtk_revealer_get_reveal_child, "gtk_revealer_get_reveal_child", LIBRARY.GTK);
	Linker.link(gtk_revealer_get_transition_duration, "gtk_revealer_get_transition_duration", LIBRARY.GTK);
	Linker.link(gtk_revealer_get_transition_type, "gtk_revealer_get_transition_type", LIBRARY.GTK);
	Linker.link(gtk_revealer_set_reveal_child, "gtk_revealer_set_reveal_child", LIBRARY.GTK);
	Linker.link(gtk_revealer_set_transition_duration, "gtk_revealer_set_transition_duration", LIBRARY.GTK);
	Linker.link(gtk_revealer_set_transition_type, "gtk_revealer_set_transition_type", LIBRARY.GTK);

	// gtk.Scale

	Linker.link(gtk_scale_get_type, "gtk_scale_get_type", LIBRARY.GTK);
	Linker.link(gtk_scale_new, "gtk_scale_new", LIBRARY.GTK);
	Linker.link(gtk_scale_new_with_range, "gtk_scale_new_with_range", LIBRARY.GTK);
	Linker.link(gtk_scale_add_mark, "gtk_scale_add_mark", LIBRARY.GTK);
	Linker.link(gtk_scale_clear_marks, "gtk_scale_clear_marks", LIBRARY.GTK);
	Linker.link(gtk_scale_get_digits, "gtk_scale_get_digits", LIBRARY.GTK);
	Linker.link(gtk_scale_get_draw_value, "gtk_scale_get_draw_value", LIBRARY.GTK);
	Linker.link(gtk_scale_get_has_origin, "gtk_scale_get_has_origin", LIBRARY.GTK);
	Linker.link(gtk_scale_get_layout, "gtk_scale_get_layout", LIBRARY.GTK);
	Linker.link(gtk_scale_get_layout_offsets, "gtk_scale_get_layout_offsets", LIBRARY.GTK);
	Linker.link(gtk_scale_get_value_pos, "gtk_scale_get_value_pos", LIBRARY.GTK);
	Linker.link(gtk_scale_set_digits, "gtk_scale_set_digits", LIBRARY.GTK);
	Linker.link(gtk_scale_set_draw_value, "gtk_scale_set_draw_value", LIBRARY.GTK);
	Linker.link(gtk_scale_set_has_origin, "gtk_scale_set_has_origin", LIBRARY.GTK);
	Linker.link(gtk_scale_set_value_pos, "gtk_scale_set_value_pos", LIBRARY.GTK);

	// gtk.ScaleAccessible

	Linker.link(gtk_scale_accessible_get_type, "gtk_scale_accessible_get_type", LIBRARY.GTK);

	// gtk.ScaleButton

	Linker.link(gtk_scale_button_get_type, "gtk_scale_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_scale_button_new, "gtk_scale_button_new", LIBRARY.GTK);
	Linker.link(gtk_scale_button_get_adjustment, "gtk_scale_button_get_adjustment", LIBRARY.GTK);
	Linker.link(gtk_scale_button_get_minus_button, "gtk_scale_button_get_minus_button", LIBRARY.GTK);
	Linker.link(gtk_scale_button_get_plus_button, "gtk_scale_button_get_plus_button", LIBRARY.GTK);
	Linker.link(gtk_scale_button_get_popup, "gtk_scale_button_get_popup", LIBRARY.GTK);
	Linker.link(gtk_scale_button_get_value, "gtk_scale_button_get_value", LIBRARY.GTK);
	Linker.link(gtk_scale_button_set_adjustment, "gtk_scale_button_set_adjustment", LIBRARY.GTK);
	Linker.link(gtk_scale_button_set_icons, "gtk_scale_button_set_icons", LIBRARY.GTK);
	Linker.link(gtk_scale_button_set_value, "gtk_scale_button_set_value", LIBRARY.GTK);

	// gtk.ScaleButtonAccessible

	Linker.link(gtk_scale_button_accessible_get_type, "gtk_scale_button_accessible_get_type", LIBRARY.GTK);

	// gtk.Scrollable

	Linker.link(gtk_scrollable_get_type, "gtk_scrollable_get_type", LIBRARY.GTK);
	Linker.link(gtk_scrollable_get_border, "gtk_scrollable_get_border", LIBRARY.GTK);
	Linker.link(gtk_scrollable_get_hadjustment, "gtk_scrollable_get_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrollable_get_hscroll_policy, "gtk_scrollable_get_hscroll_policy", LIBRARY.GTK);
	Linker.link(gtk_scrollable_get_vadjustment, "gtk_scrollable_get_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrollable_get_vscroll_policy, "gtk_scrollable_get_vscroll_policy", LIBRARY.GTK);
	Linker.link(gtk_scrollable_set_hadjustment, "gtk_scrollable_set_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrollable_set_hscroll_policy, "gtk_scrollable_set_hscroll_policy", LIBRARY.GTK);
	Linker.link(gtk_scrollable_set_vadjustment, "gtk_scrollable_set_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrollable_set_vscroll_policy, "gtk_scrollable_set_vscroll_policy", LIBRARY.GTK);

	// gtk.Scrollbar

	Linker.link(gtk_scrollbar_get_type, "gtk_scrollbar_get_type", LIBRARY.GTK);
	Linker.link(gtk_scrollbar_new, "gtk_scrollbar_new", LIBRARY.GTK);

	// gtk.ScrolledWindow

	Linker.link(gtk_scrolled_window_get_type, "gtk_scrolled_window_get_type", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_new, "gtk_scrolled_window_new", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_add_with_viewport, "gtk_scrolled_window_add_with_viewport", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_capture_button_press, "gtk_scrolled_window_get_capture_button_press", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_hadjustment, "gtk_scrolled_window_get_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_hscrollbar, "gtk_scrolled_window_get_hscrollbar", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_kinetic_scrolling, "gtk_scrolled_window_get_kinetic_scrolling", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_max_content_height, "gtk_scrolled_window_get_max_content_height", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_max_content_width, "gtk_scrolled_window_get_max_content_width", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_min_content_height, "gtk_scrolled_window_get_min_content_height", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_min_content_width, "gtk_scrolled_window_get_min_content_width", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_overlay_scrolling, "gtk_scrolled_window_get_overlay_scrolling", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_placement, "gtk_scrolled_window_get_placement", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_policy, "gtk_scrolled_window_get_policy", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_propagate_natural_height, "gtk_scrolled_window_get_propagate_natural_height", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_propagate_natural_width, "gtk_scrolled_window_get_propagate_natural_width", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_shadow_type, "gtk_scrolled_window_get_shadow_type", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_vadjustment, "gtk_scrolled_window_get_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_get_vscrollbar, "gtk_scrolled_window_get_vscrollbar", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_capture_button_press, "gtk_scrolled_window_set_capture_button_press", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_hadjustment, "gtk_scrolled_window_set_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_kinetic_scrolling, "gtk_scrolled_window_set_kinetic_scrolling", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_max_content_height, "gtk_scrolled_window_set_max_content_height", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_max_content_width, "gtk_scrolled_window_set_max_content_width", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_min_content_height, "gtk_scrolled_window_set_min_content_height", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_min_content_width, "gtk_scrolled_window_set_min_content_width", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_overlay_scrolling, "gtk_scrolled_window_set_overlay_scrolling", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_placement, "gtk_scrolled_window_set_placement", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_policy, "gtk_scrolled_window_set_policy", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_propagate_natural_height, "gtk_scrolled_window_set_propagate_natural_height", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_propagate_natural_width, "gtk_scrolled_window_set_propagate_natural_width", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_shadow_type, "gtk_scrolled_window_set_shadow_type", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_set_vadjustment, "gtk_scrolled_window_set_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_scrolled_window_unset_placement, "gtk_scrolled_window_unset_placement", LIBRARY.GTK);

	// gtk.ScrolledWindowAccessible

	Linker.link(gtk_scrolled_window_accessible_get_type, "gtk_scrolled_window_accessible_get_type", LIBRARY.GTK);

	// gtk.SearchBar

	Linker.link(gtk_search_bar_get_type, "gtk_search_bar_get_type", LIBRARY.GTK);
	Linker.link(gtk_search_bar_new, "gtk_search_bar_new", LIBRARY.GTK);
	Linker.link(gtk_search_bar_connect_entry, "gtk_search_bar_connect_entry", LIBRARY.GTK);
	Linker.link(gtk_search_bar_get_search_mode, "gtk_search_bar_get_search_mode", LIBRARY.GTK);
	Linker.link(gtk_search_bar_get_show_close_button, "gtk_search_bar_get_show_close_button", LIBRARY.GTK);
	Linker.link(gtk_search_bar_handle_event, "gtk_search_bar_handle_event", LIBRARY.GTK);
	Linker.link(gtk_search_bar_set_search_mode, "gtk_search_bar_set_search_mode", LIBRARY.GTK);
	Linker.link(gtk_search_bar_set_show_close_button, "gtk_search_bar_set_show_close_button", LIBRARY.GTK);

	// gtk.SearchEntry

	Linker.link(gtk_search_entry_get_type, "gtk_search_entry_get_type", LIBRARY.GTK);
	Linker.link(gtk_search_entry_new, "gtk_search_entry_new", LIBRARY.GTK);
	Linker.link(gtk_search_entry_handle_event, "gtk_search_entry_handle_event", LIBRARY.GTK);

	// gtk.SelectionData

	Linker.link(gtk_selection_data_get_type, "gtk_selection_data_get_type", LIBRARY.GTK);
	Linker.link(gtk_selection_data_copy, "gtk_selection_data_copy", LIBRARY.GTK);
	Linker.link(gtk_selection_data_free, "gtk_selection_data_free", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_data, "gtk_selection_data_get_data", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_data_type, "gtk_selection_data_get_data_type", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_data_with_length, "gtk_selection_data_get_data_with_length", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_display, "gtk_selection_data_get_display", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_format, "gtk_selection_data_get_format", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_length, "gtk_selection_data_get_length", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_pixbuf, "gtk_selection_data_get_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_selection, "gtk_selection_data_get_selection", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_target, "gtk_selection_data_get_target", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_targets, "gtk_selection_data_get_targets", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_text, "gtk_selection_data_get_text", LIBRARY.GTK);
	Linker.link(gtk_selection_data_get_uris, "gtk_selection_data_get_uris", LIBRARY.GTK);
	Linker.link(gtk_selection_data_set, "gtk_selection_data_set", LIBRARY.GTK);
	Linker.link(gtk_selection_data_set_pixbuf, "gtk_selection_data_set_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_selection_data_set_text, "gtk_selection_data_set_text", LIBRARY.GTK);
	Linker.link(gtk_selection_data_set_uris, "gtk_selection_data_set_uris", LIBRARY.GTK);
	Linker.link(gtk_selection_data_targets_include_image, "gtk_selection_data_targets_include_image", LIBRARY.GTK);
	Linker.link(gtk_selection_data_targets_include_rich_text, "gtk_selection_data_targets_include_rich_text", LIBRARY.GTK);
	Linker.link(gtk_selection_data_targets_include_text, "gtk_selection_data_targets_include_text", LIBRARY.GTK);
	Linker.link(gtk_selection_data_targets_include_uri, "gtk_selection_data_targets_include_uri", LIBRARY.GTK);
	Linker.link(gtk_selection_add_target, "gtk_selection_add_target", LIBRARY.GTK);
	Linker.link(gtk_selection_add_targets, "gtk_selection_add_targets", LIBRARY.GTK);
	Linker.link(gtk_selection_clear_targets, "gtk_selection_clear_targets", LIBRARY.GTK);
	Linker.link(gtk_selection_convert, "gtk_selection_convert", LIBRARY.GTK);
	Linker.link(gtk_selection_owner_set, "gtk_selection_owner_set", LIBRARY.GTK);
	Linker.link(gtk_selection_owner_set_for_display, "gtk_selection_owner_set_for_display", LIBRARY.GTK);
	Linker.link(gtk_selection_remove_all, "gtk_selection_remove_all", LIBRARY.GTK);

	// gtk.Separator

	Linker.link(gtk_separator_get_type, "gtk_separator_get_type", LIBRARY.GTK);
	Linker.link(gtk_separator_new, "gtk_separator_new", LIBRARY.GTK);

	// gtk.SeparatorMenuItem

	Linker.link(gtk_separator_menu_item_get_type, "gtk_separator_menu_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_separator_menu_item_new, "gtk_separator_menu_item_new", LIBRARY.GTK);

	// gtk.SeparatorToolItem

	Linker.link(gtk_separator_tool_item_get_type, "gtk_separator_tool_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_separator_tool_item_new, "gtk_separator_tool_item_new", LIBRARY.GTK);
	Linker.link(gtk_separator_tool_item_get_draw, "gtk_separator_tool_item_get_draw", LIBRARY.GTK);
	Linker.link(gtk_separator_tool_item_set_draw, "gtk_separator_tool_item_set_draw", LIBRARY.GTK);

	// gtk.Settings

	Linker.link(gtk_settings_get_type, "gtk_settings_get_type", LIBRARY.GTK);
	Linker.link(gtk_settings_get_default, "gtk_settings_get_default", LIBRARY.GTK);
	Linker.link(gtk_settings_get_for_screen, "gtk_settings_get_for_screen", LIBRARY.GTK);
	Linker.link(gtk_settings_install_property, "gtk_settings_install_property", LIBRARY.GTK);
	Linker.link(gtk_settings_install_property_parser, "gtk_settings_install_property_parser", LIBRARY.GTK);
	Linker.link(gtk_settings_reset_property, "gtk_settings_reset_property", LIBRARY.GTK);
	Linker.link(gtk_settings_set_double_property, "gtk_settings_set_double_property", LIBRARY.GTK);
	Linker.link(gtk_settings_set_long_property, "gtk_settings_set_long_property", LIBRARY.GTK);
	Linker.link(gtk_settings_set_property_value, "gtk_settings_set_property_value", LIBRARY.GTK);
	Linker.link(gtk_settings_set_string_property, "gtk_settings_set_string_property", LIBRARY.GTK);

	// gtk.ShortcutLabel

	Linker.link(gtk_shortcut_label_get_type, "gtk_shortcut_label_get_type", LIBRARY.GTK);
	Linker.link(gtk_shortcut_label_new, "gtk_shortcut_label_new", LIBRARY.GTK);
	Linker.link(gtk_shortcut_label_get_accelerator, "gtk_shortcut_label_get_accelerator", LIBRARY.GTK);
	Linker.link(gtk_shortcut_label_get_disabled_text, "gtk_shortcut_label_get_disabled_text", LIBRARY.GTK);
	Linker.link(gtk_shortcut_label_set_accelerator, "gtk_shortcut_label_set_accelerator", LIBRARY.GTK);
	Linker.link(gtk_shortcut_label_set_disabled_text, "gtk_shortcut_label_set_disabled_text", LIBRARY.GTK);

	// gtk.ShortcutsGroup

	Linker.link(gtk_shortcuts_group_get_type, "gtk_shortcuts_group_get_type", LIBRARY.GTK);

	// gtk.ShortcutsSection

	Linker.link(gtk_shortcuts_section_get_type, "gtk_shortcuts_section_get_type", LIBRARY.GTK);

	// gtk.ShortcutsShortcut

	Linker.link(gtk_shortcuts_shortcut_get_type, "gtk_shortcuts_shortcut_get_type", LIBRARY.GTK);

	// gtk.ShortcutsWindow

	Linker.link(gtk_shortcuts_window_get_type, "gtk_shortcuts_window_get_type", LIBRARY.GTK);

	// gtk.SizeGroup

	Linker.link(gtk_size_group_get_type, "gtk_size_group_get_type", LIBRARY.GTK);
	Linker.link(gtk_size_group_new, "gtk_size_group_new", LIBRARY.GTK);
	Linker.link(gtk_size_group_add_widget, "gtk_size_group_add_widget", LIBRARY.GTK);
	Linker.link(gtk_size_group_get_ignore_hidden, "gtk_size_group_get_ignore_hidden", LIBRARY.GTK);
	Linker.link(gtk_size_group_get_mode, "gtk_size_group_get_mode", LIBRARY.GTK);
	Linker.link(gtk_size_group_get_widgets, "gtk_size_group_get_widgets", LIBRARY.GTK);
	Linker.link(gtk_size_group_remove_widget, "gtk_size_group_remove_widget", LIBRARY.GTK);
	Linker.link(gtk_size_group_set_ignore_hidden, "gtk_size_group_set_ignore_hidden", LIBRARY.GTK);
	Linker.link(gtk_size_group_set_mode, "gtk_size_group_set_mode", LIBRARY.GTK);

	// gtk.Socket

	Linker.link(gtk_socket_get_type, "gtk_socket_get_type", LIBRARY.GTK);
	Linker.link(gtk_socket_new, "gtk_socket_new", LIBRARY.GTK);
	Linker.link(gtk_socket_add_id, "gtk_socket_add_id", LIBRARY.GTK);
	Linker.link(gtk_socket_get_id, "gtk_socket_get_id", LIBRARY.GTK);
	Linker.link(gtk_socket_get_plug_window, "gtk_socket_get_plug_window", LIBRARY.GTK);

	// gtk.SpinButton

	Linker.link(gtk_spin_button_get_type, "gtk_spin_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_spin_button_new, "gtk_spin_button_new", LIBRARY.GTK);
	Linker.link(gtk_spin_button_new_with_range, "gtk_spin_button_new_with_range", LIBRARY.GTK);
	Linker.link(gtk_spin_button_configure, "gtk_spin_button_configure", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_adjustment, "gtk_spin_button_get_adjustment", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_digits, "gtk_spin_button_get_digits", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_increments, "gtk_spin_button_get_increments", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_numeric, "gtk_spin_button_get_numeric", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_range, "gtk_spin_button_get_range", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_snap_to_ticks, "gtk_spin_button_get_snap_to_ticks", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_update_policy, "gtk_spin_button_get_update_policy", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_value, "gtk_spin_button_get_value", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_value_as_int, "gtk_spin_button_get_value_as_int", LIBRARY.GTK);
	Linker.link(gtk_spin_button_get_wrap, "gtk_spin_button_get_wrap", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_adjustment, "gtk_spin_button_set_adjustment", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_digits, "gtk_spin_button_set_digits", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_increments, "gtk_spin_button_set_increments", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_numeric, "gtk_spin_button_set_numeric", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_range, "gtk_spin_button_set_range", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_snap_to_ticks, "gtk_spin_button_set_snap_to_ticks", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_update_policy, "gtk_spin_button_set_update_policy", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_value, "gtk_spin_button_set_value", LIBRARY.GTK);
	Linker.link(gtk_spin_button_set_wrap, "gtk_spin_button_set_wrap", LIBRARY.GTK);
	Linker.link(gtk_spin_button_spin, "gtk_spin_button_spin", LIBRARY.GTK);
	Linker.link(gtk_spin_button_update, "gtk_spin_button_update", LIBRARY.GTK);

	// gtk.SpinButtonAccessible

	Linker.link(gtk_spin_button_accessible_get_type, "gtk_spin_button_accessible_get_type", LIBRARY.GTK);

	// gtk.Spinner

	Linker.link(gtk_spinner_get_type, "gtk_spinner_get_type", LIBRARY.GTK);
	Linker.link(gtk_spinner_new, "gtk_spinner_new", LIBRARY.GTK);
	Linker.link(gtk_spinner_start, "gtk_spinner_start", LIBRARY.GTK);
	Linker.link(gtk_spinner_stop, "gtk_spinner_stop", LIBRARY.GTK);

	// gtk.SpinnerAccessible

	Linker.link(gtk_spinner_accessible_get_type, "gtk_spinner_accessible_get_type", LIBRARY.GTK);

	// gtk.Stack

	Linker.link(gtk_stack_get_type, "gtk_stack_get_type", LIBRARY.GTK);
	Linker.link(gtk_stack_new, "gtk_stack_new", LIBRARY.GTK);
	Linker.link(gtk_stack_add_named, "gtk_stack_add_named", LIBRARY.GTK);
	Linker.link(gtk_stack_add_titled, "gtk_stack_add_titled", LIBRARY.GTK);
	Linker.link(gtk_stack_get_child_by_name, "gtk_stack_get_child_by_name", LIBRARY.GTK);
	Linker.link(gtk_stack_get_hhomogeneous, "gtk_stack_get_hhomogeneous", LIBRARY.GTK);
	Linker.link(gtk_stack_get_homogeneous, "gtk_stack_get_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_stack_get_interpolate_size, "gtk_stack_get_interpolate_size", LIBRARY.GTK);
	Linker.link(gtk_stack_get_transition_duration, "gtk_stack_get_transition_duration", LIBRARY.GTK);
	Linker.link(gtk_stack_get_transition_running, "gtk_stack_get_transition_running", LIBRARY.GTK);
	Linker.link(gtk_stack_get_transition_type, "gtk_stack_get_transition_type", LIBRARY.GTK);
	Linker.link(gtk_stack_get_vhomogeneous, "gtk_stack_get_vhomogeneous", LIBRARY.GTK);
	Linker.link(gtk_stack_get_visible_child, "gtk_stack_get_visible_child", LIBRARY.GTK);
	Linker.link(gtk_stack_get_visible_child_name, "gtk_stack_get_visible_child_name", LIBRARY.GTK);
	Linker.link(gtk_stack_set_hhomogeneous, "gtk_stack_set_hhomogeneous", LIBRARY.GTK);
	Linker.link(gtk_stack_set_homogeneous, "gtk_stack_set_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_stack_set_interpolate_size, "gtk_stack_set_interpolate_size", LIBRARY.GTK);
	Linker.link(gtk_stack_set_transition_duration, "gtk_stack_set_transition_duration", LIBRARY.GTK);
	Linker.link(gtk_stack_set_transition_type, "gtk_stack_set_transition_type", LIBRARY.GTK);
	Linker.link(gtk_stack_set_vhomogeneous, "gtk_stack_set_vhomogeneous", LIBRARY.GTK);
	Linker.link(gtk_stack_set_visible_child, "gtk_stack_set_visible_child", LIBRARY.GTK);
	Linker.link(gtk_stack_set_visible_child_full, "gtk_stack_set_visible_child_full", LIBRARY.GTK);
	Linker.link(gtk_stack_set_visible_child_name, "gtk_stack_set_visible_child_name", LIBRARY.GTK);

	// gtk.StackAccessible

	Linker.link(gtk_stack_accessible_get_type, "gtk_stack_accessible_get_type", LIBRARY.GTK);

	// gtk.StackSidebar

	Linker.link(gtk_stack_sidebar_get_type, "gtk_stack_sidebar_get_type", LIBRARY.GTK);
	Linker.link(gtk_stack_sidebar_new, "gtk_stack_sidebar_new", LIBRARY.GTK);
	Linker.link(gtk_stack_sidebar_get_stack, "gtk_stack_sidebar_get_stack", LIBRARY.GTK);
	Linker.link(gtk_stack_sidebar_set_stack, "gtk_stack_sidebar_set_stack", LIBRARY.GTK);

	// gtk.StackSwitcher

	Linker.link(gtk_stack_switcher_get_type, "gtk_stack_switcher_get_type", LIBRARY.GTK);
	Linker.link(gtk_stack_switcher_new, "gtk_stack_switcher_new", LIBRARY.GTK);
	Linker.link(gtk_stack_switcher_get_stack, "gtk_stack_switcher_get_stack", LIBRARY.GTK);
	Linker.link(gtk_stack_switcher_set_stack, "gtk_stack_switcher_set_stack", LIBRARY.GTK);

	// gtk.StatusIcon

	Linker.link(gtk_status_icon_get_type, "gtk_status_icon_get_type", LIBRARY.GTK);
	Linker.link(gtk_status_icon_new, "gtk_status_icon_new", LIBRARY.GTK);
	Linker.link(gtk_status_icon_new_from_file, "gtk_status_icon_new_from_file", LIBRARY.GTK);
	Linker.link(gtk_status_icon_new_from_gicon, "gtk_status_icon_new_from_gicon", LIBRARY.GTK);
	Linker.link(gtk_status_icon_new_from_icon_name, "gtk_status_icon_new_from_icon_name", LIBRARY.GTK);
	Linker.link(gtk_status_icon_new_from_pixbuf, "gtk_status_icon_new_from_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_status_icon_new_from_stock, "gtk_status_icon_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_status_icon_position_menu, "gtk_status_icon_position_menu", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_geometry, "gtk_status_icon_get_geometry", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_gicon, "gtk_status_icon_get_gicon", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_has_tooltip, "gtk_status_icon_get_has_tooltip", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_icon_name, "gtk_status_icon_get_icon_name", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_pixbuf, "gtk_status_icon_get_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_screen, "gtk_status_icon_get_screen", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_size, "gtk_status_icon_get_size", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_stock, "gtk_status_icon_get_stock", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_storage_type, "gtk_status_icon_get_storage_type", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_title, "gtk_status_icon_get_title", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_tooltip_markup, "gtk_status_icon_get_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_tooltip_text, "gtk_status_icon_get_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_visible, "gtk_status_icon_get_visible", LIBRARY.GTK);
	Linker.link(gtk_status_icon_get_x11_window_id, "gtk_status_icon_get_x11_window_id", LIBRARY.GTK);
	Linker.link(gtk_status_icon_is_embedded, "gtk_status_icon_is_embedded", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_from_file, "gtk_status_icon_set_from_file", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_from_gicon, "gtk_status_icon_set_from_gicon", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_from_icon_name, "gtk_status_icon_set_from_icon_name", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_from_pixbuf, "gtk_status_icon_set_from_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_from_stock, "gtk_status_icon_set_from_stock", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_has_tooltip, "gtk_status_icon_set_has_tooltip", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_name, "gtk_status_icon_set_name", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_screen, "gtk_status_icon_set_screen", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_title, "gtk_status_icon_set_title", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_tooltip_markup, "gtk_status_icon_set_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_tooltip_text, "gtk_status_icon_set_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_status_icon_set_visible, "gtk_status_icon_set_visible", LIBRARY.GTK);

	// gtk.Statusbar

	Linker.link(gtk_statusbar_get_type, "gtk_statusbar_get_type", LIBRARY.GTK);
	Linker.link(gtk_statusbar_new, "gtk_statusbar_new", LIBRARY.GTK);
	Linker.link(gtk_statusbar_get_context_id, "gtk_statusbar_get_context_id", LIBRARY.GTK);
	Linker.link(gtk_statusbar_get_message_area, "gtk_statusbar_get_message_area", LIBRARY.GTK);
	Linker.link(gtk_statusbar_pop, "gtk_statusbar_pop", LIBRARY.GTK);
	Linker.link(gtk_statusbar_push, "gtk_statusbar_push", LIBRARY.GTK);
	Linker.link(gtk_statusbar_remove, "gtk_statusbar_remove", LIBRARY.GTK);
	Linker.link(gtk_statusbar_remove_all, "gtk_statusbar_remove_all", LIBRARY.GTK);

	// gtk.StatusbarAccessible

	Linker.link(gtk_statusbar_accessible_get_type, "gtk_statusbar_accessible_get_type", LIBRARY.GTK);

	// gtk.StockItem

	Linker.link(gtk_stock_item_copy, "gtk_stock_item_copy", LIBRARY.GTK);
	Linker.link(gtk_stock_item_free, "gtk_stock_item_free", LIBRARY.GTK);
	Linker.link(gtk_stock_add, "gtk_stock_add", LIBRARY.GTK);
	Linker.link(gtk_stock_add_static, "gtk_stock_add_static", LIBRARY.GTK);
	Linker.link(gtk_stock_list_ids, "gtk_stock_list_ids", LIBRARY.GTK);
	Linker.link(gtk_stock_lookup, "gtk_stock_lookup", LIBRARY.GTK);
	Linker.link(gtk_stock_set_translate_func, "gtk_stock_set_translate_func", LIBRARY.GTK);

	// gtk.Style

	Linker.link(gtk_style_get_type, "gtk_style_get_type", LIBRARY.GTK);
	Linker.link(gtk_style_new, "gtk_style_new", LIBRARY.GTK);
	Linker.link(gtk_style_apply_default_background, "gtk_style_apply_default_background", LIBRARY.GTK);
	Linker.link(gtk_style_attach, "gtk_style_attach", LIBRARY.GTK);
	Linker.link(gtk_style_copy, "gtk_style_copy", LIBRARY.GTK);
	Linker.link(gtk_style_detach, "gtk_style_detach", LIBRARY.GTK);
	Linker.link(gtk_style_get, "gtk_style_get", LIBRARY.GTK);
	Linker.link(gtk_style_get_style_property, "gtk_style_get_style_property", LIBRARY.GTK);
	Linker.link(gtk_style_get_valist, "gtk_style_get_valist", LIBRARY.GTK);
	Linker.link(gtk_style_has_context, "gtk_style_has_context", LIBRARY.GTK);
	Linker.link(gtk_style_lookup_color, "gtk_style_lookup_color", LIBRARY.GTK);
	Linker.link(gtk_style_lookup_icon_set, "gtk_style_lookup_icon_set", LIBRARY.GTK);
	Linker.link(gtk_style_render_icon, "gtk_style_render_icon", LIBRARY.GTK);
	Linker.link(gtk_style_set_background, "gtk_style_set_background", LIBRARY.GTK);
	Linker.link(gtk_paint_arrow, "gtk_paint_arrow", LIBRARY.GTK);
	Linker.link(gtk_paint_box, "gtk_paint_box", LIBRARY.GTK);
	Linker.link(gtk_paint_box_gap, "gtk_paint_box_gap", LIBRARY.GTK);
	Linker.link(gtk_paint_check, "gtk_paint_check", LIBRARY.GTK);
	Linker.link(gtk_paint_diamond, "gtk_paint_diamond", LIBRARY.GTK);
	Linker.link(gtk_paint_expander, "gtk_paint_expander", LIBRARY.GTK);
	Linker.link(gtk_paint_extension, "gtk_paint_extension", LIBRARY.GTK);
	Linker.link(gtk_paint_flat_box, "gtk_paint_flat_box", LIBRARY.GTK);
	Linker.link(gtk_paint_focus, "gtk_paint_focus", LIBRARY.GTK);
	Linker.link(gtk_paint_handle, "gtk_paint_handle", LIBRARY.GTK);
	Linker.link(gtk_paint_hline, "gtk_paint_hline", LIBRARY.GTK);
	Linker.link(gtk_paint_layout, "gtk_paint_layout", LIBRARY.GTK);
	Linker.link(gtk_paint_option, "gtk_paint_option", LIBRARY.GTK);
	Linker.link(gtk_paint_resize_grip, "gtk_paint_resize_grip", LIBRARY.GTK);
	Linker.link(gtk_paint_shadow, "gtk_paint_shadow", LIBRARY.GTK);
	Linker.link(gtk_paint_shadow_gap, "gtk_paint_shadow_gap", LIBRARY.GTK);
	Linker.link(gtk_paint_slider, "gtk_paint_slider", LIBRARY.GTK);
	Linker.link(gtk_paint_spinner, "gtk_paint_spinner", LIBRARY.GTK);
	Linker.link(gtk_paint_tab, "gtk_paint_tab", LIBRARY.GTK);
	Linker.link(gtk_paint_vline, "gtk_paint_vline", LIBRARY.GTK);

	// gtk.StyleContext

	Linker.link(gtk_style_context_get_type, "gtk_style_context_get_type", LIBRARY.GTK);
	Linker.link(gtk_style_context_new, "gtk_style_context_new", LIBRARY.GTK);
	Linker.link(gtk_style_context_add_provider_for_screen, "gtk_style_context_add_provider_for_screen", LIBRARY.GTK);
	Linker.link(gtk_style_context_remove_provider_for_screen, "gtk_style_context_remove_provider_for_screen", LIBRARY.GTK);
	Linker.link(gtk_style_context_reset_widgets, "gtk_style_context_reset_widgets", LIBRARY.GTK);
	Linker.link(gtk_style_context_add_class, "gtk_style_context_add_class", LIBRARY.GTK);
	Linker.link(gtk_style_context_add_provider, "gtk_style_context_add_provider", LIBRARY.GTK);
	Linker.link(gtk_style_context_add_region, "gtk_style_context_add_region", LIBRARY.GTK);
	Linker.link(gtk_style_context_cancel_animations, "gtk_style_context_cancel_animations", LIBRARY.GTK);
	Linker.link(gtk_style_context_get, "gtk_style_context_get", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_background_color, "gtk_style_context_get_background_color", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_border, "gtk_style_context_get_border", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_border_color, "gtk_style_context_get_border_color", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_color, "gtk_style_context_get_color", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_direction, "gtk_style_context_get_direction", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_font, "gtk_style_context_get_font", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_frame_clock, "gtk_style_context_get_frame_clock", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_junction_sides, "gtk_style_context_get_junction_sides", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_margin, "gtk_style_context_get_margin", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_padding, "gtk_style_context_get_padding", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_parent, "gtk_style_context_get_parent", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_path, "gtk_style_context_get_path", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_property, "gtk_style_context_get_property", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_scale, "gtk_style_context_get_scale", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_screen, "gtk_style_context_get_screen", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_section, "gtk_style_context_get_section", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_state, "gtk_style_context_get_state", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_style, "gtk_style_context_get_style", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_style_property, "gtk_style_context_get_style_property", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_style_valist, "gtk_style_context_get_style_valist", LIBRARY.GTK);
	Linker.link(gtk_style_context_get_valist, "gtk_style_context_get_valist", LIBRARY.GTK);
	Linker.link(gtk_style_context_has_class, "gtk_style_context_has_class", LIBRARY.GTK);
	Linker.link(gtk_style_context_has_region, "gtk_style_context_has_region", LIBRARY.GTK);
	Linker.link(gtk_style_context_invalidate, "gtk_style_context_invalidate", LIBRARY.GTK);
	Linker.link(gtk_style_context_list_classes, "gtk_style_context_list_classes", LIBRARY.GTK);
	Linker.link(gtk_style_context_list_regions, "gtk_style_context_list_regions", LIBRARY.GTK);
	Linker.link(gtk_style_context_lookup_color, "gtk_style_context_lookup_color", LIBRARY.GTK);
	Linker.link(gtk_style_context_lookup_icon_set, "gtk_style_context_lookup_icon_set", LIBRARY.GTK);
	Linker.link(gtk_style_context_notify_state_change, "gtk_style_context_notify_state_change", LIBRARY.GTK);
	Linker.link(gtk_style_context_pop_animatable_region, "gtk_style_context_pop_animatable_region", LIBRARY.GTK);
	Linker.link(gtk_style_context_push_animatable_region, "gtk_style_context_push_animatable_region", LIBRARY.GTK);
	Linker.link(gtk_style_context_remove_class, "gtk_style_context_remove_class", LIBRARY.GTK);
	Linker.link(gtk_style_context_remove_provider, "gtk_style_context_remove_provider", LIBRARY.GTK);
	Linker.link(gtk_style_context_remove_region, "gtk_style_context_remove_region", LIBRARY.GTK);
	Linker.link(gtk_style_context_restore, "gtk_style_context_restore", LIBRARY.GTK);
	Linker.link(gtk_style_context_save, "gtk_style_context_save", LIBRARY.GTK);
	Linker.link(gtk_style_context_scroll_animations, "gtk_style_context_scroll_animations", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_background, "gtk_style_context_set_background", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_direction, "gtk_style_context_set_direction", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_frame_clock, "gtk_style_context_set_frame_clock", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_junction_sides, "gtk_style_context_set_junction_sides", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_parent, "gtk_style_context_set_parent", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_path, "gtk_style_context_set_path", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_scale, "gtk_style_context_set_scale", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_screen, "gtk_style_context_set_screen", LIBRARY.GTK);
	Linker.link(gtk_style_context_set_state, "gtk_style_context_set_state", LIBRARY.GTK);
	Linker.link(gtk_style_context_state_is_running, "gtk_style_context_state_is_running", LIBRARY.GTK);
	Linker.link(gtk_style_context_to_string, "gtk_style_context_to_string", LIBRARY.GTK);
	Linker.link(gtk_render_activity, "gtk_render_activity", LIBRARY.GTK);
	Linker.link(gtk_render_arrow, "gtk_render_arrow", LIBRARY.GTK);
	Linker.link(gtk_render_background, "gtk_render_background", LIBRARY.GTK);
	Linker.link(gtk_render_background_get_clip, "gtk_render_background_get_clip", LIBRARY.GTK);
	Linker.link(gtk_render_check, "gtk_render_check", LIBRARY.GTK);
	Linker.link(gtk_render_expander, "gtk_render_expander", LIBRARY.GTK);
	Linker.link(gtk_render_extension, "gtk_render_extension", LIBRARY.GTK);
	Linker.link(gtk_render_focus, "gtk_render_focus", LIBRARY.GTK);
	Linker.link(gtk_render_frame, "gtk_render_frame", LIBRARY.GTK);
	Linker.link(gtk_render_frame_gap, "gtk_render_frame_gap", LIBRARY.GTK);
	Linker.link(gtk_render_handle, "gtk_render_handle", LIBRARY.GTK);
	Linker.link(gtk_render_icon, "gtk_render_icon", LIBRARY.GTK);
	Linker.link(gtk_render_icon_pixbuf, "gtk_render_icon_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_render_icon_surface, "gtk_render_icon_surface", LIBRARY.GTK);
	Linker.link(gtk_render_insertion_cursor, "gtk_render_insertion_cursor", LIBRARY.GTK);
	Linker.link(gtk_render_layout, "gtk_render_layout", LIBRARY.GTK);
	Linker.link(gtk_render_line, "gtk_render_line", LIBRARY.GTK);
	Linker.link(gtk_render_option, "gtk_render_option", LIBRARY.GTK);
	Linker.link(gtk_render_slider, "gtk_render_slider", LIBRARY.GTK);

	// gtk.StyleProperties

	Linker.link(gtk_style_properties_get_type, "gtk_style_properties_get_type", LIBRARY.GTK);
	Linker.link(gtk_style_properties_new, "gtk_style_properties_new", LIBRARY.GTK);
	Linker.link(gtk_style_properties_lookup_property, "gtk_style_properties_lookup_property", LIBRARY.GTK);
	Linker.link(gtk_style_properties_register_property, "gtk_style_properties_register_property", LIBRARY.GTK);
	Linker.link(gtk_style_properties_clear, "gtk_style_properties_clear", LIBRARY.GTK);
	Linker.link(gtk_style_properties_get, "gtk_style_properties_get", LIBRARY.GTK);
	Linker.link(gtk_style_properties_get_property, "gtk_style_properties_get_property", LIBRARY.GTK);
	Linker.link(gtk_style_properties_get_valist, "gtk_style_properties_get_valist", LIBRARY.GTK);
	Linker.link(gtk_style_properties_lookup_color, "gtk_style_properties_lookup_color", LIBRARY.GTK);
	Linker.link(gtk_style_properties_map_color, "gtk_style_properties_map_color", LIBRARY.GTK);
	Linker.link(gtk_style_properties_merge, "gtk_style_properties_merge", LIBRARY.GTK);
	Linker.link(gtk_style_properties_set, "gtk_style_properties_set", LIBRARY.GTK);
	Linker.link(gtk_style_properties_set_property, "gtk_style_properties_set_property", LIBRARY.GTK);
	Linker.link(gtk_style_properties_set_valist, "gtk_style_properties_set_valist", LIBRARY.GTK);
	Linker.link(gtk_style_properties_unset_property, "gtk_style_properties_unset_property", LIBRARY.GTK);

	// gtk.StyleProvider

	Linker.link(gtk_style_provider_get_type, "gtk_style_provider_get_type", LIBRARY.GTK);
	Linker.link(gtk_style_provider_get_icon_factory, "gtk_style_provider_get_icon_factory", LIBRARY.GTK);
	Linker.link(gtk_style_provider_get_style, "gtk_style_provider_get_style", LIBRARY.GTK);
	Linker.link(gtk_style_provider_get_style_property, "gtk_style_provider_get_style_property", LIBRARY.GTK);

	// gtk.Switch

	Linker.link(gtk_switch_get_type, "gtk_switch_get_type", LIBRARY.GTK);
	Linker.link(gtk_switch_new, "gtk_switch_new", LIBRARY.GTK);
	Linker.link(gtk_switch_get_active, "gtk_switch_get_active", LIBRARY.GTK);
	Linker.link(gtk_switch_get_state, "gtk_switch_get_state", LIBRARY.GTK);
	Linker.link(gtk_switch_set_active, "gtk_switch_set_active", LIBRARY.GTK);
	Linker.link(gtk_switch_set_state, "gtk_switch_set_state", LIBRARY.GTK);

	// gtk.SwitchAccessible

	Linker.link(gtk_switch_accessible_get_type, "gtk_switch_accessible_get_type", LIBRARY.GTK);

	// gtk.SymbolicColor

	Linker.link(gtk_symbolic_color_get_type, "gtk_symbolic_color_get_type", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_new_alpha, "gtk_symbolic_color_new_alpha", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_new_literal, "gtk_symbolic_color_new_literal", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_new_mix, "gtk_symbolic_color_new_mix", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_new_name, "gtk_symbolic_color_new_name", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_new_shade, "gtk_symbolic_color_new_shade", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_new_win32, "gtk_symbolic_color_new_win32", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_ref, "gtk_symbolic_color_ref", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_resolve, "gtk_symbolic_color_resolve", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_to_string, "gtk_symbolic_color_to_string", LIBRARY.GTK);
	Linker.link(gtk_symbolic_color_unref, "gtk_symbolic_color_unref", LIBRARY.GTK);

	// gtk.Table

	Linker.link(gtk_table_get_type, "gtk_table_get_type", LIBRARY.GTK);
	Linker.link(gtk_table_new, "gtk_table_new", LIBRARY.GTK);
	Linker.link(gtk_table_attach, "gtk_table_attach", LIBRARY.GTK);
	Linker.link(gtk_table_attach_defaults, "gtk_table_attach_defaults", LIBRARY.GTK);
	Linker.link(gtk_table_get_col_spacing, "gtk_table_get_col_spacing", LIBRARY.GTK);
	Linker.link(gtk_table_get_default_col_spacing, "gtk_table_get_default_col_spacing", LIBRARY.GTK);
	Linker.link(gtk_table_get_default_row_spacing, "gtk_table_get_default_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_table_get_homogeneous, "gtk_table_get_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_table_get_row_spacing, "gtk_table_get_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_table_get_size, "gtk_table_get_size", LIBRARY.GTK);
	Linker.link(gtk_table_resize, "gtk_table_resize", LIBRARY.GTK);
	Linker.link(gtk_table_set_col_spacing, "gtk_table_set_col_spacing", LIBRARY.GTK);
	Linker.link(gtk_table_set_col_spacings, "gtk_table_set_col_spacings", LIBRARY.GTK);
	Linker.link(gtk_table_set_homogeneous, "gtk_table_set_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_table_set_row_spacing, "gtk_table_set_row_spacing", LIBRARY.GTK);
	Linker.link(gtk_table_set_row_spacings, "gtk_table_set_row_spacings", LIBRARY.GTK);

	// gtk.TargetEntry

	Linker.link(gtk_target_entry_get_type, "gtk_target_entry_get_type", LIBRARY.GTK);
	Linker.link(gtk_target_entry_new, "gtk_target_entry_new", LIBRARY.GTK);
	Linker.link(gtk_target_entry_copy, "gtk_target_entry_copy", LIBRARY.GTK);
	Linker.link(gtk_target_entry_free, "gtk_target_entry_free", LIBRARY.GTK);

	// gtk.TargetList

	Linker.link(gtk_target_list_get_type, "gtk_target_list_get_type", LIBRARY.GTK);
	Linker.link(gtk_target_list_new, "gtk_target_list_new", LIBRARY.GTK);
	Linker.link(gtk_target_list_add, "gtk_target_list_add", LIBRARY.GTK);
	Linker.link(gtk_target_list_add_image_targets, "gtk_target_list_add_image_targets", LIBRARY.GTK);
	Linker.link(gtk_target_list_add_rich_text_targets, "gtk_target_list_add_rich_text_targets", LIBRARY.GTK);
	Linker.link(gtk_target_list_add_table, "gtk_target_list_add_table", LIBRARY.GTK);
	Linker.link(gtk_target_list_add_text_targets, "gtk_target_list_add_text_targets", LIBRARY.GTK);
	Linker.link(gtk_target_list_add_uri_targets, "gtk_target_list_add_uri_targets", LIBRARY.GTK);
	Linker.link(gtk_target_list_find, "gtk_target_list_find", LIBRARY.GTK);
	Linker.link(gtk_target_list_ref, "gtk_target_list_ref", LIBRARY.GTK);
	Linker.link(gtk_target_list_remove, "gtk_target_list_remove", LIBRARY.GTK);
	Linker.link(gtk_target_list_unref, "gtk_target_list_unref", LIBRARY.GTK);
	Linker.link(gtk_target_table_free, "gtk_target_table_free", LIBRARY.GTK);
	Linker.link(gtk_target_table_new_from_list, "gtk_target_table_new_from_list", LIBRARY.GTK);
	Linker.link(gtk_targets_include_image, "gtk_targets_include_image", LIBRARY.GTK);
	Linker.link(gtk_targets_include_rich_text, "gtk_targets_include_rich_text", LIBRARY.GTK);
	Linker.link(gtk_targets_include_text, "gtk_targets_include_text", LIBRARY.GTK);
	Linker.link(gtk_targets_include_uri, "gtk_targets_include_uri", LIBRARY.GTK);

	// gtk.TearoffMenuItem

	Linker.link(gtk_tearoff_menu_item_get_type, "gtk_tearoff_menu_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_tearoff_menu_item_new, "gtk_tearoff_menu_item_new", LIBRARY.GTK);

	// gtk.TextAttributes

	Linker.link(gtk_text_attributes_get_type, "gtk_text_attributes_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_attributes_new, "gtk_text_attributes_new", LIBRARY.GTK);
	Linker.link(gtk_text_attributes_copy, "gtk_text_attributes_copy", LIBRARY.GTK);
	Linker.link(gtk_text_attributes_copy_values, "gtk_text_attributes_copy_values", LIBRARY.GTK);
	Linker.link(gtk_text_attributes_ref, "gtk_text_attributes_ref", LIBRARY.GTK);
	Linker.link(gtk_text_attributes_unref, "gtk_text_attributes_unref", LIBRARY.GTK);

	// gtk.TextBuffer

	Linker.link(gtk_text_buffer_get_type, "gtk_text_buffer_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_new, "gtk_text_buffer_new", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_add_mark, "gtk_text_buffer_add_mark", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_add_selection_clipboard, "gtk_text_buffer_add_selection_clipboard", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_apply_tag, "gtk_text_buffer_apply_tag", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_apply_tag_by_name, "gtk_text_buffer_apply_tag_by_name", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_backspace, "gtk_text_buffer_backspace", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_begin_user_action, "gtk_text_buffer_begin_user_action", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_copy_clipboard, "gtk_text_buffer_copy_clipboard", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_create_child_anchor, "gtk_text_buffer_create_child_anchor", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_create_mark, "gtk_text_buffer_create_mark", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_create_tag, "gtk_text_buffer_create_tag", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_cut_clipboard, "gtk_text_buffer_cut_clipboard", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_delete, "gtk_text_buffer_delete", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_delete_interactive, "gtk_text_buffer_delete_interactive", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_delete_mark, "gtk_text_buffer_delete_mark", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_delete_mark_by_name, "gtk_text_buffer_delete_mark_by_name", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_delete_selection, "gtk_text_buffer_delete_selection", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_deserialize, "gtk_text_buffer_deserialize", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_deserialize_get_can_create_tags, "gtk_text_buffer_deserialize_get_can_create_tags", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_deserialize_set_can_create_tags, "gtk_text_buffer_deserialize_set_can_create_tags", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_end_user_action, "gtk_text_buffer_end_user_action", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_bounds, "gtk_text_buffer_get_bounds", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_char_count, "gtk_text_buffer_get_char_count", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_copy_target_list, "gtk_text_buffer_get_copy_target_list", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_deserialize_formats, "gtk_text_buffer_get_deserialize_formats", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_end_iter, "gtk_text_buffer_get_end_iter", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_has_selection, "gtk_text_buffer_get_has_selection", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_insert, "gtk_text_buffer_get_insert", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_iter_at_child_anchor, "gtk_text_buffer_get_iter_at_child_anchor", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_iter_at_line, "gtk_text_buffer_get_iter_at_line", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_iter_at_line_index, "gtk_text_buffer_get_iter_at_line_index", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_iter_at_line_offset, "gtk_text_buffer_get_iter_at_line_offset", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_iter_at_mark, "gtk_text_buffer_get_iter_at_mark", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_iter_at_offset, "gtk_text_buffer_get_iter_at_offset", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_line_count, "gtk_text_buffer_get_line_count", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_mark, "gtk_text_buffer_get_mark", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_modified, "gtk_text_buffer_get_modified", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_paste_target_list, "gtk_text_buffer_get_paste_target_list", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_selection_bound, "gtk_text_buffer_get_selection_bound", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_selection_bounds, "gtk_text_buffer_get_selection_bounds", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_serialize_formats, "gtk_text_buffer_get_serialize_formats", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_slice, "gtk_text_buffer_get_slice", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_start_iter, "gtk_text_buffer_get_start_iter", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_tag_table, "gtk_text_buffer_get_tag_table", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_get_text, "gtk_text_buffer_get_text", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert, "gtk_text_buffer_insert", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_at_cursor, "gtk_text_buffer_insert_at_cursor", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_child_anchor, "gtk_text_buffer_insert_child_anchor", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_interactive, "gtk_text_buffer_insert_interactive", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_interactive_at_cursor, "gtk_text_buffer_insert_interactive_at_cursor", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_markup, "gtk_text_buffer_insert_markup", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_pixbuf, "gtk_text_buffer_insert_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_range, "gtk_text_buffer_insert_range", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_range_interactive, "gtk_text_buffer_insert_range_interactive", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_with_tags, "gtk_text_buffer_insert_with_tags", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_insert_with_tags_by_name, "gtk_text_buffer_insert_with_tags_by_name", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_move_mark, "gtk_text_buffer_move_mark", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_move_mark_by_name, "gtk_text_buffer_move_mark_by_name", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_paste_clipboard, "gtk_text_buffer_paste_clipboard", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_place_cursor, "gtk_text_buffer_place_cursor", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_register_deserialize_format, "gtk_text_buffer_register_deserialize_format", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_register_deserialize_tagset, "gtk_text_buffer_register_deserialize_tagset", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_register_serialize_format, "gtk_text_buffer_register_serialize_format", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_register_serialize_tagset, "gtk_text_buffer_register_serialize_tagset", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_remove_all_tags, "gtk_text_buffer_remove_all_tags", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_remove_selection_clipboard, "gtk_text_buffer_remove_selection_clipboard", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_remove_tag, "gtk_text_buffer_remove_tag", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_remove_tag_by_name, "gtk_text_buffer_remove_tag_by_name", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_select_range, "gtk_text_buffer_select_range", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_serialize, "gtk_text_buffer_serialize", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_set_modified, "gtk_text_buffer_set_modified", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_set_text, "gtk_text_buffer_set_text", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_unregister_deserialize_format, "gtk_text_buffer_unregister_deserialize_format", LIBRARY.GTK);
	Linker.link(gtk_text_buffer_unregister_serialize_format, "gtk_text_buffer_unregister_serialize_format", LIBRARY.GTK);

	// gtk.TextCellAccessible

	Linker.link(gtk_text_cell_accessible_get_type, "gtk_text_cell_accessible_get_type", LIBRARY.GTK);

	// gtk.TextChildAnchor

	Linker.link(gtk_text_child_anchor_get_type, "gtk_text_child_anchor_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_child_anchor_new, "gtk_text_child_anchor_new", LIBRARY.GTK);
	Linker.link(gtk_text_child_anchor_get_deleted, "gtk_text_child_anchor_get_deleted", LIBRARY.GTK);
	Linker.link(gtk_text_child_anchor_get_widgets, "gtk_text_child_anchor_get_widgets", LIBRARY.GTK);

	// gtk.TextIter

	Linker.link(gtk_text_iter_get_type, "gtk_text_iter_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_iter_assign, "gtk_text_iter_assign", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_char, "gtk_text_iter_backward_char", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_chars, "gtk_text_iter_backward_chars", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_cursor_position, "gtk_text_iter_backward_cursor_position", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_cursor_positions, "gtk_text_iter_backward_cursor_positions", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_find_char, "gtk_text_iter_backward_find_char", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_line, "gtk_text_iter_backward_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_lines, "gtk_text_iter_backward_lines", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_search, "gtk_text_iter_backward_search", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_sentence_start, "gtk_text_iter_backward_sentence_start", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_sentence_starts, "gtk_text_iter_backward_sentence_starts", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_to_tag_toggle, "gtk_text_iter_backward_to_tag_toggle", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_visible_cursor_position, "gtk_text_iter_backward_visible_cursor_position", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_visible_cursor_positions, "gtk_text_iter_backward_visible_cursor_positions", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_visible_line, "gtk_text_iter_backward_visible_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_visible_lines, "gtk_text_iter_backward_visible_lines", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_visible_word_start, "gtk_text_iter_backward_visible_word_start", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_visible_word_starts, "gtk_text_iter_backward_visible_word_starts", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_word_start, "gtk_text_iter_backward_word_start", LIBRARY.GTK);
	Linker.link(gtk_text_iter_backward_word_starts, "gtk_text_iter_backward_word_starts", LIBRARY.GTK);
	Linker.link(gtk_text_iter_begins_tag, "gtk_text_iter_begins_tag", LIBRARY.GTK);
	Linker.link(gtk_text_iter_can_insert, "gtk_text_iter_can_insert", LIBRARY.GTK);
	Linker.link(gtk_text_iter_compare, "gtk_text_iter_compare", LIBRARY.GTK);
	Linker.link(gtk_text_iter_copy, "gtk_text_iter_copy", LIBRARY.GTK);
	Linker.link(gtk_text_iter_editable, "gtk_text_iter_editable", LIBRARY.GTK);
	Linker.link(gtk_text_iter_ends_line, "gtk_text_iter_ends_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_ends_sentence, "gtk_text_iter_ends_sentence", LIBRARY.GTK);
	Linker.link(gtk_text_iter_ends_tag, "gtk_text_iter_ends_tag", LIBRARY.GTK);
	Linker.link(gtk_text_iter_ends_word, "gtk_text_iter_ends_word", LIBRARY.GTK);
	Linker.link(gtk_text_iter_equal, "gtk_text_iter_equal", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_char, "gtk_text_iter_forward_char", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_chars, "gtk_text_iter_forward_chars", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_cursor_position, "gtk_text_iter_forward_cursor_position", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_cursor_positions, "gtk_text_iter_forward_cursor_positions", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_find_char, "gtk_text_iter_forward_find_char", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_line, "gtk_text_iter_forward_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_lines, "gtk_text_iter_forward_lines", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_search, "gtk_text_iter_forward_search", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_sentence_end, "gtk_text_iter_forward_sentence_end", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_sentence_ends, "gtk_text_iter_forward_sentence_ends", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_to_end, "gtk_text_iter_forward_to_end", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_to_line_end, "gtk_text_iter_forward_to_line_end", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_to_tag_toggle, "gtk_text_iter_forward_to_tag_toggle", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_visible_cursor_position, "gtk_text_iter_forward_visible_cursor_position", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_visible_cursor_positions, "gtk_text_iter_forward_visible_cursor_positions", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_visible_line, "gtk_text_iter_forward_visible_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_visible_lines, "gtk_text_iter_forward_visible_lines", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_visible_word_end, "gtk_text_iter_forward_visible_word_end", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_visible_word_ends, "gtk_text_iter_forward_visible_word_ends", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_word_end, "gtk_text_iter_forward_word_end", LIBRARY.GTK);
	Linker.link(gtk_text_iter_forward_word_ends, "gtk_text_iter_forward_word_ends", LIBRARY.GTK);
	Linker.link(gtk_text_iter_free, "gtk_text_iter_free", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_attributes, "gtk_text_iter_get_attributes", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_buffer, "gtk_text_iter_get_buffer", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_bytes_in_line, "gtk_text_iter_get_bytes_in_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_char, "gtk_text_iter_get_char", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_chars_in_line, "gtk_text_iter_get_chars_in_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_child_anchor, "gtk_text_iter_get_child_anchor", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_language, "gtk_text_iter_get_language", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_line, "gtk_text_iter_get_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_line_index, "gtk_text_iter_get_line_index", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_line_offset, "gtk_text_iter_get_line_offset", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_marks, "gtk_text_iter_get_marks", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_offset, "gtk_text_iter_get_offset", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_pixbuf, "gtk_text_iter_get_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_slice, "gtk_text_iter_get_slice", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_tags, "gtk_text_iter_get_tags", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_text, "gtk_text_iter_get_text", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_toggled_tags, "gtk_text_iter_get_toggled_tags", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_visible_line_index, "gtk_text_iter_get_visible_line_index", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_visible_line_offset, "gtk_text_iter_get_visible_line_offset", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_visible_slice, "gtk_text_iter_get_visible_slice", LIBRARY.GTK);
	Linker.link(gtk_text_iter_get_visible_text, "gtk_text_iter_get_visible_text", LIBRARY.GTK);
	Linker.link(gtk_text_iter_has_tag, "gtk_text_iter_has_tag", LIBRARY.GTK);
	Linker.link(gtk_text_iter_in_range, "gtk_text_iter_in_range", LIBRARY.GTK);
	Linker.link(gtk_text_iter_inside_sentence, "gtk_text_iter_inside_sentence", LIBRARY.GTK);
	Linker.link(gtk_text_iter_inside_word, "gtk_text_iter_inside_word", LIBRARY.GTK);
	Linker.link(gtk_text_iter_is_cursor_position, "gtk_text_iter_is_cursor_position", LIBRARY.GTK);
	Linker.link(gtk_text_iter_is_end, "gtk_text_iter_is_end", LIBRARY.GTK);
	Linker.link(gtk_text_iter_is_start, "gtk_text_iter_is_start", LIBRARY.GTK);
	Linker.link(gtk_text_iter_order, "gtk_text_iter_order", LIBRARY.GTK);
	Linker.link(gtk_text_iter_set_line, "gtk_text_iter_set_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_set_line_index, "gtk_text_iter_set_line_index", LIBRARY.GTK);
	Linker.link(gtk_text_iter_set_line_offset, "gtk_text_iter_set_line_offset", LIBRARY.GTK);
	Linker.link(gtk_text_iter_set_offset, "gtk_text_iter_set_offset", LIBRARY.GTK);
	Linker.link(gtk_text_iter_set_visible_line_index, "gtk_text_iter_set_visible_line_index", LIBRARY.GTK);
	Linker.link(gtk_text_iter_set_visible_line_offset, "gtk_text_iter_set_visible_line_offset", LIBRARY.GTK);
	Linker.link(gtk_text_iter_starts_line, "gtk_text_iter_starts_line", LIBRARY.GTK);
	Linker.link(gtk_text_iter_starts_sentence, "gtk_text_iter_starts_sentence", LIBRARY.GTK);
	Linker.link(gtk_text_iter_starts_tag, "gtk_text_iter_starts_tag", LIBRARY.GTK);
	Linker.link(gtk_text_iter_starts_word, "gtk_text_iter_starts_word", LIBRARY.GTK);
	Linker.link(gtk_text_iter_toggles_tag, "gtk_text_iter_toggles_tag", LIBRARY.GTK);

	// gtk.TextMark

	Linker.link(gtk_text_mark_get_type, "gtk_text_mark_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_mark_new, "gtk_text_mark_new", LIBRARY.GTK);
	Linker.link(gtk_text_mark_get_buffer, "gtk_text_mark_get_buffer", LIBRARY.GTK);
	Linker.link(gtk_text_mark_get_deleted, "gtk_text_mark_get_deleted", LIBRARY.GTK);
	Linker.link(gtk_text_mark_get_left_gravity, "gtk_text_mark_get_left_gravity", LIBRARY.GTK);
	Linker.link(gtk_text_mark_get_name, "gtk_text_mark_get_name", LIBRARY.GTK);
	Linker.link(gtk_text_mark_get_visible, "gtk_text_mark_get_visible", LIBRARY.GTK);
	Linker.link(gtk_text_mark_set_visible, "gtk_text_mark_set_visible", LIBRARY.GTK);

	// gtk.TextTag

	Linker.link(gtk_text_tag_get_type, "gtk_text_tag_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_tag_new, "gtk_text_tag_new", LIBRARY.GTK);
	Linker.link(gtk_text_tag_changed, "gtk_text_tag_changed", LIBRARY.GTK);
	Linker.link(gtk_text_tag_event, "gtk_text_tag_event", LIBRARY.GTK);
	Linker.link(gtk_text_tag_get_priority, "gtk_text_tag_get_priority", LIBRARY.GTK);
	Linker.link(gtk_text_tag_set_priority, "gtk_text_tag_set_priority", LIBRARY.GTK);

	// gtk.TextTagTable

	Linker.link(gtk_text_tag_table_get_type, "gtk_text_tag_table_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_tag_table_new, "gtk_text_tag_table_new", LIBRARY.GTK);
	Linker.link(gtk_text_tag_table_add, "gtk_text_tag_table_add", LIBRARY.GTK);
	Linker.link(gtk_text_tag_table_foreach, "gtk_text_tag_table_foreach", LIBRARY.GTK);
	Linker.link(gtk_text_tag_table_get_size, "gtk_text_tag_table_get_size", LIBRARY.GTK);
	Linker.link(gtk_text_tag_table_lookup, "gtk_text_tag_table_lookup", LIBRARY.GTK);
	Linker.link(gtk_text_tag_table_remove, "gtk_text_tag_table_remove", LIBRARY.GTK);

	// gtk.TextView

	Linker.link(gtk_text_view_get_type, "gtk_text_view_get_type", LIBRARY.GTK);
	Linker.link(gtk_text_view_new, "gtk_text_view_new", LIBRARY.GTK);
	Linker.link(gtk_text_view_new_with_buffer, "gtk_text_view_new_with_buffer", LIBRARY.GTK);
	Linker.link(gtk_text_view_add_child_at_anchor, "gtk_text_view_add_child_at_anchor", LIBRARY.GTK);
	Linker.link(gtk_text_view_add_child_in_window, "gtk_text_view_add_child_in_window", LIBRARY.GTK);
	Linker.link(gtk_text_view_backward_display_line, "gtk_text_view_backward_display_line", LIBRARY.GTK);
	Linker.link(gtk_text_view_backward_display_line_start, "gtk_text_view_backward_display_line_start", LIBRARY.GTK);
	Linker.link(gtk_text_view_buffer_to_window_coords, "gtk_text_view_buffer_to_window_coords", LIBRARY.GTK);
	Linker.link(gtk_text_view_forward_display_line, "gtk_text_view_forward_display_line", LIBRARY.GTK);
	Linker.link(gtk_text_view_forward_display_line_end, "gtk_text_view_forward_display_line_end", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_accepts_tab, "gtk_text_view_get_accepts_tab", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_border_window_size, "gtk_text_view_get_border_window_size", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_bottom_margin, "gtk_text_view_get_bottom_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_buffer, "gtk_text_view_get_buffer", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_cursor_locations, "gtk_text_view_get_cursor_locations", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_cursor_visible, "gtk_text_view_get_cursor_visible", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_default_attributes, "gtk_text_view_get_default_attributes", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_editable, "gtk_text_view_get_editable", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_hadjustment, "gtk_text_view_get_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_indent, "gtk_text_view_get_indent", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_input_hints, "gtk_text_view_get_input_hints", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_input_purpose, "gtk_text_view_get_input_purpose", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_iter_at_location, "gtk_text_view_get_iter_at_location", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_iter_at_position, "gtk_text_view_get_iter_at_position", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_iter_location, "gtk_text_view_get_iter_location", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_justification, "gtk_text_view_get_justification", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_left_margin, "gtk_text_view_get_left_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_line_at_y, "gtk_text_view_get_line_at_y", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_line_yrange, "gtk_text_view_get_line_yrange", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_monospace, "gtk_text_view_get_monospace", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_overwrite, "gtk_text_view_get_overwrite", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_pixels_above_lines, "gtk_text_view_get_pixels_above_lines", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_pixels_below_lines, "gtk_text_view_get_pixels_below_lines", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_pixels_inside_wrap, "gtk_text_view_get_pixels_inside_wrap", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_right_margin, "gtk_text_view_get_right_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_tabs, "gtk_text_view_get_tabs", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_top_margin, "gtk_text_view_get_top_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_vadjustment, "gtk_text_view_get_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_visible_rect, "gtk_text_view_get_visible_rect", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_window, "gtk_text_view_get_window", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_window_type, "gtk_text_view_get_window_type", LIBRARY.GTK);
	Linker.link(gtk_text_view_get_wrap_mode, "gtk_text_view_get_wrap_mode", LIBRARY.GTK);
	Linker.link(gtk_text_view_im_context_filter_keypress, "gtk_text_view_im_context_filter_keypress", LIBRARY.GTK);
	Linker.link(gtk_text_view_move_child, "gtk_text_view_move_child", LIBRARY.GTK);
	Linker.link(gtk_text_view_move_mark_onscreen, "gtk_text_view_move_mark_onscreen", LIBRARY.GTK);
	Linker.link(gtk_text_view_move_visually, "gtk_text_view_move_visually", LIBRARY.GTK);
	Linker.link(gtk_text_view_place_cursor_onscreen, "gtk_text_view_place_cursor_onscreen", LIBRARY.GTK);
	Linker.link(gtk_text_view_reset_cursor_blink, "gtk_text_view_reset_cursor_blink", LIBRARY.GTK);
	Linker.link(gtk_text_view_reset_im_context, "gtk_text_view_reset_im_context", LIBRARY.GTK);
	Linker.link(gtk_text_view_scroll_mark_onscreen, "gtk_text_view_scroll_mark_onscreen", LIBRARY.GTK);
	Linker.link(gtk_text_view_scroll_to_iter, "gtk_text_view_scroll_to_iter", LIBRARY.GTK);
	Linker.link(gtk_text_view_scroll_to_mark, "gtk_text_view_scroll_to_mark", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_accepts_tab, "gtk_text_view_set_accepts_tab", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_border_window_size, "gtk_text_view_set_border_window_size", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_bottom_margin, "gtk_text_view_set_bottom_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_buffer, "gtk_text_view_set_buffer", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_cursor_visible, "gtk_text_view_set_cursor_visible", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_editable, "gtk_text_view_set_editable", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_indent, "gtk_text_view_set_indent", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_input_hints, "gtk_text_view_set_input_hints", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_input_purpose, "gtk_text_view_set_input_purpose", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_justification, "gtk_text_view_set_justification", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_left_margin, "gtk_text_view_set_left_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_monospace, "gtk_text_view_set_monospace", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_overwrite, "gtk_text_view_set_overwrite", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_pixels_above_lines, "gtk_text_view_set_pixels_above_lines", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_pixels_below_lines, "gtk_text_view_set_pixels_below_lines", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_pixels_inside_wrap, "gtk_text_view_set_pixels_inside_wrap", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_right_margin, "gtk_text_view_set_right_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_tabs, "gtk_text_view_set_tabs", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_top_margin, "gtk_text_view_set_top_margin", LIBRARY.GTK);
	Linker.link(gtk_text_view_set_wrap_mode, "gtk_text_view_set_wrap_mode", LIBRARY.GTK);
	Linker.link(gtk_text_view_starts_display_line, "gtk_text_view_starts_display_line", LIBRARY.GTK);
	Linker.link(gtk_text_view_window_to_buffer_coords, "gtk_text_view_window_to_buffer_coords", LIBRARY.GTK);

	// gtk.TextViewAccessible

	Linker.link(gtk_text_view_accessible_get_type, "gtk_text_view_accessible_get_type", LIBRARY.GTK);

	// gtk.ThemingEngine

	Linker.link(gtk_theming_engine_get_type, "gtk_theming_engine_get_type", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_load, "gtk_theming_engine_load", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_register_property, "gtk_theming_engine_register_property", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get, "gtk_theming_engine_get", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_background_color, "gtk_theming_engine_get_background_color", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_border, "gtk_theming_engine_get_border", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_border_color, "gtk_theming_engine_get_border_color", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_color, "gtk_theming_engine_get_color", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_direction, "gtk_theming_engine_get_direction", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_font, "gtk_theming_engine_get_font", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_junction_sides, "gtk_theming_engine_get_junction_sides", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_margin, "gtk_theming_engine_get_margin", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_padding, "gtk_theming_engine_get_padding", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_path, "gtk_theming_engine_get_path", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_property, "gtk_theming_engine_get_property", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_screen, "gtk_theming_engine_get_screen", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_state, "gtk_theming_engine_get_state", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_style, "gtk_theming_engine_get_style", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_style_property, "gtk_theming_engine_get_style_property", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_style_valist, "gtk_theming_engine_get_style_valist", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_get_valist, "gtk_theming_engine_get_valist", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_has_class, "gtk_theming_engine_has_class", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_has_region, "gtk_theming_engine_has_region", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_lookup_color, "gtk_theming_engine_lookup_color", LIBRARY.GTK);
	Linker.link(gtk_theming_engine_state_is_running, "gtk_theming_engine_state_is_running", LIBRARY.GTK);

	// gtk.ToggleAction

	Linker.link(gtk_toggle_action_get_type, "gtk_toggle_action_get_type", LIBRARY.GTK);
	Linker.link(gtk_toggle_action_new, "gtk_toggle_action_new", LIBRARY.GTK);
	Linker.link(gtk_toggle_action_get_active, "gtk_toggle_action_get_active", LIBRARY.GTK);
	Linker.link(gtk_toggle_action_get_draw_as_radio, "gtk_toggle_action_get_draw_as_radio", LIBRARY.GTK);
	Linker.link(gtk_toggle_action_set_active, "gtk_toggle_action_set_active", LIBRARY.GTK);
	Linker.link(gtk_toggle_action_set_draw_as_radio, "gtk_toggle_action_set_draw_as_radio", LIBRARY.GTK);
	Linker.link(gtk_toggle_action_toggled, "gtk_toggle_action_toggled", LIBRARY.GTK);

	// gtk.ToggleButton

	Linker.link(gtk_toggle_button_get_type, "gtk_toggle_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_new, "gtk_toggle_button_new", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_new_with_label, "gtk_toggle_button_new_with_label", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_new_with_mnemonic, "gtk_toggle_button_new_with_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_get_active, "gtk_toggle_button_get_active", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_get_inconsistent, "gtk_toggle_button_get_inconsistent", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_get_mode, "gtk_toggle_button_get_mode", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_set_active, "gtk_toggle_button_set_active", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_set_inconsistent, "gtk_toggle_button_set_inconsistent", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_set_mode, "gtk_toggle_button_set_mode", LIBRARY.GTK);
	Linker.link(gtk_toggle_button_toggled, "gtk_toggle_button_toggled", LIBRARY.GTK);

	// gtk.ToggleButtonAccessible

	Linker.link(gtk_toggle_button_accessible_get_type, "gtk_toggle_button_accessible_get_type", LIBRARY.GTK);

	// gtk.ToggleToolButton

	Linker.link(gtk_toggle_tool_button_get_type, "gtk_toggle_tool_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_toggle_tool_button_new, "gtk_toggle_tool_button_new", LIBRARY.GTK);
	Linker.link(gtk_toggle_tool_button_new_from_stock, "gtk_toggle_tool_button_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_toggle_tool_button_get_active, "gtk_toggle_tool_button_get_active", LIBRARY.GTK);
	Linker.link(gtk_toggle_tool_button_set_active, "gtk_toggle_tool_button_set_active", LIBRARY.GTK);

	// gtk.ToolButton

	Linker.link(gtk_tool_button_get_type, "gtk_tool_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_tool_button_new, "gtk_tool_button_new", LIBRARY.GTK);
	Linker.link(gtk_tool_button_new_from_stock, "gtk_tool_button_new_from_stock", LIBRARY.GTK);
	Linker.link(gtk_tool_button_get_icon_name, "gtk_tool_button_get_icon_name", LIBRARY.GTK);
	Linker.link(gtk_tool_button_get_icon_widget, "gtk_tool_button_get_icon_widget", LIBRARY.GTK);
	Linker.link(gtk_tool_button_get_label, "gtk_tool_button_get_label", LIBRARY.GTK);
	Linker.link(gtk_tool_button_get_label_widget, "gtk_tool_button_get_label_widget", LIBRARY.GTK);
	Linker.link(gtk_tool_button_get_stock_id, "gtk_tool_button_get_stock_id", LIBRARY.GTK);
	Linker.link(gtk_tool_button_get_use_underline, "gtk_tool_button_get_use_underline", LIBRARY.GTK);
	Linker.link(gtk_tool_button_set_icon_name, "gtk_tool_button_set_icon_name", LIBRARY.GTK);
	Linker.link(gtk_tool_button_set_icon_widget, "gtk_tool_button_set_icon_widget", LIBRARY.GTK);
	Linker.link(gtk_tool_button_set_label, "gtk_tool_button_set_label", LIBRARY.GTK);
	Linker.link(gtk_tool_button_set_label_widget, "gtk_tool_button_set_label_widget", LIBRARY.GTK);
	Linker.link(gtk_tool_button_set_stock_id, "gtk_tool_button_set_stock_id", LIBRARY.GTK);
	Linker.link(gtk_tool_button_set_use_underline, "gtk_tool_button_set_use_underline", LIBRARY.GTK);

	// gtk.ToolItem

	Linker.link(gtk_tool_item_get_type, "gtk_tool_item_get_type", LIBRARY.GTK);
	Linker.link(gtk_tool_item_new, "gtk_tool_item_new", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_ellipsize_mode, "gtk_tool_item_get_ellipsize_mode", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_expand, "gtk_tool_item_get_expand", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_homogeneous, "gtk_tool_item_get_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_icon_size, "gtk_tool_item_get_icon_size", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_is_important, "gtk_tool_item_get_is_important", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_orientation, "gtk_tool_item_get_orientation", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_proxy_menu_item, "gtk_tool_item_get_proxy_menu_item", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_relief_style, "gtk_tool_item_get_relief_style", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_text_alignment, "gtk_tool_item_get_text_alignment", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_text_orientation, "gtk_tool_item_get_text_orientation", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_text_size_group, "gtk_tool_item_get_text_size_group", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_toolbar_style, "gtk_tool_item_get_toolbar_style", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_use_drag_window, "gtk_tool_item_get_use_drag_window", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_visible_horizontal, "gtk_tool_item_get_visible_horizontal", LIBRARY.GTK);
	Linker.link(gtk_tool_item_get_visible_vertical, "gtk_tool_item_get_visible_vertical", LIBRARY.GTK);
	Linker.link(gtk_tool_item_rebuild_menu, "gtk_tool_item_rebuild_menu", LIBRARY.GTK);
	Linker.link(gtk_tool_item_retrieve_proxy_menu_item, "gtk_tool_item_retrieve_proxy_menu_item", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_expand, "gtk_tool_item_set_expand", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_homogeneous, "gtk_tool_item_set_homogeneous", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_is_important, "gtk_tool_item_set_is_important", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_proxy_menu_item, "gtk_tool_item_set_proxy_menu_item", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_tooltip_markup, "gtk_tool_item_set_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_tooltip_text, "gtk_tool_item_set_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_use_drag_window, "gtk_tool_item_set_use_drag_window", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_visible_horizontal, "gtk_tool_item_set_visible_horizontal", LIBRARY.GTK);
	Linker.link(gtk_tool_item_set_visible_vertical, "gtk_tool_item_set_visible_vertical", LIBRARY.GTK);
	Linker.link(gtk_tool_item_toolbar_reconfigured, "gtk_tool_item_toolbar_reconfigured", LIBRARY.GTK);

	// gtk.ToolItemGroup

	Linker.link(gtk_tool_item_group_get_type, "gtk_tool_item_group_get_type", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_new, "gtk_tool_item_group_new", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_collapsed, "gtk_tool_item_group_get_collapsed", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_drop_item, "gtk_tool_item_group_get_drop_item", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_ellipsize, "gtk_tool_item_group_get_ellipsize", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_header_relief, "gtk_tool_item_group_get_header_relief", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_item_position, "gtk_tool_item_group_get_item_position", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_label, "gtk_tool_item_group_get_label", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_label_widget, "gtk_tool_item_group_get_label_widget", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_n_items, "gtk_tool_item_group_get_n_items", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_get_nth_item, "gtk_tool_item_group_get_nth_item", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_insert, "gtk_tool_item_group_insert", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_set_collapsed, "gtk_tool_item_group_set_collapsed", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_set_ellipsize, "gtk_tool_item_group_set_ellipsize", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_set_header_relief, "gtk_tool_item_group_set_header_relief", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_set_item_position, "gtk_tool_item_group_set_item_position", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_set_label, "gtk_tool_item_group_set_label", LIBRARY.GTK);
	Linker.link(gtk_tool_item_group_set_label_widget, "gtk_tool_item_group_set_label_widget", LIBRARY.GTK);

	// gtk.ToolPalette

	Linker.link(gtk_tool_palette_get_type, "gtk_tool_palette_get_type", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_new, "gtk_tool_palette_new", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_drag_target_group, "gtk_tool_palette_get_drag_target_group", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_drag_target_item, "gtk_tool_palette_get_drag_target_item", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_add_drag_dest, "gtk_tool_palette_add_drag_dest", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_drag_item, "gtk_tool_palette_get_drag_item", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_drop_group, "gtk_tool_palette_get_drop_group", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_drop_item, "gtk_tool_palette_get_drop_item", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_exclusive, "gtk_tool_palette_get_exclusive", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_expand, "gtk_tool_palette_get_expand", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_group_position, "gtk_tool_palette_get_group_position", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_hadjustment, "gtk_tool_palette_get_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_icon_size, "gtk_tool_palette_get_icon_size", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_style, "gtk_tool_palette_get_style", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_get_vadjustment, "gtk_tool_palette_get_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_set_drag_source, "gtk_tool_palette_set_drag_source", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_set_exclusive, "gtk_tool_palette_set_exclusive", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_set_expand, "gtk_tool_palette_set_expand", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_set_group_position, "gtk_tool_palette_set_group_position", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_set_icon_size, "gtk_tool_palette_set_icon_size", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_set_style, "gtk_tool_palette_set_style", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_unset_icon_size, "gtk_tool_palette_unset_icon_size", LIBRARY.GTK);
	Linker.link(gtk_tool_palette_unset_style, "gtk_tool_palette_unset_style", LIBRARY.GTK);

	// gtk.ToolShell

	Linker.link(gtk_tool_shell_get_type, "gtk_tool_shell_get_type", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_ellipsize_mode, "gtk_tool_shell_get_ellipsize_mode", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_icon_size, "gtk_tool_shell_get_icon_size", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_orientation, "gtk_tool_shell_get_orientation", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_relief_style, "gtk_tool_shell_get_relief_style", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_style, "gtk_tool_shell_get_style", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_text_alignment, "gtk_tool_shell_get_text_alignment", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_text_orientation, "gtk_tool_shell_get_text_orientation", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_get_text_size_group, "gtk_tool_shell_get_text_size_group", LIBRARY.GTK);
	Linker.link(gtk_tool_shell_rebuild_menu, "gtk_tool_shell_rebuild_menu", LIBRARY.GTK);

	// gtk.Toolbar

	Linker.link(gtk_toolbar_get_type, "gtk_toolbar_get_type", LIBRARY.GTK);
	Linker.link(gtk_toolbar_new, "gtk_toolbar_new", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_drop_index, "gtk_toolbar_get_drop_index", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_icon_size, "gtk_toolbar_get_icon_size", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_item_index, "gtk_toolbar_get_item_index", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_n_items, "gtk_toolbar_get_n_items", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_nth_item, "gtk_toolbar_get_nth_item", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_relief_style, "gtk_toolbar_get_relief_style", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_show_arrow, "gtk_toolbar_get_show_arrow", LIBRARY.GTK);
	Linker.link(gtk_toolbar_get_style, "gtk_toolbar_get_style", LIBRARY.GTK);
	Linker.link(gtk_toolbar_insert, "gtk_toolbar_insert", LIBRARY.GTK);
	Linker.link(gtk_toolbar_set_drop_highlight_item, "gtk_toolbar_set_drop_highlight_item", LIBRARY.GTK);
	Linker.link(gtk_toolbar_set_icon_size, "gtk_toolbar_set_icon_size", LIBRARY.GTK);
	Linker.link(gtk_toolbar_set_show_arrow, "gtk_toolbar_set_show_arrow", LIBRARY.GTK);
	Linker.link(gtk_toolbar_set_style, "gtk_toolbar_set_style", LIBRARY.GTK);
	Linker.link(gtk_toolbar_unset_icon_size, "gtk_toolbar_unset_icon_size", LIBRARY.GTK);
	Linker.link(gtk_toolbar_unset_style, "gtk_toolbar_unset_style", LIBRARY.GTK);

	// gtk.Tooltip

	Linker.link(gtk_tooltip_get_type, "gtk_tooltip_get_type", LIBRARY.GTK);
	Linker.link(gtk_tooltip_trigger_tooltip_query, "gtk_tooltip_trigger_tooltip_query", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_custom, "gtk_tooltip_set_custom", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_icon, "gtk_tooltip_set_icon", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_icon_from_gicon, "gtk_tooltip_set_icon_from_gicon", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_icon_from_icon_name, "gtk_tooltip_set_icon_from_icon_name", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_icon_from_stock, "gtk_tooltip_set_icon_from_stock", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_markup, "gtk_tooltip_set_markup", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_text, "gtk_tooltip_set_text", LIBRARY.GTK);
	Linker.link(gtk_tooltip_set_tip_area, "gtk_tooltip_set_tip_area", LIBRARY.GTK);

	// gtk.ToplevelAccessible

	Linker.link(gtk_toplevel_accessible_get_type, "gtk_toplevel_accessible_get_type", LIBRARY.GTK);
	Linker.link(gtk_toplevel_accessible_get_children, "gtk_toplevel_accessible_get_children", LIBRARY.GTK);

	// gtk.TreeDragDest

	Linker.link(gtk_tree_drag_dest_get_type, "gtk_tree_drag_dest_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_drag_dest_drag_data_received, "gtk_tree_drag_dest_drag_data_received", LIBRARY.GTK);
	Linker.link(gtk_tree_drag_dest_row_drop_possible, "gtk_tree_drag_dest_row_drop_possible", LIBRARY.GTK);

	// gtk.TreeDragSource

	Linker.link(gtk_tree_drag_source_get_type, "gtk_tree_drag_source_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_drag_source_drag_data_delete, "gtk_tree_drag_source_drag_data_delete", LIBRARY.GTK);
	Linker.link(gtk_tree_drag_source_drag_data_get, "gtk_tree_drag_source_drag_data_get", LIBRARY.GTK);
	Linker.link(gtk_tree_drag_source_row_draggable, "gtk_tree_drag_source_row_draggable", LIBRARY.GTK);
	Linker.link(gtk_tree_get_row_drag_data, "gtk_tree_get_row_drag_data", LIBRARY.GTK);
	Linker.link(gtk_tree_set_row_drag_data, "gtk_tree_set_row_drag_data", LIBRARY.GTK);

	// gtk.TreeIter

	Linker.link(gtk_tree_iter_get_type, "gtk_tree_iter_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_iter_copy, "gtk_tree_iter_copy", LIBRARY.GTK);
	Linker.link(gtk_tree_iter_free, "gtk_tree_iter_free", LIBRARY.GTK);

	// gtk.TreeModel

	Linker.link(gtk_tree_model_get_type, "gtk_tree_model_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_new, "gtk_tree_model_filter_new", LIBRARY.GTK);
	Linker.link(gtk_tree_model_foreach, "gtk_tree_model_foreach", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get, "gtk_tree_model_get", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_column_type, "gtk_tree_model_get_column_type", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_flags, "gtk_tree_model_get_flags", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_iter, "gtk_tree_model_get_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_iter_first, "gtk_tree_model_get_iter_first", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_iter_from_string, "gtk_tree_model_get_iter_from_string", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_n_columns, "gtk_tree_model_get_n_columns", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_path, "gtk_tree_model_get_path", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_string_from_iter, "gtk_tree_model_get_string_from_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_valist, "gtk_tree_model_get_valist", LIBRARY.GTK);
	Linker.link(gtk_tree_model_get_value, "gtk_tree_model_get_value", LIBRARY.GTK);
	Linker.link(gtk_tree_model_iter_children, "gtk_tree_model_iter_children", LIBRARY.GTK);
	Linker.link(gtk_tree_model_iter_has_child, "gtk_tree_model_iter_has_child", LIBRARY.GTK);
	Linker.link(gtk_tree_model_iter_n_children, "gtk_tree_model_iter_n_children", LIBRARY.GTK);
	Linker.link(gtk_tree_model_iter_next, "gtk_tree_model_iter_next", LIBRARY.GTK);
	Linker.link(gtk_tree_model_iter_nth_child, "gtk_tree_model_iter_nth_child", LIBRARY.GTK);
	Linker.link(gtk_tree_model_iter_parent, "gtk_tree_model_iter_parent", LIBRARY.GTK);
	Linker.link(gtk_tree_model_iter_previous, "gtk_tree_model_iter_previous", LIBRARY.GTK);
	Linker.link(gtk_tree_model_ref_node, "gtk_tree_model_ref_node", LIBRARY.GTK);
	Linker.link(gtk_tree_model_row_changed, "gtk_tree_model_row_changed", LIBRARY.GTK);
	Linker.link(gtk_tree_model_row_deleted, "gtk_tree_model_row_deleted", LIBRARY.GTK);
	Linker.link(gtk_tree_model_row_has_child_toggled, "gtk_tree_model_row_has_child_toggled", LIBRARY.GTK);
	Linker.link(gtk_tree_model_row_inserted, "gtk_tree_model_row_inserted", LIBRARY.GTK);
	Linker.link(gtk_tree_model_rows_reordered, "gtk_tree_model_rows_reordered", LIBRARY.GTK);
	Linker.link(gtk_tree_model_rows_reordered_with_length, "gtk_tree_model_rows_reordered_with_length", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_new_with_model, "gtk_tree_model_sort_new_with_model", LIBRARY.GTK);
	Linker.link(gtk_tree_model_unref_node, "gtk_tree_model_unref_node", LIBRARY.GTK);

	// gtk.TreeModelFilter

	Linker.link(gtk_tree_model_filter_get_type, "gtk_tree_model_filter_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_clear_cache, "gtk_tree_model_filter_clear_cache", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_convert_child_iter_to_iter, "gtk_tree_model_filter_convert_child_iter_to_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_convert_child_path_to_path, "gtk_tree_model_filter_convert_child_path_to_path", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_convert_iter_to_child_iter, "gtk_tree_model_filter_convert_iter_to_child_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_convert_path_to_child_path, "gtk_tree_model_filter_convert_path_to_child_path", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_get_model, "gtk_tree_model_filter_get_model", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_refilter, "gtk_tree_model_filter_refilter", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_set_modify_func, "gtk_tree_model_filter_set_modify_func", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_set_visible_column, "gtk_tree_model_filter_set_visible_column", LIBRARY.GTK);
	Linker.link(gtk_tree_model_filter_set_visible_func, "gtk_tree_model_filter_set_visible_func", LIBRARY.GTK);

	// gtk.TreeModelSort

	Linker.link(gtk_tree_model_sort_get_type, "gtk_tree_model_sort_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_clear_cache, "gtk_tree_model_sort_clear_cache", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_convert_child_iter_to_iter, "gtk_tree_model_sort_convert_child_iter_to_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_convert_child_path_to_path, "gtk_tree_model_sort_convert_child_path_to_path", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_convert_iter_to_child_iter, "gtk_tree_model_sort_convert_iter_to_child_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_convert_path_to_child_path, "gtk_tree_model_sort_convert_path_to_child_path", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_get_model, "gtk_tree_model_sort_get_model", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_iter_is_valid, "gtk_tree_model_sort_iter_is_valid", LIBRARY.GTK);
	Linker.link(gtk_tree_model_sort_reset_default_sort_func, "gtk_tree_model_sort_reset_default_sort_func", LIBRARY.GTK);

	// gtk.TreePath

	Linker.link(gtk_tree_path_get_type, "gtk_tree_path_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_path_new, "gtk_tree_path_new", LIBRARY.GTK);
	Linker.link(gtk_tree_path_new_first, "gtk_tree_path_new_first", LIBRARY.GTK);
	Linker.link(gtk_tree_path_new_from_indices, "gtk_tree_path_new_from_indices", LIBRARY.GTK);
	Linker.link(gtk_tree_path_new_from_indicesv, "gtk_tree_path_new_from_indicesv", LIBRARY.GTK);
	Linker.link(gtk_tree_path_new_from_string, "gtk_tree_path_new_from_string", LIBRARY.GTK);
	Linker.link(gtk_tree_path_append_index, "gtk_tree_path_append_index", LIBRARY.GTK);
	Linker.link(gtk_tree_path_compare, "gtk_tree_path_compare", LIBRARY.GTK);
	Linker.link(gtk_tree_path_copy, "gtk_tree_path_copy", LIBRARY.GTK);
	Linker.link(gtk_tree_path_down, "gtk_tree_path_down", LIBRARY.GTK);
	Linker.link(gtk_tree_path_free, "gtk_tree_path_free", LIBRARY.GTK);
	Linker.link(gtk_tree_path_get_depth, "gtk_tree_path_get_depth", LIBRARY.GTK);
	Linker.link(gtk_tree_path_get_indices, "gtk_tree_path_get_indices", LIBRARY.GTK);
	Linker.link(gtk_tree_path_get_indices_with_depth, "gtk_tree_path_get_indices_with_depth", LIBRARY.GTK);
	Linker.link(gtk_tree_path_is_ancestor, "gtk_tree_path_is_ancestor", LIBRARY.GTK);
	Linker.link(gtk_tree_path_is_descendant, "gtk_tree_path_is_descendant", LIBRARY.GTK);
	Linker.link(gtk_tree_path_next, "gtk_tree_path_next", LIBRARY.GTK);
	Linker.link(gtk_tree_path_prepend_index, "gtk_tree_path_prepend_index", LIBRARY.GTK);
	Linker.link(gtk_tree_path_prev, "gtk_tree_path_prev", LIBRARY.GTK);
	Linker.link(gtk_tree_path_to_string, "gtk_tree_path_to_string", LIBRARY.GTK);
	Linker.link(gtk_tree_path_up, "gtk_tree_path_up", LIBRARY.GTK);

	// gtk.TreeRowReference

	Linker.link(gtk_tree_row_reference_get_type, "gtk_tree_row_reference_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_new, "gtk_tree_row_reference_new", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_new_proxy, "gtk_tree_row_reference_new_proxy", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_copy, "gtk_tree_row_reference_copy", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_free, "gtk_tree_row_reference_free", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_get_model, "gtk_tree_row_reference_get_model", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_get_path, "gtk_tree_row_reference_get_path", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_valid, "gtk_tree_row_reference_valid", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_deleted, "gtk_tree_row_reference_deleted", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_inserted, "gtk_tree_row_reference_inserted", LIBRARY.GTK);
	Linker.link(gtk_tree_row_reference_reordered, "gtk_tree_row_reference_reordered", LIBRARY.GTK);

	// gtk.TreeSelection

	Linker.link(gtk_tree_selection_get_type, "gtk_tree_selection_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_count_selected_rows, "gtk_tree_selection_count_selected_rows", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_get_mode, "gtk_tree_selection_get_mode", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_get_select_function, "gtk_tree_selection_get_select_function", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_get_selected, "gtk_tree_selection_get_selected", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_get_selected_rows, "gtk_tree_selection_get_selected_rows", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_get_tree_view, "gtk_tree_selection_get_tree_view", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_get_user_data, "gtk_tree_selection_get_user_data", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_iter_is_selected, "gtk_tree_selection_iter_is_selected", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_path_is_selected, "gtk_tree_selection_path_is_selected", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_select_all, "gtk_tree_selection_select_all", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_select_iter, "gtk_tree_selection_select_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_select_path, "gtk_tree_selection_select_path", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_select_range, "gtk_tree_selection_select_range", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_selected_foreach, "gtk_tree_selection_selected_foreach", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_set_mode, "gtk_tree_selection_set_mode", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_set_select_function, "gtk_tree_selection_set_select_function", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_unselect_all, "gtk_tree_selection_unselect_all", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_unselect_iter, "gtk_tree_selection_unselect_iter", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_unselect_path, "gtk_tree_selection_unselect_path", LIBRARY.GTK);
	Linker.link(gtk_tree_selection_unselect_range, "gtk_tree_selection_unselect_range", LIBRARY.GTK);

	// gtk.TreeSortable

	Linker.link(gtk_tree_sortable_get_type, "gtk_tree_sortable_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_sortable_get_sort_column_id, "gtk_tree_sortable_get_sort_column_id", LIBRARY.GTK);
	Linker.link(gtk_tree_sortable_has_default_sort_func, "gtk_tree_sortable_has_default_sort_func", LIBRARY.GTK);
	Linker.link(gtk_tree_sortable_set_default_sort_func, "gtk_tree_sortable_set_default_sort_func", LIBRARY.GTK);
	Linker.link(gtk_tree_sortable_set_sort_column_id, "gtk_tree_sortable_set_sort_column_id", LIBRARY.GTK);
	Linker.link(gtk_tree_sortable_set_sort_func, "gtk_tree_sortable_set_sort_func", LIBRARY.GTK);
	Linker.link(gtk_tree_sortable_sort_column_changed, "gtk_tree_sortable_sort_column_changed", LIBRARY.GTK);

	// gtk.TreeStore

	Linker.link(gtk_tree_store_get_type, "gtk_tree_store_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_store_new, "gtk_tree_store_new", LIBRARY.GTK);
	Linker.link(gtk_tree_store_newv, "gtk_tree_store_newv", LIBRARY.GTK);
	Linker.link(gtk_tree_store_append, "gtk_tree_store_append", LIBRARY.GTK);
	Linker.link(gtk_tree_store_clear, "gtk_tree_store_clear", LIBRARY.GTK);
	Linker.link(gtk_tree_store_insert, "gtk_tree_store_insert", LIBRARY.GTK);
	Linker.link(gtk_tree_store_insert_after, "gtk_tree_store_insert_after", LIBRARY.GTK);
	Linker.link(gtk_tree_store_insert_before, "gtk_tree_store_insert_before", LIBRARY.GTK);
	Linker.link(gtk_tree_store_insert_with_values, "gtk_tree_store_insert_with_values", LIBRARY.GTK);
	Linker.link(gtk_tree_store_insert_with_valuesv, "gtk_tree_store_insert_with_valuesv", LIBRARY.GTK);
	Linker.link(gtk_tree_store_is_ancestor, "gtk_tree_store_is_ancestor", LIBRARY.GTK);
	Linker.link(gtk_tree_store_iter_depth, "gtk_tree_store_iter_depth", LIBRARY.GTK);
	Linker.link(gtk_tree_store_iter_is_valid, "gtk_tree_store_iter_is_valid", LIBRARY.GTK);
	Linker.link(gtk_tree_store_move_after, "gtk_tree_store_move_after", LIBRARY.GTK);
	Linker.link(gtk_tree_store_move_before, "gtk_tree_store_move_before", LIBRARY.GTK);
	Linker.link(gtk_tree_store_prepend, "gtk_tree_store_prepend", LIBRARY.GTK);
	Linker.link(gtk_tree_store_remove, "gtk_tree_store_remove", LIBRARY.GTK);
	Linker.link(gtk_tree_store_reorder, "gtk_tree_store_reorder", LIBRARY.GTK);
	Linker.link(gtk_tree_store_set, "gtk_tree_store_set", LIBRARY.GTK);
	Linker.link(gtk_tree_store_set_column_types, "gtk_tree_store_set_column_types", LIBRARY.GTK);
	Linker.link(gtk_tree_store_set_valist, "gtk_tree_store_set_valist", LIBRARY.GTK);
	Linker.link(gtk_tree_store_set_value, "gtk_tree_store_set_value", LIBRARY.GTK);
	Linker.link(gtk_tree_store_set_valuesv, "gtk_tree_store_set_valuesv", LIBRARY.GTK);
	Linker.link(gtk_tree_store_swap, "gtk_tree_store_swap", LIBRARY.GTK);

	// gtk.TreeView

	Linker.link(gtk_tree_view_get_type, "gtk_tree_view_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_view_new, "gtk_tree_view_new", LIBRARY.GTK);
	Linker.link(gtk_tree_view_new_with_model, "gtk_tree_view_new_with_model", LIBRARY.GTK);
	Linker.link(gtk_tree_view_append_column, "gtk_tree_view_append_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_collapse_all, "gtk_tree_view_collapse_all", LIBRARY.GTK);
	Linker.link(gtk_tree_view_collapse_row, "gtk_tree_view_collapse_row", LIBRARY.GTK);
	Linker.link(gtk_tree_view_columns_autosize, "gtk_tree_view_columns_autosize", LIBRARY.GTK);
	Linker.link(gtk_tree_view_convert_bin_window_to_tree_coords, "gtk_tree_view_convert_bin_window_to_tree_coords", LIBRARY.GTK);
	Linker.link(gtk_tree_view_convert_bin_window_to_widget_coords, "gtk_tree_view_convert_bin_window_to_widget_coords", LIBRARY.GTK);
	Linker.link(gtk_tree_view_convert_tree_to_bin_window_coords, "gtk_tree_view_convert_tree_to_bin_window_coords", LIBRARY.GTK);
	Linker.link(gtk_tree_view_convert_tree_to_widget_coords, "gtk_tree_view_convert_tree_to_widget_coords", LIBRARY.GTK);
	Linker.link(gtk_tree_view_convert_widget_to_bin_window_coords, "gtk_tree_view_convert_widget_to_bin_window_coords", LIBRARY.GTK);
	Linker.link(gtk_tree_view_convert_widget_to_tree_coords, "gtk_tree_view_convert_widget_to_tree_coords", LIBRARY.GTK);
	Linker.link(gtk_tree_view_create_row_drag_icon, "gtk_tree_view_create_row_drag_icon", LIBRARY.GTK);
	Linker.link(gtk_tree_view_enable_model_drag_dest, "gtk_tree_view_enable_model_drag_dest", LIBRARY.GTK);
	Linker.link(gtk_tree_view_enable_model_drag_source, "gtk_tree_view_enable_model_drag_source", LIBRARY.GTK);
	Linker.link(gtk_tree_view_expand_all, "gtk_tree_view_expand_all", LIBRARY.GTK);
	Linker.link(gtk_tree_view_expand_row, "gtk_tree_view_expand_row", LIBRARY.GTK);
	Linker.link(gtk_tree_view_expand_to_path, "gtk_tree_view_expand_to_path", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_activate_on_single_click, "gtk_tree_view_get_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_background_area, "gtk_tree_view_get_background_area", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_bin_window, "gtk_tree_view_get_bin_window", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_cell_area, "gtk_tree_view_get_cell_area", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_column, "gtk_tree_view_get_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_columns, "gtk_tree_view_get_columns", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_cursor, "gtk_tree_view_get_cursor", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_dest_row_at_pos, "gtk_tree_view_get_dest_row_at_pos", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_drag_dest_row, "gtk_tree_view_get_drag_dest_row", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_enable_search, "gtk_tree_view_get_enable_search", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_enable_tree_lines, "gtk_tree_view_get_enable_tree_lines", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_expander_column, "gtk_tree_view_get_expander_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_fixed_height_mode, "gtk_tree_view_get_fixed_height_mode", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_grid_lines, "gtk_tree_view_get_grid_lines", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_hadjustment, "gtk_tree_view_get_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_headers_clickable, "gtk_tree_view_get_headers_clickable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_headers_visible, "gtk_tree_view_get_headers_visible", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_hover_expand, "gtk_tree_view_get_hover_expand", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_hover_selection, "gtk_tree_view_get_hover_selection", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_level_indentation, "gtk_tree_view_get_level_indentation", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_model, "gtk_tree_view_get_model", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_n_columns, "gtk_tree_view_get_n_columns", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_path_at_pos, "gtk_tree_view_get_path_at_pos", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_reorderable, "gtk_tree_view_get_reorderable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_row_separator_func, "gtk_tree_view_get_row_separator_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_rubber_banding, "gtk_tree_view_get_rubber_banding", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_rules_hint, "gtk_tree_view_get_rules_hint", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_search_column, "gtk_tree_view_get_search_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_search_entry, "gtk_tree_view_get_search_entry", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_search_equal_func, "gtk_tree_view_get_search_equal_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_search_position_func, "gtk_tree_view_get_search_position_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_selection, "gtk_tree_view_get_selection", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_show_expanders, "gtk_tree_view_get_show_expanders", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_tooltip_column, "gtk_tree_view_get_tooltip_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_tooltip_context, "gtk_tree_view_get_tooltip_context", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_vadjustment, "gtk_tree_view_get_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_visible_range, "gtk_tree_view_get_visible_range", LIBRARY.GTK);
	Linker.link(gtk_tree_view_get_visible_rect, "gtk_tree_view_get_visible_rect", LIBRARY.GTK);
	Linker.link(gtk_tree_view_insert_column, "gtk_tree_view_insert_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_insert_column_with_attributes, "gtk_tree_view_insert_column_with_attributes", LIBRARY.GTK);
	Linker.link(gtk_tree_view_insert_column_with_data_func, "gtk_tree_view_insert_column_with_data_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_is_blank_at_pos, "gtk_tree_view_is_blank_at_pos", LIBRARY.GTK);
	Linker.link(gtk_tree_view_is_rubber_banding_active, "gtk_tree_view_is_rubber_banding_active", LIBRARY.GTK);
	Linker.link(gtk_tree_view_map_expanded_rows, "gtk_tree_view_map_expanded_rows", LIBRARY.GTK);
	Linker.link(gtk_tree_view_move_column_after, "gtk_tree_view_move_column_after", LIBRARY.GTK);
	Linker.link(gtk_tree_view_remove_column, "gtk_tree_view_remove_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_row_activated, "gtk_tree_view_row_activated", LIBRARY.GTK);
	Linker.link(gtk_tree_view_row_expanded, "gtk_tree_view_row_expanded", LIBRARY.GTK);
	Linker.link(gtk_tree_view_scroll_to_cell, "gtk_tree_view_scroll_to_cell", LIBRARY.GTK);
	Linker.link(gtk_tree_view_scroll_to_point, "gtk_tree_view_scroll_to_point", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_activate_on_single_click, "gtk_tree_view_set_activate_on_single_click", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_column_drag_function, "gtk_tree_view_set_column_drag_function", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_cursor, "gtk_tree_view_set_cursor", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_cursor_on_cell, "gtk_tree_view_set_cursor_on_cell", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_destroy_count_func, "gtk_tree_view_set_destroy_count_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_drag_dest_row, "gtk_tree_view_set_drag_dest_row", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_enable_search, "gtk_tree_view_set_enable_search", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_enable_tree_lines, "gtk_tree_view_set_enable_tree_lines", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_expander_column, "gtk_tree_view_set_expander_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_fixed_height_mode, "gtk_tree_view_set_fixed_height_mode", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_grid_lines, "gtk_tree_view_set_grid_lines", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_hadjustment, "gtk_tree_view_set_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_headers_clickable, "gtk_tree_view_set_headers_clickable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_headers_visible, "gtk_tree_view_set_headers_visible", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_hover_expand, "gtk_tree_view_set_hover_expand", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_hover_selection, "gtk_tree_view_set_hover_selection", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_level_indentation, "gtk_tree_view_set_level_indentation", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_model, "gtk_tree_view_set_model", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_reorderable, "gtk_tree_view_set_reorderable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_row_separator_func, "gtk_tree_view_set_row_separator_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_rubber_banding, "gtk_tree_view_set_rubber_banding", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_rules_hint, "gtk_tree_view_set_rules_hint", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_search_column, "gtk_tree_view_set_search_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_search_entry, "gtk_tree_view_set_search_entry", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_search_equal_func, "gtk_tree_view_set_search_equal_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_search_position_func, "gtk_tree_view_set_search_position_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_show_expanders, "gtk_tree_view_set_show_expanders", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_tooltip_cell, "gtk_tree_view_set_tooltip_cell", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_tooltip_column, "gtk_tree_view_set_tooltip_column", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_tooltip_row, "gtk_tree_view_set_tooltip_row", LIBRARY.GTK);
	Linker.link(gtk_tree_view_set_vadjustment, "gtk_tree_view_set_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_tree_view_unset_rows_drag_dest, "gtk_tree_view_unset_rows_drag_dest", LIBRARY.GTK);
	Linker.link(gtk_tree_view_unset_rows_drag_source, "gtk_tree_view_unset_rows_drag_source", LIBRARY.GTK);

	// gtk.TreeViewAccessible

	Linker.link(gtk_tree_view_accessible_get_type, "gtk_tree_view_accessible_get_type", LIBRARY.GTK);

	// gtk.TreeViewColumn

	Linker.link(gtk_tree_view_column_get_type, "gtk_tree_view_column_get_type", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_new, "gtk_tree_view_column_new", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_new_with_area, "gtk_tree_view_column_new_with_area", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_new_with_attributes, "gtk_tree_view_column_new_with_attributes", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_add_attribute, "gtk_tree_view_column_add_attribute", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_cell_get_position, "gtk_tree_view_column_cell_get_position", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_cell_get_size, "gtk_tree_view_column_cell_get_size", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_cell_is_visible, "gtk_tree_view_column_cell_is_visible", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_cell_set_cell_data, "gtk_tree_view_column_cell_set_cell_data", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_clear, "gtk_tree_view_column_clear", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_clear_attributes, "gtk_tree_view_column_clear_attributes", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_clicked, "gtk_tree_view_column_clicked", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_focus_cell, "gtk_tree_view_column_focus_cell", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_alignment, "gtk_tree_view_column_get_alignment", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_button, "gtk_tree_view_column_get_button", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_clickable, "gtk_tree_view_column_get_clickable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_expand, "gtk_tree_view_column_get_expand", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_fixed_width, "gtk_tree_view_column_get_fixed_width", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_max_width, "gtk_tree_view_column_get_max_width", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_min_width, "gtk_tree_view_column_get_min_width", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_reorderable, "gtk_tree_view_column_get_reorderable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_resizable, "gtk_tree_view_column_get_resizable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_sizing, "gtk_tree_view_column_get_sizing", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_sort_column_id, "gtk_tree_view_column_get_sort_column_id", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_sort_indicator, "gtk_tree_view_column_get_sort_indicator", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_sort_order, "gtk_tree_view_column_get_sort_order", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_spacing, "gtk_tree_view_column_get_spacing", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_title, "gtk_tree_view_column_get_title", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_tree_view, "gtk_tree_view_column_get_tree_view", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_visible, "gtk_tree_view_column_get_visible", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_widget, "gtk_tree_view_column_get_widget", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_width, "gtk_tree_view_column_get_width", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_get_x_offset, "gtk_tree_view_column_get_x_offset", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_pack_end, "gtk_tree_view_column_pack_end", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_pack_start, "gtk_tree_view_column_pack_start", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_queue_resize, "gtk_tree_view_column_queue_resize", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_alignment, "gtk_tree_view_column_set_alignment", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_attributes, "gtk_tree_view_column_set_attributes", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_cell_data_func, "gtk_tree_view_column_set_cell_data_func", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_clickable, "gtk_tree_view_column_set_clickable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_expand, "gtk_tree_view_column_set_expand", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_fixed_width, "gtk_tree_view_column_set_fixed_width", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_max_width, "gtk_tree_view_column_set_max_width", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_min_width, "gtk_tree_view_column_set_min_width", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_reorderable, "gtk_tree_view_column_set_reorderable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_resizable, "gtk_tree_view_column_set_resizable", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_sizing, "gtk_tree_view_column_set_sizing", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_sort_column_id, "gtk_tree_view_column_set_sort_column_id", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_sort_indicator, "gtk_tree_view_column_set_sort_indicator", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_sort_order, "gtk_tree_view_column_set_sort_order", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_spacing, "gtk_tree_view_column_set_spacing", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_title, "gtk_tree_view_column_set_title", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_visible, "gtk_tree_view_column_set_visible", LIBRARY.GTK);
	Linker.link(gtk_tree_view_column_set_widget, "gtk_tree_view_column_set_widget", LIBRARY.GTK);

	// gtk.UIManager

	Linker.link(gtk_ui_manager_get_type, "gtk_ui_manager_get_type", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_new, "gtk_ui_manager_new", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_add_ui, "gtk_ui_manager_add_ui", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_add_ui_from_file, "gtk_ui_manager_add_ui_from_file", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_add_ui_from_resource, "gtk_ui_manager_add_ui_from_resource", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_add_ui_from_string, "gtk_ui_manager_add_ui_from_string", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_ensure_update, "gtk_ui_manager_ensure_update", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_get_accel_group, "gtk_ui_manager_get_accel_group", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_get_action, "gtk_ui_manager_get_action", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_get_action_groups, "gtk_ui_manager_get_action_groups", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_get_add_tearoffs, "gtk_ui_manager_get_add_tearoffs", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_get_toplevels, "gtk_ui_manager_get_toplevels", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_get_ui, "gtk_ui_manager_get_ui", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_get_widget, "gtk_ui_manager_get_widget", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_insert_action_group, "gtk_ui_manager_insert_action_group", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_new_merge_id, "gtk_ui_manager_new_merge_id", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_remove_action_group, "gtk_ui_manager_remove_action_group", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_remove_ui, "gtk_ui_manager_remove_ui", LIBRARY.GTK);
	Linker.link(gtk_ui_manager_set_add_tearoffs, "gtk_ui_manager_set_add_tearoffs", LIBRARY.GTK);

	// gtk.VBox

	Linker.link(gtk_vbox_get_type, "gtk_vbox_get_type", LIBRARY.GTK);
	Linker.link(gtk_vbox_new, "gtk_vbox_new", LIBRARY.GTK);

	// gtk.VButtonBox

	Linker.link(gtk_vbutton_box_get_type, "gtk_vbutton_box_get_type", LIBRARY.GTK);
	Linker.link(gtk_vbutton_box_new, "gtk_vbutton_box_new", LIBRARY.GTK);

	// gtk.VPaned

	Linker.link(gtk_vpaned_get_type, "gtk_vpaned_get_type", LIBRARY.GTK);
	Linker.link(gtk_vpaned_new, "gtk_vpaned_new", LIBRARY.GTK);

	// gtk.VScale

	Linker.link(gtk_vscale_get_type, "gtk_vscale_get_type", LIBRARY.GTK);
	Linker.link(gtk_vscale_new, "gtk_vscale_new", LIBRARY.GTK);
	Linker.link(gtk_vscale_new_with_range, "gtk_vscale_new_with_range", LIBRARY.GTK);

	// gtk.VScrollbar

	Linker.link(gtk_vscrollbar_get_type, "gtk_vscrollbar_get_type", LIBRARY.GTK);
	Linker.link(gtk_vscrollbar_new, "gtk_vscrollbar_new", LIBRARY.GTK);

	// gtk.VSeparator

	Linker.link(gtk_vseparator_get_type, "gtk_vseparator_get_type", LIBRARY.GTK);
	Linker.link(gtk_vseparator_new, "gtk_vseparator_new", LIBRARY.GTK);

	// gtk.Viewport

	Linker.link(gtk_viewport_get_type, "gtk_viewport_get_type", LIBRARY.GTK);
	Linker.link(gtk_viewport_new, "gtk_viewport_new", LIBRARY.GTK);
	Linker.link(gtk_viewport_get_bin_window, "gtk_viewport_get_bin_window", LIBRARY.GTK);
	Linker.link(gtk_viewport_get_hadjustment, "gtk_viewport_get_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_viewport_get_shadow_type, "gtk_viewport_get_shadow_type", LIBRARY.GTK);
	Linker.link(gtk_viewport_get_vadjustment, "gtk_viewport_get_vadjustment", LIBRARY.GTK);
	Linker.link(gtk_viewport_get_view_window, "gtk_viewport_get_view_window", LIBRARY.GTK);
	Linker.link(gtk_viewport_set_hadjustment, "gtk_viewport_set_hadjustment", LIBRARY.GTK);
	Linker.link(gtk_viewport_set_shadow_type, "gtk_viewport_set_shadow_type", LIBRARY.GTK);
	Linker.link(gtk_viewport_set_vadjustment, "gtk_viewport_set_vadjustment", LIBRARY.GTK);

	// gtk.VolumeButton

	Linker.link(gtk_volume_button_get_type, "gtk_volume_button_get_type", LIBRARY.GTK);
	Linker.link(gtk_volume_button_new, "gtk_volume_button_new", LIBRARY.GTK);

	// gtk.Widget

	Linker.link(gtk_widget_get_type, "gtk_widget_get_type", LIBRARY.GTK);
	Linker.link(gtk_widget_new, "gtk_widget_new", LIBRARY.GTK);
	Linker.link(gtk_widget_get_default_direction, "gtk_widget_get_default_direction", LIBRARY.GTK);
	Linker.link(gtk_widget_get_default_style, "gtk_widget_get_default_style", LIBRARY.GTK);
	Linker.link(gtk_widget_pop_composite_child, "gtk_widget_pop_composite_child", LIBRARY.GTK);
	Linker.link(gtk_widget_push_composite_child, "gtk_widget_push_composite_child", LIBRARY.GTK);
	Linker.link(gtk_widget_set_default_direction, "gtk_widget_set_default_direction", LIBRARY.GTK);
	Linker.link(gtk_widget_activate, "gtk_widget_activate", LIBRARY.GTK);
	Linker.link(gtk_widget_add_accelerator, "gtk_widget_add_accelerator", LIBRARY.GTK);
	Linker.link(gtk_widget_add_device_events, "gtk_widget_add_device_events", LIBRARY.GTK);
	Linker.link(gtk_widget_add_events, "gtk_widget_add_events", LIBRARY.GTK);
	Linker.link(gtk_widget_add_mnemonic_label, "gtk_widget_add_mnemonic_label", LIBRARY.GTK);
	Linker.link(gtk_widget_add_tick_callback, "gtk_widget_add_tick_callback", LIBRARY.GTK);
	Linker.link(gtk_widget_can_activate_accel, "gtk_widget_can_activate_accel", LIBRARY.GTK);
	Linker.link(gtk_widget_child_focus, "gtk_widget_child_focus", LIBRARY.GTK);
	Linker.link(gtk_widget_child_notify, "gtk_widget_child_notify", LIBRARY.GTK);
	Linker.link(gtk_widget_class_path, "gtk_widget_class_path", LIBRARY.GTK);
	Linker.link(gtk_widget_compute_expand, "gtk_widget_compute_expand", LIBRARY.GTK);
	Linker.link(gtk_widget_create_pango_context, "gtk_widget_create_pango_context", LIBRARY.GTK);
	Linker.link(gtk_widget_create_pango_layout, "gtk_widget_create_pango_layout", LIBRARY.GTK);
	Linker.link(gtk_widget_destroy, "gtk_widget_destroy", LIBRARY.GTK);
	Linker.link(gtk_widget_destroyed, "gtk_widget_destroyed", LIBRARY.GTK);
	Linker.link(gtk_widget_device_is_shadowed, "gtk_widget_device_is_shadowed", LIBRARY.GTK);
	Linker.link(gtk_drag_begin, "gtk_drag_begin", LIBRARY.GTK);
	Linker.link(gtk_drag_begin_with_coordinates, "gtk_drag_begin_with_coordinates", LIBRARY.GTK);
	Linker.link(gtk_drag_check_threshold, "gtk_drag_check_threshold", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_add_image_targets, "gtk_drag_dest_add_image_targets", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_add_text_targets, "gtk_drag_dest_add_text_targets", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_add_uri_targets, "gtk_drag_dest_add_uri_targets", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_find_target, "gtk_drag_dest_find_target", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_get_target_list, "gtk_drag_dest_get_target_list", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_get_track_motion, "gtk_drag_dest_get_track_motion", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_set, "gtk_drag_dest_set", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_set_proxy, "gtk_drag_dest_set_proxy", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_set_target_list, "gtk_drag_dest_set_target_list", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_set_track_motion, "gtk_drag_dest_set_track_motion", LIBRARY.GTK);
	Linker.link(gtk_drag_dest_unset, "gtk_drag_dest_unset", LIBRARY.GTK);
	Linker.link(gtk_drag_get_data, "gtk_drag_get_data", LIBRARY.GTK);
	Linker.link(gtk_drag_highlight, "gtk_drag_highlight", LIBRARY.GTK);
	Linker.link(gtk_drag_source_add_image_targets, "gtk_drag_source_add_image_targets", LIBRARY.GTK);
	Linker.link(gtk_drag_source_add_text_targets, "gtk_drag_source_add_text_targets", LIBRARY.GTK);
	Linker.link(gtk_drag_source_add_uri_targets, "gtk_drag_source_add_uri_targets", LIBRARY.GTK);
	Linker.link(gtk_drag_source_get_target_list, "gtk_drag_source_get_target_list", LIBRARY.GTK);
	Linker.link(gtk_drag_source_set, "gtk_drag_source_set", LIBRARY.GTK);
	Linker.link(gtk_drag_source_set_icon_gicon, "gtk_drag_source_set_icon_gicon", LIBRARY.GTK);
	Linker.link(gtk_drag_source_set_icon_name, "gtk_drag_source_set_icon_name", LIBRARY.GTK);
	Linker.link(gtk_drag_source_set_icon_pixbuf, "gtk_drag_source_set_icon_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_drag_source_set_icon_stock, "gtk_drag_source_set_icon_stock", LIBRARY.GTK);
	Linker.link(gtk_drag_source_set_target_list, "gtk_drag_source_set_target_list", LIBRARY.GTK);
	Linker.link(gtk_drag_source_unset, "gtk_drag_source_unset", LIBRARY.GTK);
	Linker.link(gtk_drag_unhighlight, "gtk_drag_unhighlight", LIBRARY.GTK);
	Linker.link(gtk_widget_draw, "gtk_widget_draw", LIBRARY.GTK);
	Linker.link(gtk_widget_ensure_style, "gtk_widget_ensure_style", LIBRARY.GTK);
	Linker.link(gtk_widget_error_bell, "gtk_widget_error_bell", LIBRARY.GTK);
	Linker.link(gtk_widget_event, "gtk_widget_event", LIBRARY.GTK);
	Linker.link(gtk_widget_freeze_child_notify, "gtk_widget_freeze_child_notify", LIBRARY.GTK);
	Linker.link(gtk_widget_get_accessible, "gtk_widget_get_accessible", LIBRARY.GTK);
	Linker.link(gtk_widget_get_action_group, "gtk_widget_get_action_group", LIBRARY.GTK);
	Linker.link(gtk_widget_get_allocated_baseline, "gtk_widget_get_allocated_baseline", LIBRARY.GTK);
	Linker.link(gtk_widget_get_allocated_height, "gtk_widget_get_allocated_height", LIBRARY.GTK);
	Linker.link(gtk_widget_get_allocated_size, "gtk_widget_get_allocated_size", LIBRARY.GTK);
	Linker.link(gtk_widget_get_allocated_width, "gtk_widget_get_allocated_width", LIBRARY.GTK);
	Linker.link(gtk_widget_get_allocation, "gtk_widget_get_allocation", LIBRARY.GTK);
	Linker.link(gtk_widget_get_ancestor, "gtk_widget_get_ancestor", LIBRARY.GTK);
	Linker.link(gtk_widget_get_app_paintable, "gtk_widget_get_app_paintable", LIBRARY.GTK);
	Linker.link(gtk_widget_get_can_default, "gtk_widget_get_can_default", LIBRARY.GTK);
	Linker.link(gtk_widget_get_can_focus, "gtk_widget_get_can_focus", LIBRARY.GTK);
	Linker.link(gtk_widget_get_child_requisition, "gtk_widget_get_child_requisition", LIBRARY.GTK);
	Linker.link(gtk_widget_get_child_visible, "gtk_widget_get_child_visible", LIBRARY.GTK);
	Linker.link(gtk_widget_get_clip, "gtk_widget_get_clip", LIBRARY.GTK);
	Linker.link(gtk_widget_get_clipboard, "gtk_widget_get_clipboard", LIBRARY.GTK);
	Linker.link(gtk_widget_get_composite_name, "gtk_widget_get_composite_name", LIBRARY.GTK);
	Linker.link(gtk_widget_get_device_enabled, "gtk_widget_get_device_enabled", LIBRARY.GTK);
	Linker.link(gtk_widget_get_device_events, "gtk_widget_get_device_events", LIBRARY.GTK);
	Linker.link(gtk_widget_get_direction, "gtk_widget_get_direction", LIBRARY.GTK);
	Linker.link(gtk_widget_get_display, "gtk_widget_get_display", LIBRARY.GTK);
	Linker.link(gtk_widget_get_double_buffered, "gtk_widget_get_double_buffered", LIBRARY.GTK);
	Linker.link(gtk_widget_get_events, "gtk_widget_get_events", LIBRARY.GTK);
	Linker.link(gtk_widget_get_focus_on_click, "gtk_widget_get_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_widget_get_font_map, "gtk_widget_get_font_map", LIBRARY.GTK);
	Linker.link(gtk_widget_get_font_options, "gtk_widget_get_font_options", LIBRARY.GTK);
	Linker.link(gtk_widget_get_frame_clock, "gtk_widget_get_frame_clock", LIBRARY.GTK);
	Linker.link(gtk_widget_get_halign, "gtk_widget_get_halign", LIBRARY.GTK);
	Linker.link(gtk_widget_get_has_tooltip, "gtk_widget_get_has_tooltip", LIBRARY.GTK);
	Linker.link(gtk_widget_get_has_window, "gtk_widget_get_has_window", LIBRARY.GTK);
	Linker.link(gtk_widget_get_hexpand, "gtk_widget_get_hexpand", LIBRARY.GTK);
	Linker.link(gtk_widget_get_hexpand_set, "gtk_widget_get_hexpand_set", LIBRARY.GTK);
	Linker.link(gtk_widget_get_mapped, "gtk_widget_get_mapped", LIBRARY.GTK);
	Linker.link(gtk_widget_get_margin_bottom, "gtk_widget_get_margin_bottom", LIBRARY.GTK);
	Linker.link(gtk_widget_get_margin_end, "gtk_widget_get_margin_end", LIBRARY.GTK);
	Linker.link(gtk_widget_get_margin_left, "gtk_widget_get_margin_left", LIBRARY.GTK);
	Linker.link(gtk_widget_get_margin_right, "gtk_widget_get_margin_right", LIBRARY.GTK);
	Linker.link(gtk_widget_get_margin_start, "gtk_widget_get_margin_start", LIBRARY.GTK);
	Linker.link(gtk_widget_get_margin_top, "gtk_widget_get_margin_top", LIBRARY.GTK);
	Linker.link(gtk_widget_get_modifier_mask, "gtk_widget_get_modifier_mask", LIBRARY.GTK);
	Linker.link(gtk_widget_get_modifier_style, "gtk_widget_get_modifier_style", LIBRARY.GTK);
	Linker.link(gtk_widget_get_name, "gtk_widget_get_name", LIBRARY.GTK);
	Linker.link(gtk_widget_get_no_show_all, "gtk_widget_get_no_show_all", LIBRARY.GTK);
	Linker.link(gtk_widget_get_opacity, "gtk_widget_get_opacity", LIBRARY.GTK);
	Linker.link(gtk_widget_get_pango_context, "gtk_widget_get_pango_context", LIBRARY.GTK);
	Linker.link(gtk_widget_get_parent, "gtk_widget_get_parent", LIBRARY.GTK);
	Linker.link(gtk_widget_get_parent_window, "gtk_widget_get_parent_window", LIBRARY.GTK);
	Linker.link(gtk_widget_get_path, "gtk_widget_get_path", LIBRARY.GTK);
	Linker.link(gtk_widget_get_pointer, "gtk_widget_get_pointer", LIBRARY.GTK);
	Linker.link(gtk_widget_get_preferred_height, "gtk_widget_get_preferred_height", LIBRARY.GTK);
	Linker.link(gtk_widget_get_preferred_height_and_baseline_for_width, "gtk_widget_get_preferred_height_and_baseline_for_width", LIBRARY.GTK);
	Linker.link(gtk_widget_get_preferred_height_for_width, "gtk_widget_get_preferred_height_for_width", LIBRARY.GTK);
	Linker.link(gtk_widget_get_preferred_size, "gtk_widget_get_preferred_size", LIBRARY.GTK);
	Linker.link(gtk_widget_get_preferred_width, "gtk_widget_get_preferred_width", LIBRARY.GTK);
	Linker.link(gtk_widget_get_preferred_width_for_height, "gtk_widget_get_preferred_width_for_height", LIBRARY.GTK);
	Linker.link(gtk_widget_get_realized, "gtk_widget_get_realized", LIBRARY.GTK);
	Linker.link(gtk_widget_get_receives_default, "gtk_widget_get_receives_default", LIBRARY.GTK);
	Linker.link(gtk_widget_get_request_mode, "gtk_widget_get_request_mode", LIBRARY.GTK);
	Linker.link(gtk_widget_get_requisition, "gtk_widget_get_requisition", LIBRARY.GTK);
	Linker.link(gtk_widget_get_root_window, "gtk_widget_get_root_window", LIBRARY.GTK);
	Linker.link(gtk_widget_get_scale_factor, "gtk_widget_get_scale_factor", LIBRARY.GTK);
	Linker.link(gtk_widget_get_screen, "gtk_widget_get_screen", LIBRARY.GTK);
	Linker.link(gtk_widget_get_sensitive, "gtk_widget_get_sensitive", LIBRARY.GTK);
	Linker.link(gtk_widget_get_settings, "gtk_widget_get_settings", LIBRARY.GTK);
	Linker.link(gtk_widget_get_size_request, "gtk_widget_get_size_request", LIBRARY.GTK);
	Linker.link(gtk_widget_get_state, "gtk_widget_get_state", LIBRARY.GTK);
	Linker.link(gtk_widget_get_state_flags, "gtk_widget_get_state_flags", LIBRARY.GTK);
	Linker.link(gtk_widget_get_style, "gtk_widget_get_style", LIBRARY.GTK);
	Linker.link(gtk_widget_get_style_context, "gtk_widget_get_style_context", LIBRARY.GTK);
	Linker.link(gtk_widget_get_support_multidevice, "gtk_widget_get_support_multidevice", LIBRARY.GTK);
	Linker.link(gtk_widget_get_template_child, "gtk_widget_get_template_child", LIBRARY.GTK);
	Linker.link(gtk_widget_get_tooltip_markup, "gtk_widget_get_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_widget_get_tooltip_text, "gtk_widget_get_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_widget_get_tooltip_window, "gtk_widget_get_tooltip_window", LIBRARY.GTK);
	Linker.link(gtk_widget_get_toplevel, "gtk_widget_get_toplevel", LIBRARY.GTK);
	Linker.link(gtk_widget_get_valign, "gtk_widget_get_valign", LIBRARY.GTK);
	Linker.link(gtk_widget_get_valign_with_baseline, "gtk_widget_get_valign_with_baseline", LIBRARY.GTK);
	Linker.link(gtk_widget_get_vexpand, "gtk_widget_get_vexpand", LIBRARY.GTK);
	Linker.link(gtk_widget_get_vexpand_set, "gtk_widget_get_vexpand_set", LIBRARY.GTK);
	Linker.link(gtk_widget_get_visible, "gtk_widget_get_visible", LIBRARY.GTK);
	Linker.link(gtk_widget_get_visual, "gtk_widget_get_visual", LIBRARY.GTK);
	Linker.link(gtk_widget_get_window, "gtk_widget_get_window", LIBRARY.GTK);
	Linker.link(gtk_grab_add, "gtk_grab_add", LIBRARY.GTK);
	Linker.link(gtk_widget_grab_default, "gtk_widget_grab_default", LIBRARY.GTK);
	Linker.link(gtk_widget_grab_focus, "gtk_widget_grab_focus", LIBRARY.GTK);
	Linker.link(gtk_grab_remove, "gtk_grab_remove", LIBRARY.GTK);
	Linker.link(gtk_widget_has_default, "gtk_widget_has_default", LIBRARY.GTK);
	Linker.link(gtk_widget_has_focus, "gtk_widget_has_focus", LIBRARY.GTK);
	Linker.link(gtk_widget_has_grab, "gtk_widget_has_grab", LIBRARY.GTK);
	Linker.link(gtk_widget_has_rc_style, "gtk_widget_has_rc_style", LIBRARY.GTK);
	Linker.link(gtk_widget_has_screen, "gtk_widget_has_screen", LIBRARY.GTK);
	Linker.link(gtk_widget_has_visible_focus, "gtk_widget_has_visible_focus", LIBRARY.GTK);
	Linker.link(gtk_widget_hide, "gtk_widget_hide", LIBRARY.GTK);
	Linker.link(gtk_widget_hide_on_delete, "gtk_widget_hide_on_delete", LIBRARY.GTK);
	Linker.link(gtk_widget_in_destruction, "gtk_widget_in_destruction", LIBRARY.GTK);
	Linker.link(gtk_widget_init_template, "gtk_widget_init_template", LIBRARY.GTK);
	Linker.link(gtk_widget_input_shape_combine_region, "gtk_widget_input_shape_combine_region", LIBRARY.GTK);
	Linker.link(gtk_widget_insert_action_group, "gtk_widget_insert_action_group", LIBRARY.GTK);
	Linker.link(gtk_widget_intersect, "gtk_widget_intersect", LIBRARY.GTK);
	Linker.link(gtk_widget_is_ancestor, "gtk_widget_is_ancestor", LIBRARY.GTK);
	Linker.link(gtk_widget_is_composited, "gtk_widget_is_composited", LIBRARY.GTK);
	Linker.link(gtk_widget_is_drawable, "gtk_widget_is_drawable", LIBRARY.GTK);
	Linker.link(gtk_widget_is_focus, "gtk_widget_is_focus", LIBRARY.GTK);
	Linker.link(gtk_widget_is_sensitive, "gtk_widget_is_sensitive", LIBRARY.GTK);
	Linker.link(gtk_widget_is_toplevel, "gtk_widget_is_toplevel", LIBRARY.GTK);
	Linker.link(gtk_widget_is_visible, "gtk_widget_is_visible", LIBRARY.GTK);
	Linker.link(gtk_widget_keynav_failed, "gtk_widget_keynav_failed", LIBRARY.GTK);
	Linker.link(gtk_widget_list_accel_closures, "gtk_widget_list_accel_closures", LIBRARY.GTK);
	Linker.link(gtk_widget_list_action_prefixes, "gtk_widget_list_action_prefixes", LIBRARY.GTK);
	Linker.link(gtk_widget_list_mnemonic_labels, "gtk_widget_list_mnemonic_labels", LIBRARY.GTK);
	Linker.link(gtk_widget_map, "gtk_widget_map", LIBRARY.GTK);
	Linker.link(gtk_widget_mnemonic_activate, "gtk_widget_mnemonic_activate", LIBRARY.GTK);
	Linker.link(gtk_widget_modify_base, "gtk_widget_modify_base", LIBRARY.GTK);
	Linker.link(gtk_widget_modify_bg, "gtk_widget_modify_bg", LIBRARY.GTK);
	Linker.link(gtk_widget_modify_cursor, "gtk_widget_modify_cursor", LIBRARY.GTK);
	Linker.link(gtk_widget_modify_fg, "gtk_widget_modify_fg", LIBRARY.GTK);
	Linker.link(gtk_widget_modify_font, "gtk_widget_modify_font", LIBRARY.GTK);
	Linker.link(gtk_widget_modify_style, "gtk_widget_modify_style", LIBRARY.GTK);
	Linker.link(gtk_widget_modify_text, "gtk_widget_modify_text", LIBRARY.GTK);
	Linker.link(gtk_widget_override_background_color, "gtk_widget_override_background_color", LIBRARY.GTK);
	Linker.link(gtk_widget_override_color, "gtk_widget_override_color", LIBRARY.GTK);
	Linker.link(gtk_widget_override_cursor, "gtk_widget_override_cursor", LIBRARY.GTK);
	Linker.link(gtk_widget_override_font, "gtk_widget_override_font", LIBRARY.GTK);
	Linker.link(gtk_widget_override_symbolic_color, "gtk_widget_override_symbolic_color", LIBRARY.GTK);
	Linker.link(gtk_widget_path, "gtk_widget_path", LIBRARY.GTK);
	Linker.link(gtk_widget_queue_allocate, "gtk_widget_queue_allocate", LIBRARY.GTK);
	Linker.link(gtk_widget_queue_compute_expand, "gtk_widget_queue_compute_expand", LIBRARY.GTK);
	Linker.link(gtk_widget_queue_draw, "gtk_widget_queue_draw", LIBRARY.GTK);
	Linker.link(gtk_widget_queue_draw_area, "gtk_widget_queue_draw_area", LIBRARY.GTK);
	Linker.link(gtk_widget_queue_draw_region, "gtk_widget_queue_draw_region", LIBRARY.GTK);
	Linker.link(gtk_widget_queue_resize, "gtk_widget_queue_resize", LIBRARY.GTK);
	Linker.link(gtk_widget_queue_resize_no_redraw, "gtk_widget_queue_resize_no_redraw", LIBRARY.GTK);
	Linker.link(gtk_widget_realize, "gtk_widget_realize", LIBRARY.GTK);
	Linker.link(gtk_widget_region_intersect, "gtk_widget_region_intersect", LIBRARY.GTK);
	Linker.link(gtk_widget_register_window, "gtk_widget_register_window", LIBRARY.GTK);
	Linker.link(gtk_widget_remove_accelerator, "gtk_widget_remove_accelerator", LIBRARY.GTK);
	Linker.link(gtk_widget_remove_mnemonic_label, "gtk_widget_remove_mnemonic_label", LIBRARY.GTK);
	Linker.link(gtk_widget_remove_tick_callback, "gtk_widget_remove_tick_callback", LIBRARY.GTK);
	Linker.link(gtk_widget_render_icon, "gtk_widget_render_icon", LIBRARY.GTK);
	Linker.link(gtk_widget_render_icon_pixbuf, "gtk_widget_render_icon_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_widget_reparent, "gtk_widget_reparent", LIBRARY.GTK);
	Linker.link(gtk_widget_reset_rc_styles, "gtk_widget_reset_rc_styles", LIBRARY.GTK);
	Linker.link(gtk_widget_reset_style, "gtk_widget_reset_style", LIBRARY.GTK);
	Linker.link(gtk_widget_send_expose, "gtk_widget_send_expose", LIBRARY.GTK);
	Linker.link(gtk_widget_send_focus_change, "gtk_widget_send_focus_change", LIBRARY.GTK);
	Linker.link(gtk_widget_set_accel_path, "gtk_widget_set_accel_path", LIBRARY.GTK);
	Linker.link(gtk_widget_set_allocation, "gtk_widget_set_allocation", LIBRARY.GTK);
	Linker.link(gtk_widget_set_app_paintable, "gtk_widget_set_app_paintable", LIBRARY.GTK);
	Linker.link(gtk_widget_set_can_default, "gtk_widget_set_can_default", LIBRARY.GTK);
	Linker.link(gtk_widget_set_can_focus, "gtk_widget_set_can_focus", LIBRARY.GTK);
	Linker.link(gtk_widget_set_child_visible, "gtk_widget_set_child_visible", LIBRARY.GTK);
	Linker.link(gtk_widget_set_clip, "gtk_widget_set_clip", LIBRARY.GTK);
	Linker.link(gtk_widget_set_composite_name, "gtk_widget_set_composite_name", LIBRARY.GTK);
	Linker.link(gtk_widget_set_device_enabled, "gtk_widget_set_device_enabled", LIBRARY.GTK);
	Linker.link(gtk_widget_set_device_events, "gtk_widget_set_device_events", LIBRARY.GTK);
	Linker.link(gtk_widget_set_direction, "gtk_widget_set_direction", LIBRARY.GTK);
	Linker.link(gtk_widget_set_double_buffered, "gtk_widget_set_double_buffered", LIBRARY.GTK);
	Linker.link(gtk_widget_set_events, "gtk_widget_set_events", LIBRARY.GTK);
	Linker.link(gtk_widget_set_focus_on_click, "gtk_widget_set_focus_on_click", LIBRARY.GTK);
	Linker.link(gtk_widget_set_font_map, "gtk_widget_set_font_map", LIBRARY.GTK);
	Linker.link(gtk_widget_set_font_options, "gtk_widget_set_font_options", LIBRARY.GTK);
	Linker.link(gtk_widget_set_halign, "gtk_widget_set_halign", LIBRARY.GTK);
	Linker.link(gtk_widget_set_has_tooltip, "gtk_widget_set_has_tooltip", LIBRARY.GTK);
	Linker.link(gtk_widget_set_has_window, "gtk_widget_set_has_window", LIBRARY.GTK);
	Linker.link(gtk_widget_set_hexpand, "gtk_widget_set_hexpand", LIBRARY.GTK);
	Linker.link(gtk_widget_set_hexpand_set, "gtk_widget_set_hexpand_set", LIBRARY.GTK);
	Linker.link(gtk_widget_set_mapped, "gtk_widget_set_mapped", LIBRARY.GTK);
	Linker.link(gtk_widget_set_margin_bottom, "gtk_widget_set_margin_bottom", LIBRARY.GTK);
	Linker.link(gtk_widget_set_margin_end, "gtk_widget_set_margin_end", LIBRARY.GTK);
	Linker.link(gtk_widget_set_margin_left, "gtk_widget_set_margin_left", LIBRARY.GTK);
	Linker.link(gtk_widget_set_margin_right, "gtk_widget_set_margin_right", LIBRARY.GTK);
	Linker.link(gtk_widget_set_margin_start, "gtk_widget_set_margin_start", LIBRARY.GTK);
	Linker.link(gtk_widget_set_margin_top, "gtk_widget_set_margin_top", LIBRARY.GTK);
	Linker.link(gtk_widget_set_name, "gtk_widget_set_name", LIBRARY.GTK);
	Linker.link(gtk_widget_set_no_show_all, "gtk_widget_set_no_show_all", LIBRARY.GTK);
	Linker.link(gtk_widget_set_opacity, "gtk_widget_set_opacity", LIBRARY.GTK);
	Linker.link(gtk_widget_set_parent, "gtk_widget_set_parent", LIBRARY.GTK);
	Linker.link(gtk_widget_set_parent_window, "gtk_widget_set_parent_window", LIBRARY.GTK);
	Linker.link(gtk_widget_set_realized, "gtk_widget_set_realized", LIBRARY.GTK);
	Linker.link(gtk_widget_set_receives_default, "gtk_widget_set_receives_default", LIBRARY.GTK);
	Linker.link(gtk_widget_set_redraw_on_allocate, "gtk_widget_set_redraw_on_allocate", LIBRARY.GTK);
	Linker.link(gtk_widget_set_sensitive, "gtk_widget_set_sensitive", LIBRARY.GTK);
	Linker.link(gtk_widget_set_size_request, "gtk_widget_set_size_request", LIBRARY.GTK);
	Linker.link(gtk_widget_set_state, "gtk_widget_set_state", LIBRARY.GTK);
	Linker.link(gtk_widget_set_state_flags, "gtk_widget_set_state_flags", LIBRARY.GTK);
	Linker.link(gtk_widget_set_style, "gtk_widget_set_style", LIBRARY.GTK);
	Linker.link(gtk_widget_set_support_multidevice, "gtk_widget_set_support_multidevice", LIBRARY.GTK);
	Linker.link(gtk_widget_set_tooltip_markup, "gtk_widget_set_tooltip_markup", LIBRARY.GTK);
	Linker.link(gtk_widget_set_tooltip_text, "gtk_widget_set_tooltip_text", LIBRARY.GTK);
	Linker.link(gtk_widget_set_tooltip_window, "gtk_widget_set_tooltip_window", LIBRARY.GTK);
	Linker.link(gtk_widget_set_valign, "gtk_widget_set_valign", LIBRARY.GTK);
	Linker.link(gtk_widget_set_vexpand, "gtk_widget_set_vexpand", LIBRARY.GTK);
	Linker.link(gtk_widget_set_vexpand_set, "gtk_widget_set_vexpand_set", LIBRARY.GTK);
	Linker.link(gtk_widget_set_visible, "gtk_widget_set_visible", LIBRARY.GTK);
	Linker.link(gtk_widget_set_visual, "gtk_widget_set_visual", LIBRARY.GTK);
	Linker.link(gtk_widget_set_window, "gtk_widget_set_window", LIBRARY.GTK);
	Linker.link(gtk_widget_shape_combine_region, "gtk_widget_shape_combine_region", LIBRARY.GTK);
	Linker.link(gtk_widget_show, "gtk_widget_show", LIBRARY.GTK);
	Linker.link(gtk_widget_show_all, "gtk_widget_show_all", LIBRARY.GTK);
	Linker.link(gtk_widget_show_now, "gtk_widget_show_now", LIBRARY.GTK);
	Linker.link(gtk_widget_size_allocate, "gtk_widget_size_allocate", LIBRARY.GTK);
	Linker.link(gtk_widget_size_allocate_with_baseline, "gtk_widget_size_allocate_with_baseline", LIBRARY.GTK);
	Linker.link(gtk_widget_size_request, "gtk_widget_size_request", LIBRARY.GTK);
	Linker.link(gtk_widget_style_attach, "gtk_widget_style_attach", LIBRARY.GTK);
	Linker.link(gtk_widget_style_get, "gtk_widget_style_get", LIBRARY.GTK);
	Linker.link(gtk_widget_style_get_property, "gtk_widget_style_get_property", LIBRARY.GTK);
	Linker.link(gtk_widget_style_get_valist, "gtk_widget_style_get_valist", LIBRARY.GTK);
	Linker.link(gtk_widget_thaw_child_notify, "gtk_widget_thaw_child_notify", LIBRARY.GTK);
	Linker.link(gtk_widget_translate_coordinates, "gtk_widget_translate_coordinates", LIBRARY.GTK);
	Linker.link(gtk_widget_trigger_tooltip_query, "gtk_widget_trigger_tooltip_query", LIBRARY.GTK);
	Linker.link(gtk_widget_unmap, "gtk_widget_unmap", LIBRARY.GTK);
	Linker.link(gtk_widget_unparent, "gtk_widget_unparent", LIBRARY.GTK);
	Linker.link(gtk_widget_unrealize, "gtk_widget_unrealize", LIBRARY.GTK);
	Linker.link(gtk_widget_unregister_window, "gtk_widget_unregister_window", LIBRARY.GTK);
	Linker.link(gtk_widget_unset_state_flags, "gtk_widget_unset_state_flags", LIBRARY.GTK);
	Linker.link(gtk_cairo_should_draw_window, "gtk_cairo_should_draw_window", LIBRARY.GTK);
	Linker.link(gtk_cairo_transform_to_window, "gtk_cairo_transform_to_window", LIBRARY.GTK);
	Linker.link(gtk_distribute_natural_allocation, "gtk_distribute_natural_allocation", LIBRARY.GTK);

	// gtk.WidgetAccessible

	Linker.link(gtk_widget_accessible_get_type, "gtk_widget_accessible_get_type", LIBRARY.GTK);

	// gtk.WidgetClass

	Linker.link(gtk_widget_class_bind_template_callback_full, "gtk_widget_class_bind_template_callback_full", LIBRARY.GTK);
	Linker.link(gtk_widget_class_bind_template_child_full, "gtk_widget_class_bind_template_child_full", LIBRARY.GTK);
	Linker.link(gtk_widget_class_find_style_property, "gtk_widget_class_find_style_property", LIBRARY.GTK);
	Linker.link(gtk_widget_class_get_css_name, "gtk_widget_class_get_css_name", LIBRARY.GTK);
	Linker.link(gtk_widget_class_install_style_property, "gtk_widget_class_install_style_property", LIBRARY.GTK);
	Linker.link(gtk_widget_class_install_style_property_parser, "gtk_widget_class_install_style_property_parser", LIBRARY.GTK);
	Linker.link(gtk_widget_class_list_style_properties, "gtk_widget_class_list_style_properties", LIBRARY.GTK);
	Linker.link(gtk_widget_class_set_accessible_role, "gtk_widget_class_set_accessible_role", LIBRARY.GTK);
	Linker.link(gtk_widget_class_set_accessible_type, "gtk_widget_class_set_accessible_type", LIBRARY.GTK);
	Linker.link(gtk_widget_class_set_connect_func, "gtk_widget_class_set_connect_func", LIBRARY.GTK);
	Linker.link(gtk_widget_class_set_css_name, "gtk_widget_class_set_css_name", LIBRARY.GTK);
	Linker.link(gtk_widget_class_set_template, "gtk_widget_class_set_template", LIBRARY.GTK);
	Linker.link(gtk_widget_class_set_template_from_resource, "gtk_widget_class_set_template_from_resource", LIBRARY.GTK);

	// gtk.WidgetPath

	Linker.link(gtk_widget_path_get_type, "gtk_widget_path_get_type", LIBRARY.GTK);
	Linker.link(gtk_widget_path_new, "gtk_widget_path_new", LIBRARY.GTK);
	Linker.link(gtk_widget_path_append_for_widget, "gtk_widget_path_append_for_widget", LIBRARY.GTK);
	Linker.link(gtk_widget_path_append_type, "gtk_widget_path_append_type", LIBRARY.GTK);
	Linker.link(gtk_widget_path_append_with_siblings, "gtk_widget_path_append_with_siblings", LIBRARY.GTK);
	Linker.link(gtk_widget_path_copy, "gtk_widget_path_copy", LIBRARY.GTK);
	Linker.link(gtk_widget_path_free, "gtk_widget_path_free", LIBRARY.GTK);
	Linker.link(gtk_widget_path_get_object_type, "gtk_widget_path_get_object_type", LIBRARY.GTK);
	Linker.link(gtk_widget_path_has_parent, "gtk_widget_path_has_parent", LIBRARY.GTK);
	Linker.link(gtk_widget_path_is_type, "gtk_widget_path_is_type", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_add_class, "gtk_widget_path_iter_add_class", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_add_region, "gtk_widget_path_iter_add_region", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_clear_classes, "gtk_widget_path_iter_clear_classes", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_clear_regions, "gtk_widget_path_iter_clear_regions", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_get_name, "gtk_widget_path_iter_get_name", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_get_object_name, "gtk_widget_path_iter_get_object_name", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_get_object_type, "gtk_widget_path_iter_get_object_type", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_get_sibling_index, "gtk_widget_path_iter_get_sibling_index", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_get_siblings, "gtk_widget_path_iter_get_siblings", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_get_state, "gtk_widget_path_iter_get_state", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_has_class, "gtk_widget_path_iter_has_class", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_has_name, "gtk_widget_path_iter_has_name", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_has_qclass, "gtk_widget_path_iter_has_qclass", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_has_qname, "gtk_widget_path_iter_has_qname", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_has_qregion, "gtk_widget_path_iter_has_qregion", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_has_region, "gtk_widget_path_iter_has_region", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_list_classes, "gtk_widget_path_iter_list_classes", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_list_regions, "gtk_widget_path_iter_list_regions", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_remove_class, "gtk_widget_path_iter_remove_class", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_remove_region, "gtk_widget_path_iter_remove_region", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_set_name, "gtk_widget_path_iter_set_name", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_set_object_name, "gtk_widget_path_iter_set_object_name", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_set_object_type, "gtk_widget_path_iter_set_object_type", LIBRARY.GTK);
	Linker.link(gtk_widget_path_iter_set_state, "gtk_widget_path_iter_set_state", LIBRARY.GTK);
	Linker.link(gtk_widget_path_length, "gtk_widget_path_length", LIBRARY.GTK);
	Linker.link(gtk_widget_path_prepend_type, "gtk_widget_path_prepend_type", LIBRARY.GTK);
	Linker.link(gtk_widget_path_ref, "gtk_widget_path_ref", LIBRARY.GTK);
	Linker.link(gtk_widget_path_to_string, "gtk_widget_path_to_string", LIBRARY.GTK);
	Linker.link(gtk_widget_path_unref, "gtk_widget_path_unref", LIBRARY.GTK);

	// gtk.Window

	Linker.link(gtk_window_get_type, "gtk_window_get_type", LIBRARY.GTK);
	Linker.link(gtk_window_new, "gtk_window_new", LIBRARY.GTK);
	Linker.link(gtk_window_get_default_icon_list, "gtk_window_get_default_icon_list", LIBRARY.GTK);
	Linker.link(gtk_window_get_default_icon_name, "gtk_window_get_default_icon_name", LIBRARY.GTK);
	Linker.link(gtk_window_list_toplevels, "gtk_window_list_toplevels", LIBRARY.GTK);
	Linker.link(gtk_window_set_auto_startup_notification, "gtk_window_set_auto_startup_notification", LIBRARY.GTK);
	Linker.link(gtk_window_set_default_icon, "gtk_window_set_default_icon", LIBRARY.GTK);
	Linker.link(gtk_window_set_default_icon_from_file, "gtk_window_set_default_icon_from_file", LIBRARY.GTK);
	Linker.link(gtk_window_set_default_icon_list, "gtk_window_set_default_icon_list", LIBRARY.GTK);
	Linker.link(gtk_window_set_default_icon_name, "gtk_window_set_default_icon_name", LIBRARY.GTK);
	Linker.link(gtk_window_set_interactive_debugging, "gtk_window_set_interactive_debugging", LIBRARY.GTK);
	Linker.link(gtk_window_activate_default, "gtk_window_activate_default", LIBRARY.GTK);
	Linker.link(gtk_window_activate_focus, "gtk_window_activate_focus", LIBRARY.GTK);
	Linker.link(gtk_window_activate_key, "gtk_window_activate_key", LIBRARY.GTK);
	Linker.link(gtk_window_add_accel_group, "gtk_window_add_accel_group", LIBRARY.GTK);
	Linker.link(gtk_window_add_mnemonic, "gtk_window_add_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_window_begin_move_drag, "gtk_window_begin_move_drag", LIBRARY.GTK);
	Linker.link(gtk_window_begin_resize_drag, "gtk_window_begin_resize_drag", LIBRARY.GTK);
	Linker.link(gtk_window_close, "gtk_window_close", LIBRARY.GTK);
	Linker.link(gtk_window_deiconify, "gtk_window_deiconify", LIBRARY.GTK);
	Linker.link(gtk_window_fullscreen, "gtk_window_fullscreen", LIBRARY.GTK);
	Linker.link(gtk_window_fullscreen_on_monitor, "gtk_window_fullscreen_on_monitor", LIBRARY.GTK);
	Linker.link(gtk_window_get_accept_focus, "gtk_window_get_accept_focus", LIBRARY.GTK);
	Linker.link(gtk_window_get_application, "gtk_window_get_application", LIBRARY.GTK);
	Linker.link(gtk_window_get_attached_to, "gtk_window_get_attached_to", LIBRARY.GTK);
	Linker.link(gtk_window_get_decorated, "gtk_window_get_decorated", LIBRARY.GTK);
	Linker.link(gtk_window_get_default_size, "gtk_window_get_default_size", LIBRARY.GTK);
	Linker.link(gtk_window_get_default_widget, "gtk_window_get_default_widget", LIBRARY.GTK);
	Linker.link(gtk_window_get_deletable, "gtk_window_get_deletable", LIBRARY.GTK);
	Linker.link(gtk_window_get_destroy_with_parent, "gtk_window_get_destroy_with_parent", LIBRARY.GTK);
	Linker.link(gtk_window_get_focus, "gtk_window_get_focus", LIBRARY.GTK);
	Linker.link(gtk_window_get_focus_on_map, "gtk_window_get_focus_on_map", LIBRARY.GTK);
	Linker.link(gtk_window_get_focus_visible, "gtk_window_get_focus_visible", LIBRARY.GTK);
	Linker.link(gtk_window_get_gravity, "gtk_window_get_gravity", LIBRARY.GTK);
	Linker.link(gtk_window_get_group, "gtk_window_get_group", LIBRARY.GTK);
	Linker.link(gtk_window_get_has_resize_grip, "gtk_window_get_has_resize_grip", LIBRARY.GTK);
	Linker.link(gtk_window_get_hide_titlebar_when_maximized, "gtk_window_get_hide_titlebar_when_maximized", LIBRARY.GTK);
	Linker.link(gtk_window_get_icon, "gtk_window_get_icon", LIBRARY.GTK);
	Linker.link(gtk_window_get_icon_list, "gtk_window_get_icon_list", LIBRARY.GTK);
	Linker.link(gtk_window_get_icon_name, "gtk_window_get_icon_name", LIBRARY.GTK);
	Linker.link(gtk_window_get_mnemonic_modifier, "gtk_window_get_mnemonic_modifier", LIBRARY.GTK);
	Linker.link(gtk_window_get_mnemonics_visible, "gtk_window_get_mnemonics_visible", LIBRARY.GTK);
	Linker.link(gtk_window_get_modal, "gtk_window_get_modal", LIBRARY.GTK);
	Linker.link(gtk_window_get_opacity, "gtk_window_get_opacity", LIBRARY.GTK);
	Linker.link(gtk_window_get_position, "gtk_window_get_position", LIBRARY.GTK);
	Linker.link(gtk_window_get_resizable, "gtk_window_get_resizable", LIBRARY.GTK);
	Linker.link(gtk_window_get_resize_grip_area, "gtk_window_get_resize_grip_area", LIBRARY.GTK);
	Linker.link(gtk_window_get_role, "gtk_window_get_role", LIBRARY.GTK);
	Linker.link(gtk_window_get_screen, "gtk_window_get_screen", LIBRARY.GTK);
	Linker.link(gtk_window_get_size, "gtk_window_get_size", LIBRARY.GTK);
	Linker.link(gtk_window_get_skip_pager_hint, "gtk_window_get_skip_pager_hint", LIBRARY.GTK);
	Linker.link(gtk_window_get_skip_taskbar_hint, "gtk_window_get_skip_taskbar_hint", LIBRARY.GTK);
	Linker.link(gtk_window_get_title, "gtk_window_get_title", LIBRARY.GTK);
	Linker.link(gtk_window_get_titlebar, "gtk_window_get_titlebar", LIBRARY.GTK);
	Linker.link(gtk_window_get_transient_for, "gtk_window_get_transient_for", LIBRARY.GTK);
	Linker.link(gtk_window_get_type_hint, "gtk_window_get_type_hint", LIBRARY.GTK);
	Linker.link(gtk_window_get_urgency_hint, "gtk_window_get_urgency_hint", LIBRARY.GTK);
	Linker.link(gtk_window_get_window_type, "gtk_window_get_window_type", LIBRARY.GTK);
	Linker.link(gtk_window_has_group, "gtk_window_has_group", LIBRARY.GTK);
	Linker.link(gtk_window_has_toplevel_focus, "gtk_window_has_toplevel_focus", LIBRARY.GTK);
	Linker.link(gtk_window_iconify, "gtk_window_iconify", LIBRARY.GTK);
	Linker.link(gtk_window_is_active, "gtk_window_is_active", LIBRARY.GTK);
	Linker.link(gtk_window_is_maximized, "gtk_window_is_maximized", LIBRARY.GTK);
	Linker.link(gtk_window_maximize, "gtk_window_maximize", LIBRARY.GTK);
	Linker.link(gtk_window_mnemonic_activate, "gtk_window_mnemonic_activate", LIBRARY.GTK);
	Linker.link(gtk_window_move, "gtk_window_move", LIBRARY.GTK);
	Linker.link(gtk_window_parse_geometry, "gtk_window_parse_geometry", LIBRARY.GTK);
	Linker.link(gtk_window_present, "gtk_window_present", LIBRARY.GTK);
	Linker.link(gtk_window_present_with_time, "gtk_window_present_with_time", LIBRARY.GTK);
	Linker.link(gtk_window_propagate_key_event, "gtk_window_propagate_key_event", LIBRARY.GTK);
	Linker.link(gtk_window_remove_accel_group, "gtk_window_remove_accel_group", LIBRARY.GTK);
	Linker.link(gtk_window_remove_mnemonic, "gtk_window_remove_mnemonic", LIBRARY.GTK);
	Linker.link(gtk_window_reshow_with_initial_size, "gtk_window_reshow_with_initial_size", LIBRARY.GTK);
	Linker.link(gtk_window_resize, "gtk_window_resize", LIBRARY.GTK);
	Linker.link(gtk_window_resize_grip_is_visible, "gtk_window_resize_grip_is_visible", LIBRARY.GTK);
	Linker.link(gtk_window_resize_to_geometry, "gtk_window_resize_to_geometry", LIBRARY.GTK);
	Linker.link(gtk_window_set_accept_focus, "gtk_window_set_accept_focus", LIBRARY.GTK);
	Linker.link(gtk_window_set_application, "gtk_window_set_application", LIBRARY.GTK);
	Linker.link(gtk_window_set_attached_to, "gtk_window_set_attached_to", LIBRARY.GTK);
	Linker.link(gtk_window_set_decorated, "gtk_window_set_decorated", LIBRARY.GTK);
	Linker.link(gtk_window_set_default, "gtk_window_set_default", LIBRARY.GTK);
	Linker.link(gtk_window_set_default_geometry, "gtk_window_set_default_geometry", LIBRARY.GTK);
	Linker.link(gtk_window_set_default_size, "gtk_window_set_default_size", LIBRARY.GTK);
	Linker.link(gtk_window_set_deletable, "gtk_window_set_deletable", LIBRARY.GTK);
	Linker.link(gtk_window_set_destroy_with_parent, "gtk_window_set_destroy_with_parent", LIBRARY.GTK);
	Linker.link(gtk_window_set_focus, "gtk_window_set_focus", LIBRARY.GTK);
	Linker.link(gtk_window_set_focus_on_map, "gtk_window_set_focus_on_map", LIBRARY.GTK);
	Linker.link(gtk_window_set_focus_visible, "gtk_window_set_focus_visible", LIBRARY.GTK);
	Linker.link(gtk_window_set_geometry_hints, "gtk_window_set_geometry_hints", LIBRARY.GTK);
	Linker.link(gtk_window_set_gravity, "gtk_window_set_gravity", LIBRARY.GTK);
	Linker.link(gtk_window_set_has_resize_grip, "gtk_window_set_has_resize_grip", LIBRARY.GTK);
	Linker.link(gtk_window_set_has_user_ref_count, "gtk_window_set_has_user_ref_count", LIBRARY.GTK);
	Linker.link(gtk_window_set_hide_titlebar_when_maximized, "gtk_window_set_hide_titlebar_when_maximized", LIBRARY.GTK);
	Linker.link(gtk_window_set_icon, "gtk_window_set_icon", LIBRARY.GTK);
	Linker.link(gtk_window_set_icon_from_file, "gtk_window_set_icon_from_file", LIBRARY.GTK);
	Linker.link(gtk_window_set_icon_list, "gtk_window_set_icon_list", LIBRARY.GTK);
	Linker.link(gtk_window_set_icon_name, "gtk_window_set_icon_name", LIBRARY.GTK);
	Linker.link(gtk_window_set_keep_above, "gtk_window_set_keep_above", LIBRARY.GTK);
	Linker.link(gtk_window_set_keep_below, "gtk_window_set_keep_below", LIBRARY.GTK);
	Linker.link(gtk_window_set_mnemonic_modifier, "gtk_window_set_mnemonic_modifier", LIBRARY.GTK);
	Linker.link(gtk_window_set_mnemonics_visible, "gtk_window_set_mnemonics_visible", LIBRARY.GTK);
	Linker.link(gtk_window_set_modal, "gtk_window_set_modal", LIBRARY.GTK);
	Linker.link(gtk_window_set_opacity, "gtk_window_set_opacity", LIBRARY.GTK);
	Linker.link(gtk_window_set_position, "gtk_window_set_position", LIBRARY.GTK);
	Linker.link(gtk_window_set_resizable, "gtk_window_set_resizable", LIBRARY.GTK);
	Linker.link(gtk_window_set_role, "gtk_window_set_role", LIBRARY.GTK);
	Linker.link(gtk_window_set_screen, "gtk_window_set_screen", LIBRARY.GTK);
	Linker.link(gtk_window_set_skip_pager_hint, "gtk_window_set_skip_pager_hint", LIBRARY.GTK);
	Linker.link(gtk_window_set_skip_taskbar_hint, "gtk_window_set_skip_taskbar_hint", LIBRARY.GTK);
	Linker.link(gtk_window_set_startup_id, "gtk_window_set_startup_id", LIBRARY.GTK);
	Linker.link(gtk_window_set_title, "gtk_window_set_title", LIBRARY.GTK);
	Linker.link(gtk_window_set_titlebar, "gtk_window_set_titlebar", LIBRARY.GTK);
	Linker.link(gtk_window_set_transient_for, "gtk_window_set_transient_for", LIBRARY.GTK);
	Linker.link(gtk_window_set_type_hint, "gtk_window_set_type_hint", LIBRARY.GTK);
	Linker.link(gtk_window_set_urgency_hint, "gtk_window_set_urgency_hint", LIBRARY.GTK);
	Linker.link(gtk_window_set_wmclass, "gtk_window_set_wmclass", LIBRARY.GTK);
	Linker.link(gtk_window_stick, "gtk_window_stick", LIBRARY.GTK);
	Linker.link(gtk_window_unfullscreen, "gtk_window_unfullscreen", LIBRARY.GTK);
	Linker.link(gtk_window_unmaximize, "gtk_window_unmaximize", LIBRARY.GTK);
	Linker.link(gtk_window_unstick, "gtk_window_unstick", LIBRARY.GTK);
	Linker.link(gtk_show_uri_on_window, "gtk_show_uri_on_window", LIBRARY.GTK);

	// gtk.WindowAccessible

	Linker.link(gtk_window_accessible_get_type, "gtk_window_accessible_get_type", LIBRARY.GTK);

	// gtk.WindowGroup

	Linker.link(gtk_window_group_get_type, "gtk_window_group_get_type", LIBRARY.GTK);
	Linker.link(gtk_window_group_new, "gtk_window_group_new", LIBRARY.GTK);
	Linker.link(gtk_window_group_add_window, "gtk_window_group_add_window", LIBRARY.GTK);
	Linker.link(gtk_window_group_get_current_device_grab, "gtk_window_group_get_current_device_grab", LIBRARY.GTK);
	Linker.link(gtk_window_group_get_current_grab, "gtk_window_group_get_current_grab", LIBRARY.GTK);
	Linker.link(gtk_window_group_list_windows, "gtk_window_group_list_windows", LIBRARY.GTK);
	Linker.link(gtk_window_group_remove_window, "gtk_window_group_remove_window", LIBRARY.GTK);

	// gtk.Main

	Linker.link(gtk_device_grab_add, "gtk_device_grab_add", LIBRARY.GTK);
	Linker.link(gtk_device_grab_remove, "gtk_device_grab_remove", LIBRARY.GTK);
	Linker.link(gtk_disable_setlocale, "gtk_disable_setlocale", LIBRARY.GTK);
	Linker.link(gtk_events_pending, "gtk_events_pending", LIBRARY.GTK);
	Linker.link(gtk_get_current_event, "gtk_get_current_event", LIBRARY.GTK);
	Linker.link(gtk_get_current_event_device, "gtk_get_current_event_device", LIBRARY.GTK);
	Linker.link(gtk_get_current_event_state, "gtk_get_current_event_state", LIBRARY.GTK);
	Linker.link(gtk_get_current_event_time, "gtk_get_current_event_time", LIBRARY.GTK);
	Linker.link(gtk_get_debug_flags, "gtk_get_debug_flags", LIBRARY.GTK);
	Linker.link(gtk_get_default_language, "gtk_get_default_language", LIBRARY.GTK);
	Linker.link(gtk_get_event_widget, "gtk_get_event_widget", LIBRARY.GTK);
	Linker.link(gtk_get_locale_direction, "gtk_get_locale_direction", LIBRARY.GTK);
	Linker.link(gtk_get_option_group, "gtk_get_option_group", LIBRARY.GTK);
	Linker.link(gtk_grab_get_current, "gtk_grab_get_current", LIBRARY.GTK);
	Linker.link(gtk_init, "gtk_init", LIBRARY.GTK);
	Linker.link(gtk_init_check, "gtk_init_check", LIBRARY.GTK);
	Linker.link(gtk_init_with_args, "gtk_init_with_args", LIBRARY.GTK);
	Linker.link(gtk_key_snooper_install, "gtk_key_snooper_install", LIBRARY.GTK);
	Linker.link(gtk_key_snooper_remove, "gtk_key_snooper_remove", LIBRARY.GTK);
	Linker.link(gtk_main, "gtk_main", LIBRARY.GTK);
	Linker.link(gtk_main_do_event, "gtk_main_do_event", LIBRARY.GTK);
	Linker.link(gtk_main_iteration, "gtk_main_iteration", LIBRARY.GTK);
	Linker.link(gtk_main_iteration_do, "gtk_main_iteration_do", LIBRARY.GTK);
	Linker.link(gtk_main_level, "gtk_main_level", LIBRARY.GTK);
	Linker.link(gtk_main_quit, "gtk_main_quit", LIBRARY.GTK);
	Linker.link(gtk_parse_args, "gtk_parse_args", LIBRARY.GTK);
	Linker.link(gtk_propagate_event, "gtk_propagate_event", LIBRARY.GTK);
	Linker.link(gtk_set_debug_flags, "gtk_set_debug_flags", LIBRARY.GTK);

	// gtk.Testing

	Linker.link(gtk_test_create_simple_window, "gtk_test_create_simple_window", LIBRARY.GTK);
	Linker.link(gtk_test_create_widget, "gtk_test_create_widget", LIBRARY.GTK);
	Linker.link(gtk_test_display_button_window, "gtk_test_display_button_window", LIBRARY.GTK);
	Linker.link(gtk_test_find_label, "gtk_test_find_label", LIBRARY.GTK);
	Linker.link(gtk_test_find_sibling, "gtk_test_find_sibling", LIBRARY.GTK);
	Linker.link(gtk_test_find_widget, "gtk_test_find_widget", LIBRARY.GTK);
	Linker.link(gtk_test_init, "gtk_test_init", LIBRARY.GTK);
	Linker.link(gtk_test_list_all_types, "gtk_test_list_all_types", LIBRARY.GTK);
	Linker.link(gtk_test_register_all_types, "gtk_test_register_all_types", LIBRARY.GTK);
	Linker.link(gtk_test_slider_get_value, "gtk_test_slider_get_value", LIBRARY.GTK);
	Linker.link(gtk_test_slider_set_perc, "gtk_test_slider_set_perc", LIBRARY.GTK);
	Linker.link(gtk_test_spin_button_click, "gtk_test_spin_button_click", LIBRARY.GTK);
	Linker.link(gtk_test_text_get, "gtk_test_text_get", LIBRARY.GTK);
	Linker.link(gtk_test_text_set, "gtk_test_text_set", LIBRARY.GTK);
	Linker.link(gtk_test_widget_click, "gtk_test_widget_click", LIBRARY.GTK);
	Linker.link(gtk_test_widget_send_key, "gtk_test_widget_send_key", LIBRARY.GTK);
	Linker.link(gtk_test_widget_wait_for_draw, "gtk_test_widget_wait_for_draw", LIBRARY.GTK);

	// gtk.DragAndDrop

	Linker.link(gtk_drag_cancel, "gtk_drag_cancel", LIBRARY.GTK);
	Linker.link(gtk_drag_finish, "gtk_drag_finish", LIBRARY.GTK);
	Linker.link(gtk_drag_get_source_widget, "gtk_drag_get_source_widget", LIBRARY.GTK);
	Linker.link(gtk_drag_set_icon_default, "gtk_drag_set_icon_default", LIBRARY.GTK);
	Linker.link(gtk_drag_set_icon_gicon, "gtk_drag_set_icon_gicon", LIBRARY.GTK);
	Linker.link(gtk_drag_set_icon_name, "gtk_drag_set_icon_name", LIBRARY.GTK);
	Linker.link(gtk_drag_set_icon_pixbuf, "gtk_drag_set_icon_pixbuf", LIBRARY.GTK);
	Linker.link(gtk_drag_set_icon_stock, "gtk_drag_set_icon_stock", LIBRARY.GTK);
	Linker.link(gtk_drag_set_icon_surface, "gtk_drag_set_icon_surface", LIBRARY.GTK);
	Linker.link(gtk_drag_set_icon_widget, "gtk_drag_set_icon_widget", LIBRARY.GTK);
	Linker.link(gtk_draw_insertion_cursor, "gtk_draw_insertion_cursor", LIBRARY.GTK);

	// gtk.IconSize

	Linker.link(gtk_icon_size_from_name, "gtk_icon_size_from_name", LIBRARY.GTK);
	Linker.link(gtk_icon_size_get_name, "gtk_icon_size_get_name", LIBRARY.GTK);
	Linker.link(gtk_icon_size_lookup, "gtk_icon_size_lookup", LIBRARY.GTK);
	Linker.link(gtk_icon_size_lookup_for_settings, "gtk_icon_size_lookup_for_settings", LIBRARY.GTK);
	Linker.link(gtk_icon_size_register, "gtk_icon_size_register", LIBRARY.GTK);
	Linker.link(gtk_icon_size_register_alias, "gtk_icon_size_register_alias", LIBRARY.GTK);

	// gtk.Version

	Linker.link(gtk_check_version, "gtk_check_version", LIBRARY.GTK);
	Linker.link(gtk_get_binary_age, "gtk_get_binary_age", LIBRARY.GTK);
	Linker.link(gtk_get_interface_age, "gtk_get_interface_age", LIBRARY.GTK);
	Linker.link(gtk_get_major_version, "gtk_get_major_version", LIBRARY.GTK);
	Linker.link(gtk_get_micro_version, "gtk_get_micro_version", LIBRARY.GTK);
	Linker.link(gtk_get_minor_version, "gtk_get_minor_version", LIBRARY.GTK);
}

__gshared extern(C)
{

	// gtk.AboutDialog

	GType function() c_gtk_about_dialog_get_type;
	GtkWidget* function() c_gtk_about_dialog_new;
	void function(GtkAboutDialog* about, const(char)* sectionName, char** people) c_gtk_about_dialog_add_credit_section;
	char** function(GtkAboutDialog* about) c_gtk_about_dialog_get_artists;
	char** function(GtkAboutDialog* about) c_gtk_about_dialog_get_authors;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_comments;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_copyright;
	char** function(GtkAboutDialog* about) c_gtk_about_dialog_get_documenters;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_license;
	GtkLicense function(GtkAboutDialog* about) c_gtk_about_dialog_get_license_type;
	GdkPixbuf* function(GtkAboutDialog* about) c_gtk_about_dialog_get_logo;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_logo_icon_name;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_program_name;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_translator_credits;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_version;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_website;
	const(char)* function(GtkAboutDialog* about) c_gtk_about_dialog_get_website_label;
	int function(GtkAboutDialog* about) c_gtk_about_dialog_get_wrap_license;
	void function(GtkAboutDialog* about, char** artists) c_gtk_about_dialog_set_artists;
	void function(GtkAboutDialog* about, char** authors) c_gtk_about_dialog_set_authors;
	void function(GtkAboutDialog* about, const(char)* comments) c_gtk_about_dialog_set_comments;
	void function(GtkAboutDialog* about, const(char)* copyright) c_gtk_about_dialog_set_copyright;
	void function(GtkAboutDialog* about, char** documenters) c_gtk_about_dialog_set_documenters;
	void function(GtkAboutDialog* about, const(char)* license) c_gtk_about_dialog_set_license;
	void function(GtkAboutDialog* about, GtkLicense licenseType) c_gtk_about_dialog_set_license_type;
	void function(GtkAboutDialog* about, GdkPixbuf* logo) c_gtk_about_dialog_set_logo;
	void function(GtkAboutDialog* about, const(char)* iconName) c_gtk_about_dialog_set_logo_icon_name;
	void function(GtkAboutDialog* about, const(char)* name) c_gtk_about_dialog_set_program_name;
	void function(GtkAboutDialog* about, const(char)* translatorCredits) c_gtk_about_dialog_set_translator_credits;
	void function(GtkAboutDialog* about, const(char)* versio) c_gtk_about_dialog_set_version;
	void function(GtkAboutDialog* about, const(char)* website) c_gtk_about_dialog_set_website;
	void function(GtkAboutDialog* about, const(char)* websiteLabel) c_gtk_about_dialog_set_website_label;
	void function(GtkAboutDialog* about, int wrapLicense) c_gtk_about_dialog_set_wrap_license;
	void function(GtkWindow* parent, const(char)* firstPropertyName, ... ) c_gtk_show_about_dialog;

	// gtk.AccelGroup

	GType function() c_gtk_accel_group_get_type;
	GtkAccelGroup* function() c_gtk_accel_group_new;
	GtkAccelGroup* function(GClosure* closure) c_gtk_accel_group_from_accel_closure;
	int function(GtkAccelGroup* accelGroup, GQuark accelQuark, GObject* acceleratable, uint accelKey, GdkModifierType accelMods) c_gtk_accel_group_activate;
	void function(GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods, GtkAccelFlags accelFlags, GClosure* closure) c_gtk_accel_group_connect;
	void function(GtkAccelGroup* accelGroup, const(char)* accelPath, GClosure* closure) c_gtk_accel_group_connect_by_path;
	int function(GtkAccelGroup* accelGroup, GClosure* closure) c_gtk_accel_group_disconnect;
	int function(GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods) c_gtk_accel_group_disconnect_key;
	GtkAccelKey* function(GtkAccelGroup* accelGroup, GtkAccelGroupFindFunc findFunc, void* data) c_gtk_accel_group_find;
	int function(GtkAccelGroup* accelGroup) c_gtk_accel_group_get_is_locked;
	GdkModifierType function(GtkAccelGroup* accelGroup) c_gtk_accel_group_get_modifier_mask;
	void function(GtkAccelGroup* accelGroup) c_gtk_accel_group_lock;
	GtkAccelGroupEntry* function(GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods, uint* nEntries) c_gtk_accel_group_query;
	void function(GtkAccelGroup* accelGroup) c_gtk_accel_group_unlock;
	int function(GObject* object, uint accelKey, GdkModifierType accelMods) c_gtk_accel_groups_activate;
	GSList* function(GObject* object) c_gtk_accel_groups_from_object;
	GdkModifierType function() c_gtk_accelerator_get_default_mod_mask;
	char* function(uint acceleratorKey, GdkModifierType acceleratorMods) c_gtk_accelerator_get_label;
	char* function(GdkDisplay* display, uint acceleratorKey, uint keycode, GdkModifierType acceleratorMods) c_gtk_accelerator_get_label_with_keycode;
	char* function(uint acceleratorKey, GdkModifierType acceleratorMods) c_gtk_accelerator_name;
	char* function(GdkDisplay* display, uint acceleratorKey, uint keycode, GdkModifierType acceleratorMods) c_gtk_accelerator_name_with_keycode;
	void function(const(char)* accelerator, uint* acceleratorKey, GdkModifierType* acceleratorMods) c_gtk_accelerator_parse;
	void function(const(char)* accelerator, uint* acceleratorKey, uint** acceleratorCodes, GdkModifierType* acceleratorMods) c_gtk_accelerator_parse_with_keycode;
	void function(GdkModifierType defaultModMask) c_gtk_accelerator_set_default_mod_mask;
	int function(uint keyval, GdkModifierType modifiers) c_gtk_accelerator_valid;

	// gtk.AccelLabel

	GType function() c_gtk_accel_label_get_type;
	GtkWidget* function(const(char)* str) c_gtk_accel_label_new;
	void function(GtkAccelLabel* accelLabel, uint* acceleratorKey, GdkModifierType* acceleratorMods) c_gtk_accel_label_get_accel;
	GtkWidget* function(GtkAccelLabel* accelLabel) c_gtk_accel_label_get_accel_widget;
	uint function(GtkAccelLabel* accelLabel) c_gtk_accel_label_get_accel_width;
	int function(GtkAccelLabel* accelLabel) c_gtk_accel_label_refetch;
	void function(GtkAccelLabel* accelLabel, uint acceleratorKey, GdkModifierType acceleratorMods) c_gtk_accel_label_set_accel;
	void function(GtkAccelLabel* accelLabel, GClosure* accelClosure) c_gtk_accel_label_set_accel_closure;
	void function(GtkAccelLabel* accelLabel, GtkWidget* accelWidget) c_gtk_accel_label_set_accel_widget;

	// gtk.AccelMap

	GType function() c_gtk_accel_map_get_type;
	void function(const(char)* accelPath, uint accelKey, GdkModifierType accelMods) c_gtk_accel_map_add_entry;
	void function(const(char)* filterPattern) c_gtk_accel_map_add_filter;
	int function(const(char)* accelPath, uint accelKey, GdkModifierType accelMods, int replace) c_gtk_accel_map_change_entry;
	void function(void* data, GtkAccelMapForeach foreachFunc) c_gtk_accel_map_foreach;
	void function(void* data, GtkAccelMapForeach foreachFunc) c_gtk_accel_map_foreach_unfiltered;
	GtkAccelMap* function() c_gtk_accel_map_get;
	void function(char* fileName) c_gtk_accel_map_load;
	void function(int fd) c_gtk_accel_map_load_fd;
	void function(GScanner* scanner) c_gtk_accel_map_load_scanner;
	void function(const(char)* accelPath) c_gtk_accel_map_lock_path;
	int function(const(char)* accelPath, GtkAccelKey* key) c_gtk_accel_map_lookup_entry;
	void function(char* fileName) c_gtk_accel_map_save;
	void function(int fd) c_gtk_accel_map_save_fd;
	void function(const(char)* accelPath) c_gtk_accel_map_unlock_path;

	// gtk.Accessible

	GType function() c_gtk_accessible_get_type;
	void function(GtkAccessible* accessible) c_gtk_accessible_connect_widget_destroyed;
	GtkWidget* function(GtkAccessible* accessible) c_gtk_accessible_get_widget;
	void function(GtkAccessible* accessible, GtkWidget* widget) c_gtk_accessible_set_widget;

	// gtk.Action

	GType function() c_gtk_action_get_type;
	GtkAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId) c_gtk_action_new;
	void function(GtkAction* action) c_gtk_action_activate;
	void function(GtkAction* action) c_gtk_action_block_activate;
	void function(GtkAction* action) c_gtk_action_connect_accelerator;
	GtkWidget* function(GtkAction* action, GtkIconSize iconSize) c_gtk_action_create_icon;
	GtkWidget* function(GtkAction* action) c_gtk_action_create_menu;
	GtkWidget* function(GtkAction* action) c_gtk_action_create_menu_item;
	GtkWidget* function(GtkAction* action) c_gtk_action_create_tool_item;
	void function(GtkAction* action) c_gtk_action_disconnect_accelerator;
	GClosure* function(GtkAction* action) c_gtk_action_get_accel_closure;
	const(char)* function(GtkAction* action) c_gtk_action_get_accel_path;
	int function(GtkAction* action) c_gtk_action_get_always_show_image;
	GIcon* function(GtkAction* action) c_gtk_action_get_gicon;
	const(char)* function(GtkAction* action) c_gtk_action_get_icon_name;
	int function(GtkAction* action) c_gtk_action_get_is_important;
	const(char)* function(GtkAction* action) c_gtk_action_get_label;
	const(char)* function(GtkAction* action) c_gtk_action_get_name;
	GSList* function(GtkAction* action) c_gtk_action_get_proxies;
	int function(GtkAction* action) c_gtk_action_get_sensitive;
	const(char)* function(GtkAction* action) c_gtk_action_get_short_label;
	const(char)* function(GtkAction* action) c_gtk_action_get_stock_id;
	const(char)* function(GtkAction* action) c_gtk_action_get_tooltip;
	int function(GtkAction* action) c_gtk_action_get_visible;
	int function(GtkAction* action) c_gtk_action_get_visible_horizontal;
	int function(GtkAction* action) c_gtk_action_get_visible_vertical;
	int function(GtkAction* action) c_gtk_action_is_sensitive;
	int function(GtkAction* action) c_gtk_action_is_visible;
	void function(GtkAction* action, GtkAccelGroup* accelGroup) c_gtk_action_set_accel_group;
	void function(GtkAction* action, const(char)* accelPath) c_gtk_action_set_accel_path;
	void function(GtkAction* action, int alwaysShow) c_gtk_action_set_always_show_image;
	void function(GtkAction* action, GIcon* icon) c_gtk_action_set_gicon;
	void function(GtkAction* action, const(char)* iconName) c_gtk_action_set_icon_name;
	void function(GtkAction* action, int isImportant) c_gtk_action_set_is_important;
	void function(GtkAction* action, const(char)* label) c_gtk_action_set_label;
	void function(GtkAction* action, int sensitive) c_gtk_action_set_sensitive;
	void function(GtkAction* action, const(char)* shortLabel) c_gtk_action_set_short_label;
	void function(GtkAction* action, const(char)* stockId) c_gtk_action_set_stock_id;
	void function(GtkAction* action, const(char)* tooltip) c_gtk_action_set_tooltip;
	void function(GtkAction* action, int visible) c_gtk_action_set_visible;
	void function(GtkAction* action, int visibleHorizontal) c_gtk_action_set_visible_horizontal;
	void function(GtkAction* action, int visibleVertical) c_gtk_action_set_visible_vertical;
	void function(GtkAction* action) c_gtk_action_unblock_activate;

	// gtk.ActionBar

	GType function() c_gtk_action_bar_get_type;
	GtkWidget* function() c_gtk_action_bar_new;
	GtkWidget* function(GtkActionBar* actionBar) c_gtk_action_bar_get_center_widget;
	void function(GtkActionBar* actionBar, GtkWidget* child) c_gtk_action_bar_pack_end;
	void function(GtkActionBar* actionBar, GtkWidget* child) c_gtk_action_bar_pack_start;
	void function(GtkActionBar* actionBar, GtkWidget* centerWidget) c_gtk_action_bar_set_center_widget;

	// gtk.ActionGroup

	GType function() c_gtk_action_group_get_type;
	GtkActionGroup* function(const(char)* name) c_gtk_action_group_new;
	void function(GtkActionGroup* actionGroup, GtkAction* action) c_gtk_action_group_add_action;
	void function(GtkActionGroup* actionGroup, GtkAction* action, const(char)* accelerator) c_gtk_action_group_add_action_with_accel;
	void function(GtkActionGroup* actionGroup, GtkActionEntry* entries, uint nEntries, void* userData) c_gtk_action_group_add_actions;
	void function(GtkActionGroup* actionGroup, GtkActionEntry* entries, uint nEntries, void* userData, GDestroyNotify destroy) c_gtk_action_group_add_actions_full;
	void function(GtkActionGroup* actionGroup, GtkRadioActionEntry* entries, uint nEntries, int value, GCallback onChange, void* userData) c_gtk_action_group_add_radio_actions;
	void function(GtkActionGroup* actionGroup, GtkRadioActionEntry* entries, uint nEntries, int value, GCallback onChange, void* userData, GDestroyNotify destroy) c_gtk_action_group_add_radio_actions_full;
	void function(GtkActionGroup* actionGroup, GtkToggleActionEntry* entries, uint nEntries, void* userData) c_gtk_action_group_add_toggle_actions;
	void function(GtkActionGroup* actionGroup, GtkToggleActionEntry* entries, uint nEntries, void* userData, GDestroyNotify destroy) c_gtk_action_group_add_toggle_actions_full;
	GtkAccelGroup* function(GtkActionGroup* actionGroup) c_gtk_action_group_get_accel_group;
	GtkAction* function(GtkActionGroup* actionGroup, const(char)* actionName) c_gtk_action_group_get_action;
	const(char)* function(GtkActionGroup* actionGroup) c_gtk_action_group_get_name;
	int function(GtkActionGroup* actionGroup) c_gtk_action_group_get_sensitive;
	int function(GtkActionGroup* actionGroup) c_gtk_action_group_get_visible;
	GList* function(GtkActionGroup* actionGroup) c_gtk_action_group_list_actions;
	void function(GtkActionGroup* actionGroup, GtkAction* action) c_gtk_action_group_remove_action;
	void function(GtkActionGroup* actionGroup, GtkAccelGroup* accelGroup) c_gtk_action_group_set_accel_group;
	void function(GtkActionGroup* actionGroup, int sensitive) c_gtk_action_group_set_sensitive;
	void function(GtkActionGroup* actionGroup, GtkTranslateFunc func, void* data, GDestroyNotify notify) c_gtk_action_group_set_translate_func;
	void function(GtkActionGroup* actionGroup, const(char)* domain) c_gtk_action_group_set_translation_domain;
	void function(GtkActionGroup* actionGroup, int visible) c_gtk_action_group_set_visible;
	const(char)* function(GtkActionGroup* actionGroup, const(char)* str) c_gtk_action_group_translate_string;

	// gtk.Actionable

	GType function() c_gtk_actionable_get_type;
	const(char)* function(GtkActionable* actionable) c_gtk_actionable_get_action_name;
	GVariant* function(GtkActionable* actionable) c_gtk_actionable_get_action_target_value;
	void function(GtkActionable* actionable, const(char)* actionName) c_gtk_actionable_set_action_name;
	void function(GtkActionable* actionable, const(char)* formatString, ... ) c_gtk_actionable_set_action_target;
	void function(GtkActionable* actionable, GVariant* targetValue) c_gtk_actionable_set_action_target_value;
	void function(GtkActionable* actionable, const(char)* detailedActionName) c_gtk_actionable_set_detailed_action_name;

	// gtk.Activatable

	GType function() c_gtk_activatable_get_type;
	void function(GtkActivatable* activatable, GtkAction* action) c_gtk_activatable_do_set_related_action;
	GtkAction* function(GtkActivatable* activatable) c_gtk_activatable_get_related_action;
	int function(GtkActivatable* activatable) c_gtk_activatable_get_use_action_appearance;
	void function(GtkActivatable* activatable, GtkAction* action) c_gtk_activatable_set_related_action;
	void function(GtkActivatable* activatable, int useAppearance) c_gtk_activatable_set_use_action_appearance;
	void function(GtkActivatable* activatable, GtkAction* action) c_gtk_activatable_sync_action_properties;

	// gtk.Adjustment

	GType function() c_gtk_adjustment_get_type;
	GtkAdjustment* function(double value, double lower, double upper, double stepIncrement, double pageIncrement, double pageSize) c_gtk_adjustment_new;
	void function(GtkAdjustment* adjustment) c_gtk_adjustment_changed;
	void function(GtkAdjustment* adjustment, double lower, double upper) c_gtk_adjustment_clamp_page;
	void function(GtkAdjustment* adjustment, double value, double lower, double upper, double stepIncrement, double pageIncrement, double pageSize) c_gtk_adjustment_configure;
	double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_lower;
	double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_minimum_increment;
	double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_page_increment;
	double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_page_size;
	double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_step_increment;
	double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_upper;
	double function(GtkAdjustment* adjustment) c_gtk_adjustment_get_value;
	void function(GtkAdjustment* adjustment, double lower) c_gtk_adjustment_set_lower;
	void function(GtkAdjustment* adjustment, double pageIncrement) c_gtk_adjustment_set_page_increment;
	void function(GtkAdjustment* adjustment, double pageSize) c_gtk_adjustment_set_page_size;
	void function(GtkAdjustment* adjustment, double stepIncrement) c_gtk_adjustment_set_step_increment;
	void function(GtkAdjustment* adjustment, double upper) c_gtk_adjustment_set_upper;
	void function(GtkAdjustment* adjustment, double value) c_gtk_adjustment_set_value;
	void function(GtkAdjustment* adjustment) c_gtk_adjustment_value_changed;

	// gtk.Alignment

	GType function() c_gtk_alignment_get_type;
	GtkWidget* function(float xalign, float yalign, float xscale, float yscale) c_gtk_alignment_new;
	void function(GtkAlignment* alignment, uint* paddingTop, uint* paddingBottom, uint* paddingLeft, uint* paddingRight) c_gtk_alignment_get_padding;
	void function(GtkAlignment* alignment, float xalign, float yalign, float xscale, float yscale) c_gtk_alignment_set;
	void function(GtkAlignment* alignment, uint paddingTop, uint paddingBottom, uint paddingLeft, uint paddingRight) c_gtk_alignment_set_padding;

	// gtk.AppChooser

	GType function() c_gtk_app_chooser_get_type;
	GAppInfo* function(GtkAppChooser* self) c_gtk_app_chooser_get_app_info;
	char* function(GtkAppChooser* self) c_gtk_app_chooser_get_content_type;
	void function(GtkAppChooser* self) c_gtk_app_chooser_refresh;

	// gtk.AppChooserButton

	GType function() c_gtk_app_chooser_button_get_type;
	GtkWidget* function(const(char)* contentType) c_gtk_app_chooser_button_new;
	void function(GtkAppChooserButton* self, const(char)* name, const(char)* label, GIcon* icon) c_gtk_app_chooser_button_append_custom_item;
	void function(GtkAppChooserButton* self) c_gtk_app_chooser_button_append_separator;
	const(char)* function(GtkAppChooserButton* self) c_gtk_app_chooser_button_get_heading;
	int function(GtkAppChooserButton* self) c_gtk_app_chooser_button_get_show_default_item;
	int function(GtkAppChooserButton* self) c_gtk_app_chooser_button_get_show_dialog_item;
	void function(GtkAppChooserButton* self, const(char)* name) c_gtk_app_chooser_button_set_active_custom_item;
	void function(GtkAppChooserButton* self, const(char)* heading) c_gtk_app_chooser_button_set_heading;
	void function(GtkAppChooserButton* self, int setting) c_gtk_app_chooser_button_set_show_default_item;
	void function(GtkAppChooserButton* self, int setting) c_gtk_app_chooser_button_set_show_dialog_item;

	// gtk.AppChooserDialog

	GType function() c_gtk_app_chooser_dialog_get_type;
	GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, GFile* file) c_gtk_app_chooser_dialog_new;
	GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, const(char)* contentType) c_gtk_app_chooser_dialog_new_for_content_type;
	const(char)* function(GtkAppChooserDialog* self) c_gtk_app_chooser_dialog_get_heading;
	GtkWidget* function(GtkAppChooserDialog* self) c_gtk_app_chooser_dialog_get_widget;
	void function(GtkAppChooserDialog* self, const(char)* heading) c_gtk_app_chooser_dialog_set_heading;

	// gtk.AppChooserWidget

	GType function() c_gtk_app_chooser_widget_get_type;
	GtkWidget* function(const(char)* contentType) c_gtk_app_chooser_widget_new;
	const(char)* function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_default_text;
	int function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_all;
	int function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_default;
	int function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_fallback;
	int function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_other;
	int function(GtkAppChooserWidget* self) c_gtk_app_chooser_widget_get_show_recommended;
	void function(GtkAppChooserWidget* self, const(char)* text) c_gtk_app_chooser_widget_set_default_text;
	void function(GtkAppChooserWidget* self, int setting) c_gtk_app_chooser_widget_set_show_all;
	void function(GtkAppChooserWidget* self, int setting) c_gtk_app_chooser_widget_set_show_default;
	void function(GtkAppChooserWidget* self, int setting) c_gtk_app_chooser_widget_set_show_fallback;
	void function(GtkAppChooserWidget* self, int setting) c_gtk_app_chooser_widget_set_show_other;
	void function(GtkAppChooserWidget* self, int setting) c_gtk_app_chooser_widget_set_show_recommended;

	// gtk.Application

	GType function() c_gtk_application_get_type;
	GtkApplication* function(const(char)* applicationId, GApplicationFlags flags) c_gtk_application_new;
	void function(GtkApplication* application, const(char)* accelerator, const(char)* actionName, GVariant* parameter) c_gtk_application_add_accelerator;
	void function(GtkApplication* application, GtkWindow* window) c_gtk_application_add_window;
	char** function(GtkApplication* application, const(char)* detailedActionName) c_gtk_application_get_accels_for_action;
	char** function(GtkApplication* application, const(char)* accel) c_gtk_application_get_actions_for_accel;
	GtkWindow* function(GtkApplication* application) c_gtk_application_get_active_window;
	GMenuModel* function(GtkApplication* application) c_gtk_application_get_app_menu;
	GMenu* function(GtkApplication* application, const(char)* id) c_gtk_application_get_menu_by_id;
	GMenuModel* function(GtkApplication* application) c_gtk_application_get_menubar;
	GtkWindow* function(GtkApplication* application, uint id) c_gtk_application_get_window_by_id;
	GList* function(GtkApplication* application) c_gtk_application_get_windows;
	uint function(GtkApplication* application, GtkWindow* window, GtkApplicationInhibitFlags flags, const(char)* reason) c_gtk_application_inhibit;
	int function(GtkApplication* application, GtkApplicationInhibitFlags flags) c_gtk_application_is_inhibited;
	char** function(GtkApplication* application) c_gtk_application_list_action_descriptions;
	int function(GtkApplication* application) c_gtk_application_prefers_app_menu;
	void function(GtkApplication* application, const(char)* actionName, GVariant* parameter) c_gtk_application_remove_accelerator;
	void function(GtkApplication* application, GtkWindow* window) c_gtk_application_remove_window;
	void function(GtkApplication* application, const(char)* detailedActionName, char** accels) c_gtk_application_set_accels_for_action;
	void function(GtkApplication* application, GMenuModel* appMenu) c_gtk_application_set_app_menu;
	void function(GtkApplication* application, GMenuModel* menubar) c_gtk_application_set_menubar;
	void function(GtkApplication* application, uint cookie) c_gtk_application_uninhibit;

	// gtk.ApplicationWindow

	GType function() c_gtk_application_window_get_type;
	GtkWidget* function(GtkApplication* application) c_gtk_application_window_new;
	GtkShortcutsWindow* function(GtkApplicationWindow* window) c_gtk_application_window_get_help_overlay;
	uint function(GtkApplicationWindow* window) c_gtk_application_window_get_id;
	int function(GtkApplicationWindow* window) c_gtk_application_window_get_show_menubar;
	void function(GtkApplicationWindow* window, GtkShortcutsWindow* helpOverlay) c_gtk_application_window_set_help_overlay;
	void function(GtkApplicationWindow* window, int showMenubar) c_gtk_application_window_set_show_menubar;

	// gtk.Arrow

	GType function() c_gtk_arrow_get_type;
	GtkWidget* function(GtkArrowType arrowType, GtkShadowType shadowType) c_gtk_arrow_new;
	void function(GtkArrow* arrow, GtkArrowType arrowType, GtkShadowType shadowType) c_gtk_arrow_set;

	// gtk.ArrowAccessible

	GType function() c_gtk_arrow_accessible_get_type;

	// gtk.AspectFrame

	GType function() c_gtk_aspect_frame_get_type;
	GtkWidget* function(const(char)* label, float xalign, float yalign, float ratio, int obeyChild) c_gtk_aspect_frame_new;
	void function(GtkAspectFrame* aspectFrame, float xalign, float yalign, float ratio, int obeyChild) c_gtk_aspect_frame_set;

	// gtk.Assistant

	GType function() c_gtk_assistant_get_type;
	GtkWidget* function() c_gtk_assistant_new;
	void function(GtkAssistant* assistant, GtkWidget* child) c_gtk_assistant_add_action_widget;
	int function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_append_page;
	void function(GtkAssistant* assistant) c_gtk_assistant_commit;
	int function(GtkAssistant* assistant) c_gtk_assistant_get_current_page;
	int function(GtkAssistant* assistant) c_gtk_assistant_get_n_pages;
	GtkWidget* function(GtkAssistant* assistant, int pageNum) c_gtk_assistant_get_nth_page;
	int function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_complete;
	int function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_has_padding;
	GdkPixbuf* function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_header_image;
	GdkPixbuf* function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_side_image;
	const(char)* function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_title;
	GtkAssistantPageType function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_get_page_type;
	int function(GtkAssistant* assistant, GtkWidget* page, int position) c_gtk_assistant_insert_page;
	void function(GtkAssistant* assistant) c_gtk_assistant_next_page;
	int function(GtkAssistant* assistant, GtkWidget* page) c_gtk_assistant_prepend_page;
	void function(GtkAssistant* assistant) c_gtk_assistant_previous_page;
	void function(GtkAssistant* assistant, GtkWidget* child) c_gtk_assistant_remove_action_widget;
	void function(GtkAssistant* assistant, int pageNum) c_gtk_assistant_remove_page;
	void function(GtkAssistant* assistant, int pageNum) c_gtk_assistant_set_current_page;
	void function(GtkAssistant* assistant, GtkAssistantPageFunc pageFunc, void* data, GDestroyNotify destroy) c_gtk_assistant_set_forward_page_func;
	void function(GtkAssistant* assistant, GtkWidget* page, int complete) c_gtk_assistant_set_page_complete;
	void function(GtkAssistant* assistant, GtkWidget* page, int hasPadding) c_gtk_assistant_set_page_has_padding;
	void function(GtkAssistant* assistant, GtkWidget* page, GdkPixbuf* pixbuf) c_gtk_assistant_set_page_header_image;
	void function(GtkAssistant* assistant, GtkWidget* page, GdkPixbuf* pixbuf) c_gtk_assistant_set_page_side_image;
	void function(GtkAssistant* assistant, GtkWidget* page, const(char)* title) c_gtk_assistant_set_page_title;
	void function(GtkAssistant* assistant, GtkWidget* page, GtkAssistantPageType type) c_gtk_assistant_set_page_type;
	void function(GtkAssistant* assistant) c_gtk_assistant_update_buttons_state;

	// gtk.Bin

	GType function() c_gtk_bin_get_type;
	GtkWidget* function(GtkBin* bin) c_gtk_bin_get_child;

	// gtk.BindingEntry

	void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers, const(char)* signalName, uint nArgs, ... ) c_gtk_binding_entry_add_signal;
	GTokenType function(GtkBindingSet* bindingSet, const(char)* signalDesc) c_gtk_binding_entry_add_signal_from_string;
	void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers, const(char)* signalName, GSList* bindingArgs) c_gtk_binding_entry_add_signall;
	void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers) c_gtk_binding_entry_remove;
	void function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers) c_gtk_binding_entry_skip;

	// gtk.BindingSet

	int function(GtkBindingSet* bindingSet, uint keyval, GdkModifierType modifiers, GObject* object) c_gtk_binding_set_activate;
	void function(GtkBindingSet* bindingSet, GtkPathType pathType, const(char)* pathPattern, GtkPathPriorityType priority) c_gtk_binding_set_add_path;
	GtkBindingSet* function(void* objectClass) c_gtk_binding_set_by_class;
	GtkBindingSet* function(const(char)* setName) c_gtk_binding_set_find;
	GtkBindingSet* function(const(char)* setName) c_gtk_binding_set_new;
	int function(GObject* object, uint keyval, GdkModifierType modifiers) c_gtk_bindings_activate;
	int function(GObject* object, GdkEventKey* event) c_gtk_bindings_activate_event;

	// gtk.BooleanCellAccessible

	GType function() c_gtk_boolean_cell_accessible_get_type;

	// gtk.Border

	GType function() c_gtk_border_get_type;
	GtkBorder* function() c_gtk_border_new;
	GtkBorder* function(GtkBorder* border) c_gtk_border_copy;
	void function(GtkBorder* border) c_gtk_border_free;

	// gtk.Box

	GType function() c_gtk_box_get_type;
	GtkWidget* function(GtkOrientation orientation, int spacing) c_gtk_box_new;
	GtkBaselinePosition function(GtkBox* box) c_gtk_box_get_baseline_position;
	GtkWidget* function(GtkBox* box) c_gtk_box_get_center_widget;
	int function(GtkBox* box) c_gtk_box_get_homogeneous;
	int function(GtkBox* box) c_gtk_box_get_spacing;
	void function(GtkBox* box, GtkWidget* child, int expand, int fill, uint padding) c_gtk_box_pack_end;
	void function(GtkBox* box, GtkWidget* child, int expand, int fill, uint padding) c_gtk_box_pack_start;
	void function(GtkBox* box, GtkWidget* child, int* expand, int* fill, uint* padding, GtkPackType* packType) c_gtk_box_query_child_packing;
	void function(GtkBox* box, GtkWidget* child, int position) c_gtk_box_reorder_child;
	void function(GtkBox* box, GtkBaselinePosition position) c_gtk_box_set_baseline_position;
	void function(GtkBox* box, GtkWidget* widget) c_gtk_box_set_center_widget;
	void function(GtkBox* box, GtkWidget* child, int expand, int fill, uint padding, GtkPackType packType) c_gtk_box_set_child_packing;
	void function(GtkBox* box, int homogeneous) c_gtk_box_set_homogeneous;
	void function(GtkBox* box, int spacing) c_gtk_box_set_spacing;

	// gtk.Buildable

	GType function() c_gtk_buildable_get_type;
	void function(GtkBuildable* buildable, GtkBuilder* builder, GObject* child, const(char)* type) c_gtk_buildable_add_child;
	GObject* function(GtkBuildable* buildable, GtkBuilder* builder, const(char)* name) c_gtk_buildable_construct_child;
	void function(GtkBuildable* buildable, GtkBuilder* builder, GObject* child, const(char)* tagname, void* data) c_gtk_buildable_custom_finished;
	void function(GtkBuildable* buildable, GtkBuilder* builder, GObject* child, const(char)* tagname, void** data) c_gtk_buildable_custom_tag_end;
	int function(GtkBuildable* buildable, GtkBuilder* builder, GObject* child, const(char)* tagname, GMarkupParser* parser, void** data) c_gtk_buildable_custom_tag_start;
	GObject* function(GtkBuildable* buildable, GtkBuilder* builder, const(char)* childname) c_gtk_buildable_get_internal_child;
	const(char)* function(GtkBuildable* buildable) c_gtk_buildable_get_name;
	void function(GtkBuildable* buildable, GtkBuilder* builder) c_gtk_buildable_parser_finished;
	void function(GtkBuildable* buildable, GtkBuilder* builder, const(char)* name, GValue* value) c_gtk_buildable_set_buildable_property;
	void function(GtkBuildable* buildable, const(char)* name) c_gtk_buildable_set_name;

	// gtk.Builder

	GType function() c_gtk_builder_get_type;
	GtkBuilder* function() c_gtk_builder_new;
	GtkBuilder* function(const(char)* filename) c_gtk_builder_new_from_file;
	GtkBuilder* function(const(char)* resourcePath) c_gtk_builder_new_from_resource;
	GtkBuilder* function(const(char)* str, ptrdiff_t length) c_gtk_builder_new_from_string;
	void function(GtkBuilder* builder, const(char)* callbackName, GCallback callbackSymbol) c_gtk_builder_add_callback_symbol;
	void function(GtkBuilder* builder, const(char)* firstCallbackName, GCallback firstCallbackSymbol, ... ) c_gtk_builder_add_callback_symbols;
	uint function(GtkBuilder* builder, const(char)* filename, GError** err) c_gtk_builder_add_from_file;
	uint function(GtkBuilder* builder, const(char)* resourcePath, GError** err) c_gtk_builder_add_from_resource;
	uint function(GtkBuilder* builder, const(char)* buffer, size_t length, GError** err) c_gtk_builder_add_from_string;
	uint function(GtkBuilder* builder, const(char)* filename, char** objectIds, GError** err) c_gtk_builder_add_objects_from_file;
	uint function(GtkBuilder* builder, const(char)* resourcePath, char** objectIds, GError** err) c_gtk_builder_add_objects_from_resource;
	uint function(GtkBuilder* builder, const(char)* buffer, size_t length, char** objectIds, GError** err) c_gtk_builder_add_objects_from_string;
	void function(GtkBuilder* builder, void* userData) c_gtk_builder_connect_signals;
	void function(GtkBuilder* builder, GtkBuilderConnectFunc func, void* userData) c_gtk_builder_connect_signals_full;
	void function(GtkBuilder* builder, const(char)* name, GObject* object) c_gtk_builder_expose_object;
	uint function(GtkBuilder* builder, GtkWidget* widget, GType templateType, const(char)* buffer, size_t length, GError** err) c_gtk_builder_extend_with_template;
	GtkApplication* function(GtkBuilder* builder) c_gtk_builder_get_application;
	GObject* function(GtkBuilder* builder, const(char)* name) c_gtk_builder_get_object;
	GSList* function(GtkBuilder* builder) c_gtk_builder_get_objects;
	const(char)* function(GtkBuilder* builder) c_gtk_builder_get_translation_domain;
	GType function(GtkBuilder* builder, const(char)* typeName) c_gtk_builder_get_type_from_name;
	GCallback function(GtkBuilder* builder, const(char)* callbackName) c_gtk_builder_lookup_callback_symbol;
	void function(GtkBuilder* builder, GtkApplication* application) c_gtk_builder_set_application;
	void function(GtkBuilder* builder, const(char)* domain) c_gtk_builder_set_translation_domain;
	int function(GtkBuilder* builder, GParamSpec* pspec, const(char)* str, GValue* value, GError** err) c_gtk_builder_value_from_string;
	int function(GtkBuilder* builder, GType type, const(char)* str, GValue* value, GError** err) c_gtk_builder_value_from_string_type;

	// gtk.Button

	GType function() c_gtk_button_get_type;
	GtkWidget* function() c_gtk_button_new;
	GtkWidget* function(const(char)* iconName, GtkIconSize size) c_gtk_button_new_from_icon_name;
	GtkWidget* function(const(char)* stockId) c_gtk_button_new_from_stock;
	GtkWidget* function(const(char)* label) c_gtk_button_new_with_label;
	GtkWidget* function(const(char)* label) c_gtk_button_new_with_mnemonic;
	void function(GtkButton* button) c_gtk_button_clicked;
	void function(GtkButton* button) c_gtk_button_enter;
	void function(GtkButton* button, float* xalign, float* yalign) c_gtk_button_get_alignment;
	int function(GtkButton* button) c_gtk_button_get_always_show_image;
	GdkWindow* function(GtkButton* button) c_gtk_button_get_event_window;
	int function(GtkButton* button) c_gtk_button_get_focus_on_click;
	GtkWidget* function(GtkButton* button) c_gtk_button_get_image;
	GtkPositionType function(GtkButton* button) c_gtk_button_get_image_position;
	const(char)* function(GtkButton* button) c_gtk_button_get_label;
	GtkReliefStyle function(GtkButton* button) c_gtk_button_get_relief;
	int function(GtkButton* button) c_gtk_button_get_use_stock;
	int function(GtkButton* button) c_gtk_button_get_use_underline;
	void function(GtkButton* button) c_gtk_button_leave;
	void function(GtkButton* button) c_gtk_button_pressed;
	void function(GtkButton* button) c_gtk_button_released;
	void function(GtkButton* button, float xalign, float yalign) c_gtk_button_set_alignment;
	void function(GtkButton* button, int alwaysShow) c_gtk_button_set_always_show_image;
	void function(GtkButton* button, int focusOnClick) c_gtk_button_set_focus_on_click;
	void function(GtkButton* button, GtkWidget* image) c_gtk_button_set_image;
	void function(GtkButton* button, GtkPositionType position) c_gtk_button_set_image_position;
	void function(GtkButton* button, const(char)* label) c_gtk_button_set_label;
	void function(GtkButton* button, GtkReliefStyle relief) c_gtk_button_set_relief;
	void function(GtkButton* button, int useStock) c_gtk_button_set_use_stock;
	void function(GtkButton* button, int useUnderline) c_gtk_button_set_use_underline;

	// gtk.ButtonAccessible

	GType function() c_gtk_button_accessible_get_type;

	// gtk.ButtonBox

	GType function() c_gtk_button_box_get_type;
	GtkWidget* function(GtkOrientation orientation) c_gtk_button_box_new;
	int function(GtkButtonBox* widget, GtkWidget* child) c_gtk_button_box_get_child_non_homogeneous;
	int function(GtkButtonBox* widget, GtkWidget* child) c_gtk_button_box_get_child_secondary;
	GtkButtonBoxStyle function(GtkButtonBox* widget) c_gtk_button_box_get_layout;
	void function(GtkButtonBox* widget, GtkWidget* child, int nonHomogeneous) c_gtk_button_box_set_child_non_homogeneous;
	void function(GtkButtonBox* widget, GtkWidget* child, int isSecondary) c_gtk_button_box_set_child_secondary;
	void function(GtkButtonBox* widget, GtkButtonBoxStyle layoutStyle) c_gtk_button_box_set_layout;

	// gtk.Calendar

	GType function() c_gtk_calendar_get_type;
	GtkWidget* function() c_gtk_calendar_new;
	void function(GtkCalendar* calendar) c_gtk_calendar_clear_marks;
	void function(GtkCalendar* calendar, uint* year, uint* month, uint* day) c_gtk_calendar_get_date;
	int function(GtkCalendar* calendar, uint day) c_gtk_calendar_get_day_is_marked;
	int function(GtkCalendar* calendar) c_gtk_calendar_get_detail_height_rows;
	int function(GtkCalendar* calendar) c_gtk_calendar_get_detail_width_chars;
	GtkCalendarDisplayOptions function(GtkCalendar* calendar) c_gtk_calendar_get_display_options;
	void function(GtkCalendar* calendar, uint day) c_gtk_calendar_mark_day;
	void function(GtkCalendar* calendar, uint day) c_gtk_calendar_select_day;
	void function(GtkCalendar* calendar, uint month, uint year) c_gtk_calendar_select_month;
	void function(GtkCalendar* calendar, GtkCalendarDetailFunc func, void* data, GDestroyNotify destroy) c_gtk_calendar_set_detail_func;
	void function(GtkCalendar* calendar, int rows) c_gtk_calendar_set_detail_height_rows;
	void function(GtkCalendar* calendar, int chars) c_gtk_calendar_set_detail_width_chars;
	void function(GtkCalendar* calendar, GtkCalendarDisplayOptions flags) c_gtk_calendar_set_display_options;
	void function(GtkCalendar* calendar, uint day) c_gtk_calendar_unmark_day;

	// gtk.CellAccessible

	GType function() c_gtk_cell_accessible_get_type;

	// gtk.CellAccessibleParent

	GType function() c_gtk_cell_accessible_parent_get_type;
	void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_activate;
	void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_edit;
	void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_expand_collapse;
	void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell, GdkRectangle* cellRect) c_gtk_cell_accessible_parent_get_cell_area;
	void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell, int* x, int* y, int* width, int* height, AtkCoordType coordType) c_gtk_cell_accessible_parent_get_cell_extents;
	int function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_get_child_index;
	GtkCellRendererState function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_get_renderer_state;
	int function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell) c_gtk_cell_accessible_parent_grab_focus;
	void function(GtkCellAccessibleParent* parent, GtkCellAccessible* cell, AtkRelationSet* relationset) c_gtk_cell_accessible_parent_update_relationset;

	// gtk.CellArea

	GType function() c_gtk_cell_area_get_type;
	int function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GdkRectangle* cellArea, GtkCellRendererState flags, int editOnly) c_gtk_cell_area_activate;
	int function(GtkCellArea* area, GtkWidget* widget, GtkCellRenderer* renderer, GdkEvent* event, GdkRectangle* cellArea, GtkCellRendererState flags) c_gtk_cell_area_activate_cell;
	void function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_add;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) c_gtk_cell_area_add_focus_sibling;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropName, ... ) c_gtk_cell_area_add_with_properties;
	void function(GtkCellArea* area, GtkTreeModel* treeModel, GtkTreeIter* iter, int isExpander, int isExpanded) c_gtk_cell_area_apply_attributes;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* attribute, int column) c_gtk_cell_area_attribute_connect;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* attribute) c_gtk_cell_area_attribute_disconnect;
	int function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* attribute) c_gtk_cell_area_attribute_get_column;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropName, ... ) c_gtk_cell_area_cell_get;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* propertyName, GValue* value) c_gtk_cell_area_cell_get_property;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropertyName, void* varArgs) c_gtk_cell_area_cell_get_valist;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropName, ... ) c_gtk_cell_area_cell_set;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* propertyName, GValue* value) c_gtk_cell_area_cell_set_property;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, const(char)* firstPropertyName, void* varArgs) c_gtk_cell_area_cell_set_valist;
	GtkCellAreaContext* function(GtkCellArea* area, GtkCellAreaContext* context) c_gtk_cell_area_copy_context;
	GtkCellAreaContext* function(GtkCellArea* area) c_gtk_cell_area_create_context;
	int function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GdkEvent* event, GdkRectangle* cellArea, GtkCellRendererState flags) c_gtk_cell_area_event;
	int function(GtkCellArea* area, GtkDirectionType direction) c_gtk_cell_area_focus;
	void function(GtkCellArea* area, GtkCellCallback callback, void* callbackData) c_gtk_cell_area_foreach;
	void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GdkRectangle* cellArea, GdkRectangle* backgroundArea, GtkCellAllocCallback callback, void* callbackData) c_gtk_cell_area_foreach_alloc;
	void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GtkCellRenderer* renderer, GdkRectangle* cellArea, GdkRectangle* allocation) c_gtk_cell_area_get_cell_allocation;
	GtkCellRenderer* function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, GdkRectangle* cellArea, int x, int y, GdkRectangle* allocArea) c_gtk_cell_area_get_cell_at_position;
	const(char)* function(GtkCellArea* area) c_gtk_cell_area_get_current_path_string;
	GtkCellEditable* function(GtkCellArea* area) c_gtk_cell_area_get_edit_widget;
	GtkCellRenderer* function(GtkCellArea* area) c_gtk_cell_area_get_edited_cell;
	GtkCellRenderer* function(GtkCellArea* area) c_gtk_cell_area_get_focus_cell;
	GtkCellRenderer* function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_get_focus_from_sibling;
	GList* function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_get_focus_siblings;
	void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_get_preferred_height;
	void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_get_preferred_height_for_width;
	void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_get_preferred_width;
	void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, int height, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_get_preferred_width_for_height;
	GtkSizeRequestMode function(GtkCellArea* area) c_gtk_cell_area_get_request_mode;
	int function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_has_renderer;
	void function(GtkCellArea* area, GtkWidget* widget, GdkRectangle* cellArea, GdkRectangle* innerArea) c_gtk_cell_area_inner_cell_area;
	int function(GtkCellArea* area) c_gtk_cell_area_is_activatable;
	int function(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) c_gtk_cell_area_is_focus_sibling;
	void function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_remove;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, GtkCellRenderer* sibling) c_gtk_cell_area_remove_focus_sibling;
	void function(GtkCellArea* area, GtkCellAreaContext* context, GtkWidget* widget, cairo_t* cr, GdkRectangle* backgroundArea, GdkRectangle* cellArea, GtkCellRendererState flags, int paintFocus) c_gtk_cell_area_render;
	void function(GtkCellArea* area, GtkCellRenderer* renderer, GtkOrientation orientation, GtkWidget* widget, int forSize, int* minimumSize, int* naturalSize) c_gtk_cell_area_request_renderer;
	void function(GtkCellArea* area, GtkCellRenderer* renderer) c_gtk_cell_area_set_focus_cell;
	void function(GtkCellArea* area, int canceled) c_gtk_cell_area_stop_editing;

	// gtk.CellAreaBox

	GType function() c_gtk_cell_area_box_get_type;
	GtkCellArea* function() c_gtk_cell_area_box_new;
	int function(GtkCellAreaBox* box) c_gtk_cell_area_box_get_spacing;
	void function(GtkCellAreaBox* box, GtkCellRenderer* renderer, int expand, int alig, int fixed) c_gtk_cell_area_box_pack_end;
	void function(GtkCellAreaBox* box, GtkCellRenderer* renderer, int expand, int alig, int fixed) c_gtk_cell_area_box_pack_start;
	void function(GtkCellAreaBox* box, int spacing) c_gtk_cell_area_box_set_spacing;

	// gtk.CellAreaClass

	GParamSpec* function(GtkCellAreaClass* aclass, const(char)* propertyName) c_gtk_cell_area_class_find_cell_property;
	void function(GtkCellAreaClass* aclass, uint propertyId, GParamSpec* pspec) c_gtk_cell_area_class_install_cell_property;
	GParamSpec** function(GtkCellAreaClass* aclass, uint* nProperties) c_gtk_cell_area_class_list_cell_properties;

	// gtk.CellAreaContext

	GType function() c_gtk_cell_area_context_get_type;
	void function(GtkCellAreaContext* context, int width, int height) c_gtk_cell_area_context_allocate;
	void function(GtkCellAreaContext* context, int* width, int* height) c_gtk_cell_area_context_get_allocation;
	GtkCellArea* function(GtkCellAreaContext* context) c_gtk_cell_area_context_get_area;
	void function(GtkCellAreaContext* context, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_context_get_preferred_height;
	void function(GtkCellAreaContext* context, int width, int* minimumHeight, int* naturalHeight) c_gtk_cell_area_context_get_preferred_height_for_width;
	void function(GtkCellAreaContext* context, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_context_get_preferred_width;
	void function(GtkCellAreaContext* context, int height, int* minimumWidth, int* naturalWidth) c_gtk_cell_area_context_get_preferred_width_for_height;
	void function(GtkCellAreaContext* context, int minimumHeight, int naturalHeight) c_gtk_cell_area_context_push_preferred_height;
	void function(GtkCellAreaContext* context, int minimumWidth, int naturalWidth) c_gtk_cell_area_context_push_preferred_width;
	void function(GtkCellAreaContext* context) c_gtk_cell_area_context_reset;

	// gtk.CellEditable

	GType function() c_gtk_cell_editable_get_type;
	void function(GtkCellEditable* cellEditable) c_gtk_cell_editable_editing_done;
	void function(GtkCellEditable* cellEditable) c_gtk_cell_editable_remove_widget;
	void function(GtkCellEditable* cellEditable, GdkEvent* event) c_gtk_cell_editable_start_editing;

	// gtk.CellLayout

	GType function() c_gtk_cell_layout_get_type;
	void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, const(char)* attribute, int column) c_gtk_cell_layout_add_attribute;
	void function(GtkCellLayout* cellLayout) c_gtk_cell_layout_clear;
	void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell) c_gtk_cell_layout_clear_attributes;
	GtkCellArea* function(GtkCellLayout* cellLayout) c_gtk_cell_layout_get_area;
	GList* function(GtkCellLayout* cellLayout) c_gtk_cell_layout_get_cells;
	void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, int expand) c_gtk_cell_layout_pack_end;
	void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, int expand) c_gtk_cell_layout_pack_start;
	void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, int position) c_gtk_cell_layout_reorder;
	void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, ... ) c_gtk_cell_layout_set_attributes;
	void function(GtkCellLayout* cellLayout, GtkCellRenderer* cell, GtkCellLayoutDataFunc func, void* funcData, GDestroyNotify destroy) c_gtk_cell_layout_set_cell_data_func;

	// gtk.CellRenderer

	GType function() c_gtk_cell_renderer_get_type;
	int function(GtkCellRenderer* cell, GdkEvent* event, GtkWidget* widget, const(char)* path, GdkRectangle* backgroundArea, GdkRectangle* cellArea, GtkCellRendererState flags) c_gtk_cell_renderer_activate;
	void function(GtkCellRenderer* cell, GtkWidget* widget, GtkCellRendererState flags, GdkRectangle* cellArea, GdkRectangle* alignedArea) c_gtk_cell_renderer_get_aligned_area;
	void function(GtkCellRenderer* cell, float* xalign, float* yalign) c_gtk_cell_renderer_get_alignment;
	void function(GtkCellRenderer* cell, int* width, int* height) c_gtk_cell_renderer_get_fixed_size;
	void function(GtkCellRenderer* cell, int* xpad, int* ypad) c_gtk_cell_renderer_get_padding;
	void function(GtkCellRenderer* cell, GtkWidget* widget, int* minimumSize, int* naturalSize) c_gtk_cell_renderer_get_preferred_height;
	void function(GtkCellRenderer* cell, GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight) c_gtk_cell_renderer_get_preferred_height_for_width;
	void function(GtkCellRenderer* cell, GtkWidget* widget, GtkRequisition* minimumSize, GtkRequisition* naturalSize) c_gtk_cell_renderer_get_preferred_size;
	void function(GtkCellRenderer* cell, GtkWidget* widget, int* minimumSize, int* naturalSize) c_gtk_cell_renderer_get_preferred_width;
	void function(GtkCellRenderer* cell, GtkWidget* widget, int height, int* minimumWidth, int* naturalWidth) c_gtk_cell_renderer_get_preferred_width_for_height;
	GtkSizeRequestMode function(GtkCellRenderer* cell) c_gtk_cell_renderer_get_request_mode;
	int function(GtkCellRenderer* cell) c_gtk_cell_renderer_get_sensitive;
	void function(GtkCellRenderer* cell, GtkWidget* widget, GdkRectangle* cellArea, int* xOffset, int* yOffset, int* width, int* height) c_gtk_cell_renderer_get_size;
	GtkStateFlags function(GtkCellRenderer* cell, GtkWidget* widget, GtkCellRendererState cellState) c_gtk_cell_renderer_get_state;
	int function(GtkCellRenderer* cell) c_gtk_cell_renderer_get_visible;
	int function(GtkCellRenderer* cell) c_gtk_cell_renderer_is_activatable;
	void function(GtkCellRenderer* cell, cairo_t* cr, GtkWidget* widget, GdkRectangle* backgroundArea, GdkRectangle* cellArea, GtkCellRendererState flags) c_gtk_cell_renderer_render;
	void function(GtkCellRenderer* cell, float xalign, float yalign) c_gtk_cell_renderer_set_alignment;
	void function(GtkCellRenderer* cell, int width, int height) c_gtk_cell_renderer_set_fixed_size;
	void function(GtkCellRenderer* cell, int xpad, int ypad) c_gtk_cell_renderer_set_padding;
	void function(GtkCellRenderer* cell, int sensitive) c_gtk_cell_renderer_set_sensitive;
	void function(GtkCellRenderer* cell, int visible) c_gtk_cell_renderer_set_visible;
	GtkCellEditable* function(GtkCellRenderer* cell, GdkEvent* event, GtkWidget* widget, const(char)* path, GdkRectangle* backgroundArea, GdkRectangle* cellArea, GtkCellRendererState flags) c_gtk_cell_renderer_start_editing;
	void function(GtkCellRenderer* cell, int canceled) c_gtk_cell_renderer_stop_editing;

	// gtk.CellRendererAccel

	GType function() c_gtk_cell_renderer_accel_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_accel_new;

	// gtk.CellRendererClass

	void function(GtkCellRendererClass* rendererClass, GType type) c_gtk_cell_renderer_class_set_accessible_type;

	// gtk.CellRendererCombo

	GType function() c_gtk_cell_renderer_combo_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_combo_new;

	// gtk.CellRendererPixbuf

	GType function() c_gtk_cell_renderer_pixbuf_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_pixbuf_new;

	// gtk.CellRendererProgress

	GType function() c_gtk_cell_renderer_progress_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_progress_new;

	// gtk.CellRendererSpin

	GType function() c_gtk_cell_renderer_spin_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_spin_new;

	// gtk.CellRendererSpinner

	GType function() c_gtk_cell_renderer_spinner_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_spinner_new;

	// gtk.CellRendererText

	GType function() c_gtk_cell_renderer_text_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_text_new;
	void function(GtkCellRendererText* renderer, int numberOfRows) c_gtk_cell_renderer_text_set_fixed_height_from_font;

	// gtk.CellRendererToggle

	GType function() c_gtk_cell_renderer_toggle_get_type;
	GtkCellRenderer* function() c_gtk_cell_renderer_toggle_new;
	int function(GtkCellRendererToggle* toggle) c_gtk_cell_renderer_toggle_get_activatable;
	int function(GtkCellRendererToggle* toggle) c_gtk_cell_renderer_toggle_get_active;
	int function(GtkCellRendererToggle* toggle) c_gtk_cell_renderer_toggle_get_radio;
	void function(GtkCellRendererToggle* toggle, int setting) c_gtk_cell_renderer_toggle_set_activatable;
	void function(GtkCellRendererToggle* toggle, int setting) c_gtk_cell_renderer_toggle_set_active;
	void function(GtkCellRendererToggle* toggle, int radio) c_gtk_cell_renderer_toggle_set_radio;

	// gtk.CellView

	GType function() c_gtk_cell_view_get_type;
	GtkWidget* function() c_gtk_cell_view_new;
	GtkWidget* function(GtkCellArea* area, GtkCellAreaContext* context) c_gtk_cell_view_new_with_context;
	GtkWidget* function(const(char)* markup) c_gtk_cell_view_new_with_markup;
	GtkWidget* function(GdkPixbuf* pixbuf) c_gtk_cell_view_new_with_pixbuf;
	GtkWidget* function(const(char)* text) c_gtk_cell_view_new_with_text;
	GtkTreePath* function(GtkCellView* cellView) c_gtk_cell_view_get_displayed_row;
	int function(GtkCellView* cellView) c_gtk_cell_view_get_draw_sensitive;
	int function(GtkCellView* cellView) c_gtk_cell_view_get_fit_model;
	GtkTreeModel* function(GtkCellView* cellView) c_gtk_cell_view_get_model;
	int function(GtkCellView* cellView, GtkTreePath* path, GtkRequisition* requisition) c_gtk_cell_view_get_size_of_row;
	void function(GtkCellView* cellView, GdkColor* color) c_gtk_cell_view_set_background_color;
	void function(GtkCellView* cellView, GdkRGBA* rgba) c_gtk_cell_view_set_background_rgba;
	void function(GtkCellView* cellView, GtkTreePath* path) c_gtk_cell_view_set_displayed_row;
	void function(GtkCellView* cellView, int drawSensitive) c_gtk_cell_view_set_draw_sensitive;
	void function(GtkCellView* cellView, int fitModel) c_gtk_cell_view_set_fit_model;
	void function(GtkCellView* cellView, GtkTreeModel* model) c_gtk_cell_view_set_model;

	// gtk.CheckButton

	GType function() c_gtk_check_button_get_type;
	GtkWidget* function() c_gtk_check_button_new;
	GtkWidget* function(const(char)* label) c_gtk_check_button_new_with_label;
	GtkWidget* function(const(char)* label) c_gtk_check_button_new_with_mnemonic;

	// gtk.CheckMenuItem

	GType function() c_gtk_check_menu_item_get_type;
	GtkWidget* function() c_gtk_check_menu_item_new;
	GtkWidget* function(const(char)* label) c_gtk_check_menu_item_new_with_label;
	GtkWidget* function(const(char)* label) c_gtk_check_menu_item_new_with_mnemonic;
	int function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_get_active;
	int function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_get_draw_as_radio;
	int function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_get_inconsistent;
	void function(GtkCheckMenuItem* checkMenuItem, int isActive) c_gtk_check_menu_item_set_active;
	void function(GtkCheckMenuItem* checkMenuItem, int drawAsRadio) c_gtk_check_menu_item_set_draw_as_radio;
	void function(GtkCheckMenuItem* checkMenuItem, int setting) c_gtk_check_menu_item_set_inconsistent;
	void function(GtkCheckMenuItem* checkMenuItem) c_gtk_check_menu_item_toggled;

	// gtk.CheckMenuItemAccessible

	GType function() c_gtk_check_menu_item_accessible_get_type;

	// gtk.Clipboard

	GType function() c_gtk_clipboard_get_type;
	GtkClipboard* function(GdkAtom selection) c_gtk_clipboard_get;
	GtkClipboard* function(GdkDisplay* display) c_gtk_clipboard_get_default;
	GtkClipboard* function(GdkDisplay* display, GdkAtom selection) c_gtk_clipboard_get_for_display;
	void function(GtkClipboard* clipboard) c_gtk_clipboard_clear;
	GdkDisplay* function(GtkClipboard* clipboard) c_gtk_clipboard_get_display;
	GObject* function(GtkClipboard* clipboard) c_gtk_clipboard_get_owner;
	GdkAtom function(GtkClipboard* clipboard) c_gtk_clipboard_get_selection;
	void function(GtkClipboard* clipboard, GdkAtom target, GtkClipboardReceivedFunc callback, void* userData) c_gtk_clipboard_request_contents;
	void function(GtkClipboard* clipboard, GtkClipboardImageReceivedFunc callback, void* userData) c_gtk_clipboard_request_image;
	void function(GtkClipboard* clipboard, GtkTextBuffer* buffer, GtkClipboardRichTextReceivedFunc callback, void* userData) c_gtk_clipboard_request_rich_text;
	void function(GtkClipboard* clipboard, GtkClipboardTargetsReceivedFunc callback, void* userData) c_gtk_clipboard_request_targets;
	void function(GtkClipboard* clipboard, GtkClipboardTextReceivedFunc callback, void* userData) c_gtk_clipboard_request_text;
	void function(GtkClipboard* clipboard, GtkClipboardURIReceivedFunc callback, void* userData) c_gtk_clipboard_request_uris;
	void function(GtkClipboard* clipboard, GtkTargetEntry* targets, int nTargets) c_gtk_clipboard_set_can_store;
	void function(GtkClipboard* clipboard, GdkPixbuf* pixbuf) c_gtk_clipboard_set_image;
	void function(GtkClipboard* clipboard, const(char)* text, int len) c_gtk_clipboard_set_text;
	int function(GtkClipboard* clipboard, GtkTargetEntry* targets, uint nTargets, GtkClipboardGetFunc getFunc, GtkClipboardClearFunc clearFunc, void* userData) c_gtk_clipboard_set_with_data;
	int function(GtkClipboard* clipboard, GtkTargetEntry* targets, uint nTargets, GtkClipboardGetFunc getFunc, GtkClipboardClearFunc clearFunc, GObject* owner) c_gtk_clipboard_set_with_owner;
	void function(GtkClipboard* clipboard) c_gtk_clipboard_store;
	GtkSelectionData* function(GtkClipboard* clipboard, GdkAtom target) c_gtk_clipboard_wait_for_contents;
	GdkPixbuf* function(GtkClipboard* clipboard) c_gtk_clipboard_wait_for_image;
	ubyte* function(GtkClipboard* clipboard, GtkTextBuffer* buffer, GdkAtom* format, size_t* length) c_gtk_clipboard_wait_for_rich_text;
	int function(GtkClipboard* clipboard, GdkAtom** targets, int* nTargets) c_gtk_clipboard_wait_for_targets;
	char* function(GtkClipboard* clipboard) c_gtk_clipboard_wait_for_text;
	char** function(GtkClipboard* clipboard) c_gtk_clipboard_wait_for_uris;
	int function(GtkClipboard* clipboard) c_gtk_clipboard_wait_is_image_available;
	int function(GtkClipboard* clipboard, GtkTextBuffer* buffer) c_gtk_clipboard_wait_is_rich_text_available;
	int function(GtkClipboard* clipboard, GdkAtom target) c_gtk_clipboard_wait_is_target_available;
	int function(GtkClipboard* clipboard) c_gtk_clipboard_wait_is_text_available;
	int function(GtkClipboard* clipboard) c_gtk_clipboard_wait_is_uris_available;

	// gtk.ColorButton

	GType function() c_gtk_color_button_get_type;
	GtkWidget* function() c_gtk_color_button_new;
	GtkWidget* function(GdkColor* color) c_gtk_color_button_new_with_color;
	GtkWidget* function(GdkRGBA* rgba) c_gtk_color_button_new_with_rgba;
	ushort function(GtkColorButton* button) c_gtk_color_button_get_alpha;
	void function(GtkColorButton* button, GdkColor* color) c_gtk_color_button_get_color;
	void function(GtkColorButton* button, GdkRGBA* rgba) c_gtk_color_button_get_rgba;
	const(char)* function(GtkColorButton* button) c_gtk_color_button_get_title;
	int function(GtkColorButton* button) c_gtk_color_button_get_use_alpha;
	void function(GtkColorButton* button, ushort alpha) c_gtk_color_button_set_alpha;
	void function(GtkColorButton* button, GdkColor* color) c_gtk_color_button_set_color;
	void function(GtkColorButton* button, GdkRGBA* rgba) c_gtk_color_button_set_rgba;
	void function(GtkColorButton* button, const(char)* title) c_gtk_color_button_set_title;
	void function(GtkColorButton* button, int useAlpha) c_gtk_color_button_set_use_alpha;

	// gtk.ColorChooser

	GType function() c_gtk_color_chooser_get_type;
	void function(GtkColorChooser* chooser, GtkOrientation orientation, int colorsPerLine, int nColors, GdkRGBA* colors) c_gtk_color_chooser_add_palette;
	void function(GtkColorChooser* chooser, GdkRGBA* color) c_gtk_color_chooser_get_rgba;
	int function(GtkColorChooser* chooser) c_gtk_color_chooser_get_use_alpha;
	void function(GtkColorChooser* chooser, GdkRGBA* color) c_gtk_color_chooser_set_rgba;
	void function(GtkColorChooser* chooser, int useAlpha) c_gtk_color_chooser_set_use_alpha;

	// gtk.ColorChooserDialog

	GType function() c_gtk_color_chooser_dialog_get_type;
	GtkWidget* function(const(char)* title, GtkWindow* parent) c_gtk_color_chooser_dialog_new;

	// gtk.ColorChooserWidget

	GType function() c_gtk_color_chooser_widget_get_type;
	GtkWidget* function() c_gtk_color_chooser_widget_new;

	// gtk.ColorSelection

	GType function() c_gtk_color_selection_get_type;
	GtkWidget* function() c_gtk_color_selection_new;
	int function(const(char)* str, GdkColor** colors, int* nColors) c_gtk_color_selection_palette_from_string;
	char* function(GdkColor* colors, int nColors) c_gtk_color_selection_palette_to_string;
	GtkColorSelectionChangePaletteWithScreenFunc function(GtkColorSelectionChangePaletteWithScreenFunc func) c_gtk_color_selection_set_change_palette_with_screen_hook;
	ushort function(GtkColorSelection* colorsel) c_gtk_color_selection_get_current_alpha;
	void function(GtkColorSelection* colorsel, GdkColor* color) c_gtk_color_selection_get_current_color;
	void function(GtkColorSelection* colorsel, GdkRGBA* rgba) c_gtk_color_selection_get_current_rgba;
	int function(GtkColorSelection* colorsel) c_gtk_color_selection_get_has_opacity_control;
	int function(GtkColorSelection* colorsel) c_gtk_color_selection_get_has_palette;
	ushort function(GtkColorSelection* colorsel) c_gtk_color_selection_get_previous_alpha;
	void function(GtkColorSelection* colorsel, GdkColor* color) c_gtk_color_selection_get_previous_color;
	void function(GtkColorSelection* colorsel, GdkRGBA* rgba) c_gtk_color_selection_get_previous_rgba;
	int function(GtkColorSelection* colorsel) c_gtk_color_selection_is_adjusting;
	void function(GtkColorSelection* colorsel, ushort alpha) c_gtk_color_selection_set_current_alpha;
	void function(GtkColorSelection* colorsel, GdkColor* color) c_gtk_color_selection_set_current_color;
	void function(GtkColorSelection* colorsel, GdkRGBA* rgba) c_gtk_color_selection_set_current_rgba;
	void function(GtkColorSelection* colorsel, int hasOpacity) c_gtk_color_selection_set_has_opacity_control;
	void function(GtkColorSelection* colorsel, int hasPalette) c_gtk_color_selection_set_has_palette;
	void function(GtkColorSelection* colorsel, ushort alpha) c_gtk_color_selection_set_previous_alpha;
	void function(GtkColorSelection* colorsel, GdkColor* color) c_gtk_color_selection_set_previous_color;
	void function(GtkColorSelection* colorsel, GdkRGBA* rgba) c_gtk_color_selection_set_previous_rgba;

	// gtk.ColorSelectionDialog

	GType function() c_gtk_color_selection_dialog_get_type;
	GtkWidget* function(const(char)* title) c_gtk_color_selection_dialog_new;
	GtkWidget* function(GtkColorSelectionDialog* colorsel) c_gtk_color_selection_dialog_get_color_selection;

	// gtk.ComboBox

	GType function() c_gtk_combo_box_get_type;
	GtkWidget* function() c_gtk_combo_box_new;
	GtkWidget* function(GtkCellArea* area) c_gtk_combo_box_new_with_area;
	GtkWidget* function(GtkCellArea* area) c_gtk_combo_box_new_with_area_and_entry;
	GtkWidget* function() c_gtk_combo_box_new_with_entry;
	GtkWidget* function(GtkTreeModel* model) c_gtk_combo_box_new_with_model;
	GtkWidget* function(GtkTreeModel* model) c_gtk_combo_box_new_with_model_and_entry;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_active;
	const(char)* function(GtkComboBox* comboBox) c_gtk_combo_box_get_active_id;
	int function(GtkComboBox* comboBox, GtkTreeIter* iter) c_gtk_combo_box_get_active_iter;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_add_tearoffs;
	GtkSensitivityType function(GtkComboBox* comboBox) c_gtk_combo_box_get_button_sensitivity;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_column_span_column;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_entry_text_column;
	int function(GtkComboBox* combo) c_gtk_combo_box_get_focus_on_click;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_has_entry;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_id_column;
	GtkTreeModel* function(GtkComboBox* comboBox) c_gtk_combo_box_get_model;
	AtkObject* function(GtkComboBox* comboBox) c_gtk_combo_box_get_popup_accessible;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_popup_fixed_width;
	GtkTreeViewRowSeparatorFunc function(GtkComboBox* comboBox) c_gtk_combo_box_get_row_separator_func;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_row_span_column;
	const(char)* function(GtkComboBox* comboBox) c_gtk_combo_box_get_title;
	int function(GtkComboBox* comboBox) c_gtk_combo_box_get_wrap_width;
	void function(GtkComboBox* comboBox) c_gtk_combo_box_popdown;
	void function(GtkComboBox* comboBox) c_gtk_combo_box_popup;
	void function(GtkComboBox* comboBox, GdkDevice* device) c_gtk_combo_box_popup_for_device;
	void function(GtkComboBox* comboBox, int index) c_gtk_combo_box_set_active;
	int function(GtkComboBox* comboBox, const(char)* activeId) c_gtk_combo_box_set_active_id;
	void function(GtkComboBox* comboBox, GtkTreeIter* iter) c_gtk_combo_box_set_active_iter;
	void function(GtkComboBox* comboBox, int addTearoffs) c_gtk_combo_box_set_add_tearoffs;
	void function(GtkComboBox* comboBox, GtkSensitivityType sensitivity) c_gtk_combo_box_set_button_sensitivity;
	void function(GtkComboBox* comboBox, int columnSpan) c_gtk_combo_box_set_column_span_column;
	void function(GtkComboBox* comboBox, int textColumn) c_gtk_combo_box_set_entry_text_column;
	void function(GtkComboBox* combo, int focusOnClick) c_gtk_combo_box_set_focus_on_click;
	void function(GtkComboBox* comboBox, int idColumn) c_gtk_combo_box_set_id_column;
	void function(GtkComboBox* comboBox, GtkTreeModel* model) c_gtk_combo_box_set_model;
	void function(GtkComboBox* comboBox, int fixed) c_gtk_combo_box_set_popup_fixed_width;
	void function(GtkComboBox* comboBox, GtkTreeViewRowSeparatorFunc func, void* data, GDestroyNotify destroy) c_gtk_combo_box_set_row_separator_func;
	void function(GtkComboBox* comboBox, int rowSpan) c_gtk_combo_box_set_row_span_column;
	void function(GtkComboBox* comboBox, const(char)* title) c_gtk_combo_box_set_title;
	void function(GtkComboBox* comboBox, int width) c_gtk_combo_box_set_wrap_width;

	// gtk.ComboBoxAccessible

	GType function() c_gtk_combo_box_accessible_get_type;

	// gtk.ComboBoxText

	GType function() c_gtk_combo_box_text_get_type;
	GtkWidget* function() c_gtk_combo_box_text_new;
	GtkWidget* function() c_gtk_combo_box_text_new_with_entry;
	void function(GtkComboBoxText* comboBox, const(char)* id, const(char)* text) c_gtk_combo_box_text_append;
	void function(GtkComboBoxText* comboBox, const(char)* text) c_gtk_combo_box_text_append_text;
	char* function(GtkComboBoxText* comboBox) c_gtk_combo_box_text_get_active_text;
	void function(GtkComboBoxText* comboBox, int position, const(char)* id, const(char)* text) c_gtk_combo_box_text_insert;
	void function(GtkComboBoxText* comboBox, int position, const(char)* text) c_gtk_combo_box_text_insert_text;
	void function(GtkComboBoxText* comboBox, const(char)* id, const(char)* text) c_gtk_combo_box_text_prepend;
	void function(GtkComboBoxText* comboBox, const(char)* text) c_gtk_combo_box_text_prepend_text;
	void function(GtkComboBoxText* comboBox, int position) c_gtk_combo_box_text_remove;
	void function(GtkComboBoxText* comboBox) c_gtk_combo_box_text_remove_all;

	// gtk.Container

	GType function() c_gtk_container_get_type;
	void function(GtkContainer* container, GtkWidget* widget) c_gtk_container_add;
	void function(GtkContainer* container, GtkWidget* widget, const(char)* firstPropName, ... ) c_gtk_container_add_with_properties;
	void function(GtkContainer* container) c_gtk_container_check_resize;
	void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropName, ... ) c_gtk_container_child_get;
	void function(GtkContainer* container, GtkWidget* child, const(char)* propertyName, GValue* value) c_gtk_container_child_get_property;
	void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropertyName, void* varArgs) c_gtk_container_child_get_valist;
	void function(GtkContainer* container, GtkWidget* child, const(char)* childProperty) c_gtk_container_child_notify;
	void function(GtkContainer* container, GtkWidget* child, GParamSpec* pspec) c_gtk_container_child_notify_by_pspec;
	void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropName, ... ) c_gtk_container_child_set;
	void function(GtkContainer* container, GtkWidget* child, const(char)* propertyName, GValue* value) c_gtk_container_child_set_property;
	void function(GtkContainer* container, GtkWidget* child, const(char)* firstPropertyName, void* varArgs) c_gtk_container_child_set_valist;
	GType function(GtkContainer* container) c_gtk_container_child_type;
	void function(GtkContainer* container, GtkCallback callback, void* callbackData) c_gtk_container_forall;
	void function(GtkContainer* container, GtkCallback callback, void* callbackData) c_gtk_container_foreach;
	uint function(GtkContainer* container) c_gtk_container_get_border_width;
	GList* function(GtkContainer* container) c_gtk_container_get_children;
	int function(GtkContainer* container, GList** focusableWidgets) c_gtk_container_get_focus_chain;
	GtkWidget* function(GtkContainer* container) c_gtk_container_get_focus_child;
	GtkAdjustment* function(GtkContainer* container) c_gtk_container_get_focus_hadjustment;
	GtkAdjustment* function(GtkContainer* container) c_gtk_container_get_focus_vadjustment;
	GtkWidgetPath* function(GtkContainer* container, GtkWidget* child) c_gtk_container_get_path_for_child;
	GtkResizeMode function(GtkContainer* container) c_gtk_container_get_resize_mode;
	void function(GtkContainer* container, GtkWidget* child, cairo_t* cr) c_gtk_container_propagate_draw;
	void function(GtkContainer* container, GtkWidget* widget) c_gtk_container_remove;
	void function(GtkContainer* container) c_gtk_container_resize_children;
	void function(GtkContainer* container, uint borderWidth) c_gtk_container_set_border_width;
	void function(GtkContainer* container, GList* focusableWidgets) c_gtk_container_set_focus_chain;
	void function(GtkContainer* container, GtkWidget* child) c_gtk_container_set_focus_child;
	void function(GtkContainer* container, GtkAdjustment* adjustment) c_gtk_container_set_focus_hadjustment;
	void function(GtkContainer* container, GtkAdjustment* adjustment) c_gtk_container_set_focus_vadjustment;
	void function(GtkContainer* container, int needsRedraws) c_gtk_container_set_reallocate_redraws;
	void function(GtkContainer* container, GtkResizeMode resizeMode) c_gtk_container_set_resize_mode;
	void function(GtkContainer* container) c_gtk_container_unset_focus_chain;

	// gtk.ContainerAccessible

	GType function() c_gtk_container_accessible_get_type;

	// gtk.ContainerCellAccessible

	GType function() c_gtk_container_cell_accessible_get_type;
	GtkContainerCellAccessible* function() c_gtk_container_cell_accessible_new;
	void function(GtkContainerCellAccessible* container, GtkCellAccessible* child) c_gtk_container_cell_accessible_add_child;
	GList* function(GtkContainerCellAccessible* container) c_gtk_container_cell_accessible_get_children;
	void function(GtkContainerCellAccessible* container, GtkCellAccessible* child) c_gtk_container_cell_accessible_remove_child;

	// gtk.ContainerClass

	GParamSpec* function(GObjectClass* cclass, const(char)* propertyName) c_gtk_container_class_find_child_property;
	void function(GtkContainerClass* klass) c_gtk_container_class_handle_border_width;
	void function(GtkContainerClass* cclass, uint nPspecs, GParamSpec** pspecs) c_gtk_container_class_install_child_properties;
	void function(GtkContainerClass* cclass, uint propertyId, GParamSpec* pspec) c_gtk_container_class_install_child_property;
	GParamSpec** function(GObjectClass* cclass, uint* nProperties) c_gtk_container_class_list_child_properties;

	// gtk.CssProvider

	GType function() c_gtk_css_provider_get_type;
	GtkCssProvider* function() c_gtk_css_provider_new;
	GtkCssProvider* function() c_gtk_css_provider_get_default;
	GtkCssProvider* function(const(char)* name, const(char)* variant) c_gtk_css_provider_get_named;
	int function(GtkCssProvider* cssProvider, char* data, ptrdiff_t length, GError** err) c_gtk_css_provider_load_from_data;
	int function(GtkCssProvider* cssProvider, GFile* file, GError** err) c_gtk_css_provider_load_from_file;
	int function(GtkCssProvider* cssProvider, const(char)* path, GError** err) c_gtk_css_provider_load_from_path;
	void function(GtkCssProvider* cssProvider, const(char)* resourcePath) c_gtk_css_provider_load_from_resource;
	char* function(GtkCssProvider* provider) c_gtk_css_provider_to_string;

	// gtk.CssSection

	GType function() c_gtk_css_section_get_type;
	uint function(GtkCssSection* section) c_gtk_css_section_get_end_line;
	uint function(GtkCssSection* section) c_gtk_css_section_get_end_position;
	GFile* function(GtkCssSection* section) c_gtk_css_section_get_file;
	GtkCssSection* function(GtkCssSection* section) c_gtk_css_section_get_parent;
	GtkCssSectionType function(GtkCssSection* section) c_gtk_css_section_get_section_type;
	uint function(GtkCssSection* section) c_gtk_css_section_get_start_line;
	uint function(GtkCssSection* section) c_gtk_css_section_get_start_position;
	GtkCssSection* function(GtkCssSection* section) c_gtk_css_section_ref;
	void function(GtkCssSection* section) c_gtk_css_section_unref;

	// gtk.Dialog

	GType function() c_gtk_dialog_get_type;
	GtkWidget* function() c_gtk_dialog_new;
	GtkWidget* function(const(char)* title, GtkWindow* parent, GtkDialogFlags flags, const(char)* firstButtonText, ... ) c_gtk_dialog_new_with_buttons;
	void function(GtkDialog* dialog, GtkWidget* child, int responseId) c_gtk_dialog_add_action_widget;
	GtkWidget* function(GtkDialog* dialog, const(char)* buttonText, int responseId) c_gtk_dialog_add_button;
	void function(GtkDialog* dialog, const(char)* firstButtonText, ... ) c_gtk_dialog_add_buttons;
	GtkWidget* function(GtkDialog* dialog) c_gtk_dialog_get_action_area;
	GtkWidget* function(GtkDialog* dialog) c_gtk_dialog_get_content_area;
	GtkWidget* function(GtkDialog* dialog) c_gtk_dialog_get_header_bar;
	int function(GtkDialog* dialog, GtkWidget* widget) c_gtk_dialog_get_response_for_widget;
	GtkWidget* function(GtkDialog* dialog, int responseId) c_gtk_dialog_get_widget_for_response;
	void function(GtkDialog* dialog, int responseId) c_gtk_dialog_response;
	int function(GtkDialog* dialog) c_gtk_dialog_run;
	void function(GtkDialog* dialog, int firstResponseId, ... ) c_gtk_dialog_set_alternative_button_order;
	void function(GtkDialog* dialog, int nParams, int* newOrder) c_gtk_dialog_set_alternative_button_order_from_array;
	void function(GtkDialog* dialog, int responseId) c_gtk_dialog_set_default_response;
	void function(GtkDialog* dialog, int responseId, int setting) c_gtk_dialog_set_response_sensitive;
	int function(GdkScreen* screen) c_gtk_alternative_dialog_button_order;

	// gtk.DrawingArea

	GType function() c_gtk_drawing_area_get_type;
	GtkWidget* function() c_gtk_drawing_area_new;

	// gtk.Editable

	GType function() c_gtk_editable_get_type;
	void function(GtkEditable* editable) c_gtk_editable_copy_clipboard;
	void function(GtkEditable* editable) c_gtk_editable_cut_clipboard;
	void function(GtkEditable* editable) c_gtk_editable_delete_selection;
	void function(GtkEditable* editable, int startPos, int endPos) c_gtk_editable_delete_text;
	char* function(GtkEditable* editable, int startPos, int endPos) c_gtk_editable_get_chars;
	int function(GtkEditable* editable) c_gtk_editable_get_editable;
	int function(GtkEditable* editable) c_gtk_editable_get_position;
	int function(GtkEditable* editable, int* startPos, int* endPos) c_gtk_editable_get_selection_bounds;
	void function(GtkEditable* editable, const(char)* newText, int newTextLength, int* position) c_gtk_editable_insert_text;
	void function(GtkEditable* editable) c_gtk_editable_paste_clipboard;
	void function(GtkEditable* editable, int startPos, int endPos) c_gtk_editable_select_region;
	void function(GtkEditable* editable, int isEditable) c_gtk_editable_set_editable;
	void function(GtkEditable* editable, int position) c_gtk_editable_set_position;

	// gtk.Entry

	GType function() c_gtk_entry_get_type;
	GtkWidget* function() c_gtk_entry_new;
	GtkWidget* function(GtkEntryBuffer* buffer) c_gtk_entry_new_with_buffer;
	int function(GtkEntry* entry) c_gtk_entry_get_activates_default;
	float function(GtkEntry* entry) c_gtk_entry_get_alignment;
	PangoAttrList* function(GtkEntry* entry) c_gtk_entry_get_attributes;
	GtkEntryBuffer* function(GtkEntry* entry) c_gtk_entry_get_buffer;
	GtkEntryCompletion* function(GtkEntry* entry) c_gtk_entry_get_completion;
	int function(GtkEntry* entry) c_gtk_entry_get_current_icon_drag_source;
	GtkAdjustment* function(GtkEntry* entry) c_gtk_entry_get_cursor_hadjustment;
	int function(GtkEntry* entry) c_gtk_entry_get_has_frame;
	int function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_activatable;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, GdkRectangle* iconArea) c_gtk_entry_get_icon_area;
	int function(GtkEntry* entry, int x, int y) c_gtk_entry_get_icon_at_pos;
	GIcon* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_gicon;
	const(char)* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_name;
	GdkPixbuf* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_pixbuf;
	int function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_sensitive;
	const(char)* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_stock;
	GtkImageType function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_storage_type;
	char* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_tooltip_markup;
	char* function(GtkEntry* entry, GtkEntryIconPosition iconPos) c_gtk_entry_get_icon_tooltip_text;
	GtkBorder* function(GtkEntry* entry) c_gtk_entry_get_inner_border;
	GtkInputHints function(GtkEntry* entry) c_gtk_entry_get_input_hints;
	GtkInputPurpose function(GtkEntry* entry) c_gtk_entry_get_input_purpose;
	dchar function(GtkEntry* entry) c_gtk_entry_get_invisible_char;
	PangoLayout* function(GtkEntry* entry) c_gtk_entry_get_layout;
	void function(GtkEntry* entry, int* x, int* y) c_gtk_entry_get_layout_offsets;
	int function(GtkEntry* entry) c_gtk_entry_get_max_length;
	int function(GtkEntry* entry) c_gtk_entry_get_max_width_chars;
	int function(GtkEntry* entry) c_gtk_entry_get_overwrite_mode;
	const(char)* function(GtkEntry* entry) c_gtk_entry_get_placeholder_text;
	double function(GtkEntry* entry) c_gtk_entry_get_progress_fraction;
	double function(GtkEntry* entry) c_gtk_entry_get_progress_pulse_step;
	PangoTabArray* function(GtkEntry* entry) c_gtk_entry_get_tabs;
	const(char)* function(GtkEntry* entry) c_gtk_entry_get_text;
	void function(GtkEntry* entry, GdkRectangle* textArea) c_gtk_entry_get_text_area;
	ushort function(GtkEntry* entry) c_gtk_entry_get_text_length;
	int function(GtkEntry* entry) c_gtk_entry_get_visibility;
	int function(GtkEntry* entry) c_gtk_entry_get_width_chars;
	void function(GtkEntry* entry) c_gtk_entry_grab_focus_without_selecting;
	int function(GtkEntry* entry, GdkEventKey* event) c_gtk_entry_im_context_filter_keypress;
	int function(GtkEntry* entry, int layoutIndex) c_gtk_entry_layout_index_to_text_index;
	void function(GtkEntry* entry) c_gtk_entry_progress_pulse;
	void function(GtkEntry* entry) c_gtk_entry_reset_im_context;
	void function(GtkEntry* entry, int setting) c_gtk_entry_set_activates_default;
	void function(GtkEntry* entry, float xalign) c_gtk_entry_set_alignment;
	void function(GtkEntry* entry, PangoAttrList* attrs) c_gtk_entry_set_attributes;
	void function(GtkEntry* entry, GtkEntryBuffer* buffer) c_gtk_entry_set_buffer;
	void function(GtkEntry* entry, GtkEntryCompletion* completion) c_gtk_entry_set_completion;
	void function(GtkEntry* entry, GtkAdjustment* adjustment) c_gtk_entry_set_cursor_hadjustment;
	void function(GtkEntry* entry, int setting) c_gtk_entry_set_has_frame;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, int activatable) c_gtk_entry_set_icon_activatable;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, GtkTargetList* targetList, GdkDragAction actions) c_gtk_entry_set_icon_drag_source;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, GIcon* icon) c_gtk_entry_set_icon_from_gicon;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* iconName) c_gtk_entry_set_icon_from_icon_name;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, GdkPixbuf* pixbuf) c_gtk_entry_set_icon_from_pixbuf;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* stockId) c_gtk_entry_set_icon_from_stock;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, int sensitive) c_gtk_entry_set_icon_sensitive;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* tooltip) c_gtk_entry_set_icon_tooltip_markup;
	void function(GtkEntry* entry, GtkEntryIconPosition iconPos, const(char)* tooltip) c_gtk_entry_set_icon_tooltip_text;
	void function(GtkEntry* entry, GtkBorder* border) c_gtk_entry_set_inner_border;
	void function(GtkEntry* entry, GtkInputHints hints) c_gtk_entry_set_input_hints;
	void function(GtkEntry* entry, GtkInputPurpose purpose) c_gtk_entry_set_input_purpose;
	void function(GtkEntry* entry, dchar ch) c_gtk_entry_set_invisible_char;
	void function(GtkEntry* entry, int max) c_gtk_entry_set_max_length;
	void function(GtkEntry* entry, int nChars) c_gtk_entry_set_max_width_chars;
	void function(GtkEntry* entry, int overwrite) c_gtk_entry_set_overwrite_mode;
	void function(GtkEntry* entry, const(char)* text) c_gtk_entry_set_placeholder_text;
	void function(GtkEntry* entry, double fraction) c_gtk_entry_set_progress_fraction;
	void function(GtkEntry* entry, double fraction) c_gtk_entry_set_progress_pulse_step;
	void function(GtkEntry* entry, PangoTabArray* tabs) c_gtk_entry_set_tabs;
	void function(GtkEntry* entry, const(char)* text) c_gtk_entry_set_text;
	void function(GtkEntry* entry, int visible) c_gtk_entry_set_visibility;
	void function(GtkEntry* entry, int nChars) c_gtk_entry_set_width_chars;
	int function(GtkEntry* entry, int textIndex) c_gtk_entry_text_index_to_layout_index;
	void function(GtkEntry* entry) c_gtk_entry_unset_invisible_char;

	// gtk.EntryAccessible

	GType function() c_gtk_entry_accessible_get_type;

	// gtk.EntryBuffer

	GType function() c_gtk_entry_buffer_get_type;
	GtkEntryBuffer* function(const(char)* initialChars, int nInitialChars) c_gtk_entry_buffer_new;
	uint function(GtkEntryBuffer* buffer, uint position, int nChars) c_gtk_entry_buffer_delete_text;
	void function(GtkEntryBuffer* buffer, uint position, uint nChars) c_gtk_entry_buffer_emit_deleted_text;
	void function(GtkEntryBuffer* buffer, uint position, const(char)* chars, uint nChars) c_gtk_entry_buffer_emit_inserted_text;
	size_t function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_bytes;
	uint function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_length;
	int function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_max_length;
	const(char)* function(GtkEntryBuffer* buffer) c_gtk_entry_buffer_get_text;
	uint function(GtkEntryBuffer* buffer, uint position, const(char)* chars, int nChars) c_gtk_entry_buffer_insert_text;
	void function(GtkEntryBuffer* buffer, int maxLength) c_gtk_entry_buffer_set_max_length;
	void function(GtkEntryBuffer* buffer, const(char)* chars, int nChars) c_gtk_entry_buffer_set_text;

	// gtk.EntryCompletion

	GType function() c_gtk_entry_completion_get_type;
	GtkEntryCompletion* function() c_gtk_entry_completion_new;
	GtkEntryCompletion* function(GtkCellArea* area) c_gtk_entry_completion_new_with_area;
	void function(GtkEntryCompletion* completion) c_gtk_entry_completion_complete;
	char* function(GtkEntryCompletion* completion, const(char)* key) c_gtk_entry_completion_compute_prefix;
	void function(GtkEntryCompletion* completion, int index) c_gtk_entry_completion_delete_action;
	const(char)* function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_completion_prefix;
	GtkWidget* function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_entry;
	int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_inline_completion;
	int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_inline_selection;
	int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_minimum_key_length;
	GtkTreeModel* function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_model;
	int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_popup_completion;
	int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_popup_set_width;
	int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_popup_single_match;
	int function(GtkEntryCompletion* completion) c_gtk_entry_completion_get_text_column;
	void function(GtkEntryCompletion* completion, int index, const(char)* markup) c_gtk_entry_completion_insert_action_markup;
	void function(GtkEntryCompletion* completion, int index, const(char)* text) c_gtk_entry_completion_insert_action_text;
	void function(GtkEntryCompletion* completion) c_gtk_entry_completion_insert_prefix;
	void function(GtkEntryCompletion* completion, int inlineCompletion) c_gtk_entry_completion_set_inline_completion;
	void function(GtkEntryCompletion* completion, int inlineSelection) c_gtk_entry_completion_set_inline_selection;
	void function(GtkEntryCompletion* completion, GtkEntryCompletionMatchFunc func, void* funcData, GDestroyNotify funcNotify) c_gtk_entry_completion_set_match_func;
	void function(GtkEntryCompletion* completion, int length) c_gtk_entry_completion_set_minimum_key_length;
	void function(GtkEntryCompletion* completion, GtkTreeModel* model) c_gtk_entry_completion_set_model;
	void function(GtkEntryCompletion* completion, int popupCompletion) c_gtk_entry_completion_set_popup_completion;
	void function(GtkEntryCompletion* completion, int popupSetWidth) c_gtk_entry_completion_set_popup_set_width;
	void function(GtkEntryCompletion* completion, int popupSingleMatch) c_gtk_entry_completion_set_popup_single_match;
	void function(GtkEntryCompletion* completion, int column) c_gtk_entry_completion_set_text_column;

	// gtk.EntryIconAccessible

	GType function() c_gtk_entry_icon_accessible_get_type;

	// gtk.EventBox

	GType function() c_gtk_event_box_get_type;
	GtkWidget* function() c_gtk_event_box_new;
	int function(GtkEventBox* eventBox) c_gtk_event_box_get_above_child;
	int function(GtkEventBox* eventBox) c_gtk_event_box_get_visible_window;
	void function(GtkEventBox* eventBox, int aboveChild) c_gtk_event_box_set_above_child;
	void function(GtkEventBox* eventBox, int visibleWindow) c_gtk_event_box_set_visible_window;

	// gtk.EventController

	GType function() c_gtk_event_controller_get_type;
	GtkPropagationPhase function(GtkEventController* controller) c_gtk_event_controller_get_propagation_phase;
	GtkWidget* function(GtkEventController* controller) c_gtk_event_controller_get_widget;
	int function(GtkEventController* controller, GdkEvent* event) c_gtk_event_controller_handle_event;
	void function(GtkEventController* controller) c_gtk_event_controller_reset;
	void function(GtkEventController* controller, GtkPropagationPhase phase) c_gtk_event_controller_set_propagation_phase;

	// gtk.Expander

	GType function() c_gtk_expander_get_type;
	GtkWidget* function(const(char)* label) c_gtk_expander_new;
	GtkWidget* function(const(char)* label) c_gtk_expander_new_with_mnemonic;
	int function(GtkExpander* expander) c_gtk_expander_get_expanded;
	const(char)* function(GtkExpander* expander) c_gtk_expander_get_label;
	int function(GtkExpander* expander) c_gtk_expander_get_label_fill;
	GtkWidget* function(GtkExpander* expander) c_gtk_expander_get_label_widget;
	int function(GtkExpander* expander) c_gtk_expander_get_resize_toplevel;
	int function(GtkExpander* expander) c_gtk_expander_get_spacing;
	int function(GtkExpander* expander) c_gtk_expander_get_use_markup;
	int function(GtkExpander* expander) c_gtk_expander_get_use_underline;
	void function(GtkExpander* expander, int expanded) c_gtk_expander_set_expanded;
	void function(GtkExpander* expander, const(char)* label) c_gtk_expander_set_label;
	void function(GtkExpander* expander, int labelFill) c_gtk_expander_set_label_fill;
	void function(GtkExpander* expander, GtkWidget* labelWidget) c_gtk_expander_set_label_widget;
	void function(GtkExpander* expander, int resizeToplevel) c_gtk_expander_set_resize_toplevel;
	void function(GtkExpander* expander, int spacing) c_gtk_expander_set_spacing;
	void function(GtkExpander* expander, int useMarkup) c_gtk_expander_set_use_markup;
	void function(GtkExpander* expander, int useUnderline) c_gtk_expander_set_use_underline;

	// gtk.ExpanderAccessible

	GType function() c_gtk_expander_accessible_get_type;

	// gtk.FileChooser

	GType function() c_gtk_file_chooser_get_type;
	void function(GtkFileChooser* chooser, const(char)* id, const(char)* label, char** options, char** optionLabels) c_gtk_file_chooser_add_choice;
	void function(GtkFileChooser* chooser, GtkFileFilter* filter) c_gtk_file_chooser_add_filter;
	int function(GtkFileChooser* chooser, char* folder, GError** err) c_gtk_file_chooser_add_shortcut_folder;
	int function(GtkFileChooser* chooser, const(char)* uri, GError** err) c_gtk_file_chooser_add_shortcut_folder_uri;
	GtkFileChooserAction function(GtkFileChooser* chooser) c_gtk_file_chooser_get_action;
	const(char)* function(GtkFileChooser* chooser, const(char)* id) c_gtk_file_chooser_get_choice;
	int function(GtkFileChooser* chooser) c_gtk_file_chooser_get_create_folders;
	char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_folder;
	GFile* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_folder_file;
	char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_folder_uri;
	char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_current_name;
	int function(GtkFileChooser* chooser) c_gtk_file_chooser_get_do_overwrite_confirmation;
	GtkWidget* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_extra_widget;
	GFile* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_file;
	char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_filename;
	GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_filenames;
	GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_files;
	GtkFileFilter* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_filter;
	int function(GtkFileChooser* chooser) c_gtk_file_chooser_get_local_only;
	GFile* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_file;
	char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_filename;
	char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_uri;
	GtkWidget* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_widget;
	int function(GtkFileChooser* chooser) c_gtk_file_chooser_get_preview_widget_active;
	int function(GtkFileChooser* chooser) c_gtk_file_chooser_get_select_multiple;
	int function(GtkFileChooser* chooser) c_gtk_file_chooser_get_show_hidden;
	char* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_uri;
	GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_get_uris;
	int function(GtkFileChooser* chooser) c_gtk_file_chooser_get_use_preview_label;
	GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_list_filters;
	GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_list_shortcut_folder_uris;
	GSList* function(GtkFileChooser* chooser) c_gtk_file_chooser_list_shortcut_folders;
	void function(GtkFileChooser* chooser, const(char)* id) c_gtk_file_chooser_remove_choice;
	void function(GtkFileChooser* chooser, GtkFileFilter* filter) c_gtk_file_chooser_remove_filter;
	int function(GtkFileChooser* chooser, char* folder, GError** err) c_gtk_file_chooser_remove_shortcut_folder;
	int function(GtkFileChooser* chooser, const(char)* uri, GError** err) c_gtk_file_chooser_remove_shortcut_folder_uri;
	void function(GtkFileChooser* chooser) c_gtk_file_chooser_select_all;
	int function(GtkFileChooser* chooser, GFile* file, GError** err) c_gtk_file_chooser_select_file;
	int function(GtkFileChooser* chooser, char* filename) c_gtk_file_chooser_select_filename;
	int function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_select_uri;
	void function(GtkFileChooser* chooser, GtkFileChooserAction action) c_gtk_file_chooser_set_action;
	void function(GtkFileChooser* chooser, const(char)* id, const(char)* option) c_gtk_file_chooser_set_choice;
	void function(GtkFileChooser* chooser, int createFolders) c_gtk_file_chooser_set_create_folders;
	int function(GtkFileChooser* chooser, char* filename) c_gtk_file_chooser_set_current_folder;
	int function(GtkFileChooser* chooser, GFile* file, GError** err) c_gtk_file_chooser_set_current_folder_file;
	int function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_set_current_folder_uri;
	void function(GtkFileChooser* chooser, char* name) c_gtk_file_chooser_set_current_name;
	void function(GtkFileChooser* chooser, int doOverwriteConfirmation) c_gtk_file_chooser_set_do_overwrite_confirmation;
	void function(GtkFileChooser* chooser, GtkWidget* extraWidget) c_gtk_file_chooser_set_extra_widget;
	int function(GtkFileChooser* chooser, GFile* file, GError** err) c_gtk_file_chooser_set_file;
	int function(GtkFileChooser* chooser, char* filename) c_gtk_file_chooser_set_filename;
	void function(GtkFileChooser* chooser, GtkFileFilter* filter) c_gtk_file_chooser_set_filter;
	void function(GtkFileChooser* chooser, int localOnly) c_gtk_file_chooser_set_local_only;
	void function(GtkFileChooser* chooser, GtkWidget* previewWidget) c_gtk_file_chooser_set_preview_widget;
	void function(GtkFileChooser* chooser, int active) c_gtk_file_chooser_set_preview_widget_active;
	void function(GtkFileChooser* chooser, int selectMultiple) c_gtk_file_chooser_set_select_multiple;
	void function(GtkFileChooser* chooser, int showHidden) c_gtk_file_chooser_set_show_hidden;
	int function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_set_uri;
	void function(GtkFileChooser* chooser, int useLabel) c_gtk_file_chooser_set_use_preview_label;
	void function(GtkFileChooser* chooser) c_gtk_file_chooser_unselect_all;
	void function(GtkFileChooser* chooser, GFile* file) c_gtk_file_chooser_unselect_file;
	void function(GtkFileChooser* chooser, char* filename) c_gtk_file_chooser_unselect_filename;
	void function(GtkFileChooser* chooser, const(char)* uri) c_gtk_file_chooser_unselect_uri;

	// gtk.FileChooserButton

	GType function() c_gtk_file_chooser_button_get_type;
	GtkWidget* function(const(char)* title, GtkFileChooserAction action) c_gtk_file_chooser_button_new;
	GtkWidget* function(GtkWidget* dialog) c_gtk_file_chooser_button_new_with_dialog;
	int function(GtkFileChooserButton* button) c_gtk_file_chooser_button_get_focus_on_click;
	const(char)* function(GtkFileChooserButton* button) c_gtk_file_chooser_button_get_title;
	int function(GtkFileChooserButton* button) c_gtk_file_chooser_button_get_width_chars;
	void function(GtkFileChooserButton* button, int focusOnClick) c_gtk_file_chooser_button_set_focus_on_click;
	void function(GtkFileChooserButton* button, const(char)* title) c_gtk_file_chooser_button_set_title;
	void function(GtkFileChooserButton* button, int nChars) c_gtk_file_chooser_button_set_width_chars;

	// gtk.FileChooserDialog

	GType function() c_gtk_file_chooser_dialog_get_type;
	GtkWidget* function(const(char)* title, GtkWindow* parent, GtkFileChooserAction action, const(char)* firstButtonText, ... ) c_gtk_file_chooser_dialog_new;

	// gtk.FileChooserNative

	GType function() c_gtk_file_chooser_native_get_type;
	GtkFileChooserNative* function(const(char)* title, GtkWindow* parent, GtkFileChooserAction action, const(char)* acceptLabel, const(char)* cancelLabel) c_gtk_file_chooser_native_new;
	const(char)* function(GtkFileChooserNative* self) c_gtk_file_chooser_native_get_accept_label;
	const(char)* function(GtkFileChooserNative* self) c_gtk_file_chooser_native_get_cancel_label;
	void function(GtkFileChooserNative* self, const(char)* acceptLabel) c_gtk_file_chooser_native_set_accept_label;
	void function(GtkFileChooserNative* self, const(char)* cancelLabel) c_gtk_file_chooser_native_set_cancel_label;

	// gtk.FileChooserWidget

	GType function() c_gtk_file_chooser_widget_get_type;
	GtkWidget* function(GtkFileChooserAction action) c_gtk_file_chooser_widget_new;

	// gtk.FileFilter

	GType function() c_gtk_file_filter_get_type;
	GtkFileFilter* function() c_gtk_file_filter_new;
	GtkFileFilter* function(GVariant* variant) c_gtk_file_filter_new_from_gvariant;
	void function(GtkFileFilter* filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, void* data, GDestroyNotify notify) c_gtk_file_filter_add_custom;
	void function(GtkFileFilter* filter, const(char)* mimeType) c_gtk_file_filter_add_mime_type;
	void function(GtkFileFilter* filter, const(char)* pattern) c_gtk_file_filter_add_pattern;
	void function(GtkFileFilter* filter) c_gtk_file_filter_add_pixbuf_formats;
	int function(GtkFileFilter* filter, GtkFileFilterInfo* filterInfo) c_gtk_file_filter_filter;
	const(char)* function(GtkFileFilter* filter) c_gtk_file_filter_get_name;
	GtkFileFilterFlags function(GtkFileFilter* filter) c_gtk_file_filter_get_needed;
	void function(GtkFileFilter* filter, const(char)* name) c_gtk_file_filter_set_name;
	GVariant* function(GtkFileFilter* filter) c_gtk_file_filter_to_gvariant;

	// gtk.Fixed

	GType function() c_gtk_fixed_get_type;
	GtkWidget* function() c_gtk_fixed_new;
	void function(GtkFixed* fixed, GtkWidget* widget, int x, int y) c_gtk_fixed_move;
	void function(GtkFixed* fixed, GtkWidget* widget, int x, int y) c_gtk_fixed_put;

	// gtk.FlowBox

	GType function() c_gtk_flow_box_get_type;
	GtkWidget* function() c_gtk_flow_box_new;
	void function(GtkFlowBox* box, GListModel* model, GtkFlowBoxCreateWidgetFunc createWidgetFunc, void* userData, GDestroyNotify userDataFreeFunc) c_gtk_flow_box_bind_model;
	int function(GtkFlowBox* box) c_gtk_flow_box_get_activate_on_single_click;
	GtkFlowBoxChild* function(GtkFlowBox* box, int idx) c_gtk_flow_box_get_child_at_index;
	uint function(GtkFlowBox* box) c_gtk_flow_box_get_column_spacing;
	int function(GtkFlowBox* box) c_gtk_flow_box_get_homogeneous;
	uint function(GtkFlowBox* box) c_gtk_flow_box_get_max_children_per_line;
	uint function(GtkFlowBox* box) c_gtk_flow_box_get_min_children_per_line;
	uint function(GtkFlowBox* box) c_gtk_flow_box_get_row_spacing;
	GList* function(GtkFlowBox* box) c_gtk_flow_box_get_selected_children;
	GtkSelectionMode function(GtkFlowBox* box) c_gtk_flow_box_get_selection_mode;
	void function(GtkFlowBox* box, GtkWidget* widget, int position) c_gtk_flow_box_insert;
	void function(GtkFlowBox* box) c_gtk_flow_box_invalidate_filter;
	void function(GtkFlowBox* box) c_gtk_flow_box_invalidate_sort;
	void function(GtkFlowBox* box) c_gtk_flow_box_select_all;
	void function(GtkFlowBox* box, GtkFlowBoxChild* child) c_gtk_flow_box_select_child;
	void function(GtkFlowBox* box, GtkFlowBoxForeachFunc func, void* data) c_gtk_flow_box_selected_foreach;
	void function(GtkFlowBox* box, int single) c_gtk_flow_box_set_activate_on_single_click;
	void function(GtkFlowBox* box, uint spacing) c_gtk_flow_box_set_column_spacing;
	void function(GtkFlowBox* box, GtkFlowBoxFilterFunc filterFunc, void* userData, GDestroyNotify destroy) c_gtk_flow_box_set_filter_func;
	void function(GtkFlowBox* box, GtkAdjustment* adjustment) c_gtk_flow_box_set_hadjustment;
	void function(GtkFlowBox* box, int homogeneous) c_gtk_flow_box_set_homogeneous;
	void function(GtkFlowBox* box, uint nChildren) c_gtk_flow_box_set_max_children_per_line;
	void function(GtkFlowBox* box, uint nChildren) c_gtk_flow_box_set_min_children_per_line;
	void function(GtkFlowBox* box, uint spacing) c_gtk_flow_box_set_row_spacing;
	void function(GtkFlowBox* box, GtkSelectionMode mode) c_gtk_flow_box_set_selection_mode;
	void function(GtkFlowBox* box, GtkFlowBoxSortFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_flow_box_set_sort_func;
	void function(GtkFlowBox* box, GtkAdjustment* adjustment) c_gtk_flow_box_set_vadjustment;
	void function(GtkFlowBox* box) c_gtk_flow_box_unselect_all;
	void function(GtkFlowBox* box, GtkFlowBoxChild* child) c_gtk_flow_box_unselect_child;

	// gtk.FlowBoxAccessible

	GType function() c_gtk_flow_box_accessible_get_type;

	// gtk.FlowBoxChild

	GType function() c_gtk_flow_box_child_get_type;
	GtkWidget* function() c_gtk_flow_box_child_new;
	void function(GtkFlowBoxChild* child) c_gtk_flow_box_child_changed;
	int function(GtkFlowBoxChild* child) c_gtk_flow_box_child_get_index;
	int function(GtkFlowBoxChild* child) c_gtk_flow_box_child_is_selected;

	// gtk.FlowBoxChildAccessible

	GType function() c_gtk_flow_box_child_accessible_get_type;

	// gtk.FontButton

	GType function() c_gtk_font_button_get_type;
	GtkWidget* function() c_gtk_font_button_new;
	GtkWidget* function(const(char)* fontname) c_gtk_font_button_new_with_font;
	const(char)* function(GtkFontButton* fontButton) c_gtk_font_button_get_font_name;
	int function(GtkFontButton* fontButton) c_gtk_font_button_get_show_size;
	int function(GtkFontButton* fontButton) c_gtk_font_button_get_show_style;
	const(char)* function(GtkFontButton* fontButton) c_gtk_font_button_get_title;
	int function(GtkFontButton* fontButton) c_gtk_font_button_get_use_font;
	int function(GtkFontButton* fontButton) c_gtk_font_button_get_use_size;
	int function(GtkFontButton* fontButton, const(char)* fontname) c_gtk_font_button_set_font_name;
	void function(GtkFontButton* fontButton, int showSize) c_gtk_font_button_set_show_size;
	void function(GtkFontButton* fontButton, int showStyle) c_gtk_font_button_set_show_style;
	void function(GtkFontButton* fontButton, const(char)* title) c_gtk_font_button_set_title;
	void function(GtkFontButton* fontButton, int useFont) c_gtk_font_button_set_use_font;
	void function(GtkFontButton* fontButton, int useSize) c_gtk_font_button_set_use_size;

	// gtk.FontChooser

	GType function() c_gtk_font_chooser_get_type;
	char* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font;
	PangoFontDescription* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_desc;
	PangoFontFace* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_face;
	PangoFontFamily* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_family;
	PangoFontMap* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_map;
	int function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_font_size;
	char* function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_preview_text;
	int function(GtkFontChooser* fontchooser) c_gtk_font_chooser_get_show_preview_entry;
	void function(GtkFontChooser* fontchooser, GtkFontFilterFunc filter, void* userData, GDestroyNotify destroy) c_gtk_font_chooser_set_filter_func;
	void function(GtkFontChooser* fontchooser, const(char)* fontname) c_gtk_font_chooser_set_font;
	void function(GtkFontChooser* fontchooser, PangoFontDescription* fontDesc) c_gtk_font_chooser_set_font_desc;
	void function(GtkFontChooser* fontchooser, PangoFontMap* fontmap) c_gtk_font_chooser_set_font_map;
	void function(GtkFontChooser* fontchooser, const(char)* text) c_gtk_font_chooser_set_preview_text;
	void function(GtkFontChooser* fontchooser, int showPreviewEntry) c_gtk_font_chooser_set_show_preview_entry;

	// gtk.FontChooserDialog

	GType function() c_gtk_font_chooser_dialog_get_type;
	GtkWidget* function(const(char)* title, GtkWindow* parent) c_gtk_font_chooser_dialog_new;

	// gtk.FontChooserWidget

	GType function() c_gtk_font_chooser_widget_get_type;
	GtkWidget* function() c_gtk_font_chooser_widget_new;

	// gtk.FontSelection

	GType function() c_gtk_font_selection_get_type;
	GtkWidget* function() c_gtk_font_selection_new;
	PangoFontFace* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_face;
	GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_face_list;
	PangoFontFamily* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_family;
	GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_family_list;
	char* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_font_name;
	GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_preview_entry;
	const(char)* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_preview_text;
	int function(GtkFontSelection* fontsel) c_gtk_font_selection_get_size;
	GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_size_entry;
	GtkWidget* function(GtkFontSelection* fontsel) c_gtk_font_selection_get_size_list;
	int function(GtkFontSelection* fontsel, const(char)* fontname) c_gtk_font_selection_set_font_name;
	void function(GtkFontSelection* fontsel, const(char)* text) c_gtk_font_selection_set_preview_text;

	// gtk.FontSelectionDialog

	GType function() c_gtk_font_selection_dialog_get_type;
	GtkWidget* function(const(char)* title) c_gtk_font_selection_dialog_new;
	GtkWidget* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_cancel_button;
	char* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_font_name;
	GtkWidget* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_font_selection;
	GtkWidget* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_ok_button;
	const(char)* function(GtkFontSelectionDialog* fsd) c_gtk_font_selection_dialog_get_preview_text;
	int function(GtkFontSelectionDialog* fsd, const(char)* fontname) c_gtk_font_selection_dialog_set_font_name;
	void function(GtkFontSelectionDialog* fsd, const(char)* text) c_gtk_font_selection_dialog_set_preview_text;

	// gtk.Frame

	GType function() c_gtk_frame_get_type;
	GtkWidget* function(const(char)* label) c_gtk_frame_new;
	const(char)* function(GtkFrame* frame) c_gtk_frame_get_label;
	void function(GtkFrame* frame, float* xalign, float* yalign) c_gtk_frame_get_label_align;
	GtkWidget* function(GtkFrame* frame) c_gtk_frame_get_label_widget;
	GtkShadowType function(GtkFrame* frame) c_gtk_frame_get_shadow_type;
	void function(GtkFrame* frame, const(char)* label) c_gtk_frame_set_label;
	void function(GtkFrame* frame, float xalign, float yalign) c_gtk_frame_set_label_align;
	void function(GtkFrame* frame, GtkWidget* labelWidget) c_gtk_frame_set_label_widget;
	void function(GtkFrame* frame, GtkShadowType type) c_gtk_frame_set_shadow_type;

	// gtk.FrameAccessible

	GType function() c_gtk_frame_accessible_get_type;

	// gtk.GLArea

	GType function() c_gtk_gl_area_get_type;
	GtkWidget* function() c_gtk_gl_area_new;
	void function(GtkGLArea* area) c_gtk_gl_area_attach_buffers;
	int function(GtkGLArea* area) c_gtk_gl_area_get_auto_render;
	GdkGLContext* function(GtkGLArea* area) c_gtk_gl_area_get_context;
	GError* function(GtkGLArea* area) c_gtk_gl_area_get_error;
	int function(GtkGLArea* area) c_gtk_gl_area_get_has_alpha;
	int function(GtkGLArea* area) c_gtk_gl_area_get_has_depth_buffer;
	int function(GtkGLArea* area) c_gtk_gl_area_get_has_stencil_buffer;
	void function(GtkGLArea* area, int* major, int* minor) c_gtk_gl_area_get_required_version;
	int function(GtkGLArea* area) c_gtk_gl_area_get_use_es;
	void function(GtkGLArea* area) c_gtk_gl_area_make_current;
	void function(GtkGLArea* area) c_gtk_gl_area_queue_render;
	void function(GtkGLArea* area, int autoRender) c_gtk_gl_area_set_auto_render;
	void function(GtkGLArea* area, GError* error) c_gtk_gl_area_set_error;
	void function(GtkGLArea* area, int hasAlpha) c_gtk_gl_area_set_has_alpha;
	void function(GtkGLArea* area, int hasDepthBuffer) c_gtk_gl_area_set_has_depth_buffer;
	void function(GtkGLArea* area, int hasStencilBuffer) c_gtk_gl_area_set_has_stencil_buffer;
	void function(GtkGLArea* area, int major, int minor) c_gtk_gl_area_set_required_version;
	void function(GtkGLArea* area, int useEs) c_gtk_gl_area_set_use_es;

	// gtk.Gesture

	GType function() c_gtk_gesture_get_type;
	int function(GtkGesture* gesture, GdkRectangle* rect) c_gtk_gesture_get_bounding_box;
	int function(GtkGesture* gesture, double* x, double* y) c_gtk_gesture_get_bounding_box_center;
	GdkDevice* function(GtkGesture* gesture) c_gtk_gesture_get_device;
	GList* function(GtkGesture* gesture) c_gtk_gesture_get_group;
	GdkEvent* function(GtkGesture* gesture, GdkEventSequence* sequence) c_gtk_gesture_get_last_event;
	GdkEventSequence* function(GtkGesture* gesture) c_gtk_gesture_get_last_updated_sequence;
	int function(GtkGesture* gesture, GdkEventSequence* sequence, double* x, double* y) c_gtk_gesture_get_point;
	GtkEventSequenceState function(GtkGesture* gesture, GdkEventSequence* sequence) c_gtk_gesture_get_sequence_state;
	GList* function(GtkGesture* gesture) c_gtk_gesture_get_sequences;
	GdkWindow* function(GtkGesture* gesture) c_gtk_gesture_get_window;
	void function(GtkGesture* groupGesture, GtkGesture* gesture) c_gtk_gesture_group;
	int function(GtkGesture* gesture, GdkEventSequence* sequence) c_gtk_gesture_handles_sequence;
	int function(GtkGesture* gesture) c_gtk_gesture_is_active;
	int function(GtkGesture* gesture, GtkGesture* other) c_gtk_gesture_is_grouped_with;
	int function(GtkGesture* gesture) c_gtk_gesture_is_recognized;
	int function(GtkGesture* gesture, GdkEventSequence* sequence, GtkEventSequenceState state) c_gtk_gesture_set_sequence_state;
	int function(GtkGesture* gesture, GtkEventSequenceState state) c_gtk_gesture_set_state;
	void function(GtkGesture* gesture, GdkWindow* window) c_gtk_gesture_set_window;
	void function(GtkGesture* gesture) c_gtk_gesture_ungroup;

	// gtk.GestureDrag

	GType function() c_gtk_gesture_drag_get_type;
	GtkGesture* function(GtkWidget* widget) c_gtk_gesture_drag_new;
	int function(GtkGestureDrag* gesture, double* x, double* y) c_gtk_gesture_drag_get_offset;
	int function(GtkGestureDrag* gesture, double* x, double* y) c_gtk_gesture_drag_get_start_point;

	// gtk.GestureLongPress

	GType function() c_gtk_gesture_long_press_get_type;
	GtkGesture* function(GtkWidget* widget) c_gtk_gesture_long_press_new;

	// gtk.GestureMultiPress

	GType function() c_gtk_gesture_multi_press_get_type;
	GtkGesture* function(GtkWidget* widget) c_gtk_gesture_multi_press_new;
	int function(GtkGestureMultiPress* gesture, GdkRectangle* rect) c_gtk_gesture_multi_press_get_area;
	void function(GtkGestureMultiPress* gesture, GdkRectangle* rect) c_gtk_gesture_multi_press_set_area;

	// gtk.GesturePan

	GType function() c_gtk_gesture_pan_get_type;
	GtkGesture* function(GtkWidget* widget, GtkOrientation orientation) c_gtk_gesture_pan_new;
	GtkOrientation function(GtkGesturePan* gesture) c_gtk_gesture_pan_get_orientation;
	void function(GtkGesturePan* gesture, GtkOrientation orientation) c_gtk_gesture_pan_set_orientation;

	// gtk.GestureRotate

	GType function() c_gtk_gesture_rotate_get_type;
	GtkGesture* function(GtkWidget* widget) c_gtk_gesture_rotate_new;
	double function(GtkGestureRotate* gesture) c_gtk_gesture_rotate_get_angle_delta;

	// gtk.GestureSingle

	GType function() c_gtk_gesture_single_get_type;
	uint function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_button;
	uint function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_current_button;
	GdkEventSequence* function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_current_sequence;
	int function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_exclusive;
	int function(GtkGestureSingle* gesture) c_gtk_gesture_single_get_touch_only;
	void function(GtkGestureSingle* gesture, uint button) c_gtk_gesture_single_set_button;
	void function(GtkGestureSingle* gesture, int exclusive) c_gtk_gesture_single_set_exclusive;
	void function(GtkGestureSingle* gesture, int touchOnly) c_gtk_gesture_single_set_touch_only;

	// gtk.GestureSwipe

	GType function() c_gtk_gesture_swipe_get_type;
	GtkGesture* function(GtkWidget* widget) c_gtk_gesture_swipe_new;
	int function(GtkGestureSwipe* gesture, double* velocityX, double* velocityY) c_gtk_gesture_swipe_get_velocity;

	// gtk.GestureZoom

	GType function() c_gtk_gesture_zoom_get_type;
	GtkGesture* function(GtkWidget* widget) c_gtk_gesture_zoom_new;
	double function(GtkGestureZoom* gesture) c_gtk_gesture_zoom_get_scale_delta;

	// gtk.Gradient

	GType function() c_gtk_gradient_get_type;
	GtkGradient* function(double x0, double y0, double x1, double y1) c_gtk_gradient_new_linear;
	GtkGradient* function(double x0, double y0, double radius0, double x1, double y1, double radius1) c_gtk_gradient_new_radial;
	void function(GtkGradient* gradient, double offset, GtkSymbolicColor* color) c_gtk_gradient_add_color_stop;
	GtkGradient* function(GtkGradient* gradient) c_gtk_gradient_ref;
	int function(GtkGradient* gradient, GtkStyleProperties* props, cairo_pattern_t** resolvedGradient) c_gtk_gradient_resolve;
	cairo_pattern_t* function(GtkGradient* gradient, GtkStyleContext* context) c_gtk_gradient_resolve_for_context;
	char* function(GtkGradient* gradient) c_gtk_gradient_to_string;
	void function(GtkGradient* gradient) c_gtk_gradient_unref;

	// gtk.Grid

	GType function() c_gtk_grid_get_type;
	GtkWidget* function() c_gtk_grid_new;
	void function(GtkGrid* grid, GtkWidget* child, int left, int top, int width, int height) c_gtk_grid_attach;
	void function(GtkGrid* grid, GtkWidget* child, GtkWidget* sibling, GtkPositionType side, int width, int height) c_gtk_grid_attach_next_to;
	int function(GtkGrid* grid) c_gtk_grid_get_baseline_row;
	GtkWidget* function(GtkGrid* grid, int left, int top) c_gtk_grid_get_child_at;
	int function(GtkGrid* grid) c_gtk_grid_get_column_homogeneous;
	uint function(GtkGrid* grid) c_gtk_grid_get_column_spacing;
	GtkBaselinePosition function(GtkGrid* grid, int row) c_gtk_grid_get_row_baseline_position;
	int function(GtkGrid* grid) c_gtk_grid_get_row_homogeneous;
	uint function(GtkGrid* grid) c_gtk_grid_get_row_spacing;
	void function(GtkGrid* grid, int position) c_gtk_grid_insert_column;
	void function(GtkGrid* grid, GtkWidget* sibling, GtkPositionType side) c_gtk_grid_insert_next_to;
	void function(GtkGrid* grid, int position) c_gtk_grid_insert_row;
	void function(GtkGrid* grid, int position) c_gtk_grid_remove_column;
	void function(GtkGrid* grid, int position) c_gtk_grid_remove_row;
	void function(GtkGrid* grid, int row) c_gtk_grid_set_baseline_row;
	void function(GtkGrid* grid, int homogeneous) c_gtk_grid_set_column_homogeneous;
	void function(GtkGrid* grid, uint spacing) c_gtk_grid_set_column_spacing;
	void function(GtkGrid* grid, int row, GtkBaselinePosition pos) c_gtk_grid_set_row_baseline_position;
	void function(GtkGrid* grid, int homogeneous) c_gtk_grid_set_row_homogeneous;
	void function(GtkGrid* grid, uint spacing) c_gtk_grid_set_row_spacing;

	// gtk.HBox

	GType function() c_gtk_hbox_get_type;
	GtkWidget* function(int homogeneous, int spacing) c_gtk_hbox_new;

	// gtk.HButtonBox

	GType function() c_gtk_hbutton_box_get_type;
	GtkWidget* function() c_gtk_hbutton_box_new;

	// gtk.HPaned

	GType function() c_gtk_hpaned_get_type;
	GtkWidget* function() c_gtk_hpaned_new;

	// gtk.HSV

	GType function() c_gtk_hsv_get_type;
	GtkWidget* function() c_gtk_hsv_new;
	void function(double h, double s, double v, double* r, double* g, double* b) c_gtk_hsv_to_rgb;
	void function(GtkHSV* hsv, double* h, double* s, double* v) c_gtk_hsv_get_color;
	void function(GtkHSV* hsv, int* size, int* ringWidth) c_gtk_hsv_get_metrics;
	int function(GtkHSV* hsv) c_gtk_hsv_is_adjusting;
	void function(GtkHSV* hsv, double h, double s, double v) c_gtk_hsv_set_color;
	void function(GtkHSV* hsv, int size, int ringWidth) c_gtk_hsv_set_metrics;
	void function(double r, double g, double b, double* h, double* s, double* v) c_gtk_rgb_to_hsv;

	// gtk.HScale

	GType function() c_gtk_hscale_get_type;
	GtkWidget* function(GtkAdjustment* adjustment) c_gtk_hscale_new;
	GtkWidget* function(double min, double max, double step) c_gtk_hscale_new_with_range;

	// gtk.HScrollbar

	GType function() c_gtk_hscrollbar_get_type;
	GtkWidget* function(GtkAdjustment* adjustment) c_gtk_hscrollbar_new;

	// gtk.HSeparator

	GType function() c_gtk_hseparator_get_type;
	GtkWidget* function() c_gtk_hseparator_new;

	// gtk.HandleBox

	GType function() c_gtk_handle_box_get_type;
	GtkWidget* function() c_gtk_handle_box_new;
	int function(GtkHandleBox* handleBox) c_gtk_handle_box_get_child_detached;
	GtkPositionType function(GtkHandleBox* handleBox) c_gtk_handle_box_get_handle_position;
	GtkShadowType function(GtkHandleBox* handleBox) c_gtk_handle_box_get_shadow_type;
	GtkPositionType function(GtkHandleBox* handleBox) c_gtk_handle_box_get_snap_edge;
	void function(GtkHandleBox* handleBox, GtkPositionType position) c_gtk_handle_box_set_handle_position;
	void function(GtkHandleBox* handleBox, GtkShadowType type) c_gtk_handle_box_set_shadow_type;
	void function(GtkHandleBox* handleBox, GtkPositionType edge) c_gtk_handle_box_set_snap_edge;

	// gtk.HeaderBar

	GType function() c_gtk_header_bar_get_type;
	GtkWidget* function() c_gtk_header_bar_new;
	GtkWidget* function(GtkHeaderBar* bar) c_gtk_header_bar_get_custom_title;
	const(char)* function(GtkHeaderBar* bar) c_gtk_header_bar_get_decoration_layout;
	int function(GtkHeaderBar* bar) c_gtk_header_bar_get_has_subtitle;
	int function(GtkHeaderBar* bar) c_gtk_header_bar_get_show_close_button;
	const(char)* function(GtkHeaderBar* bar) c_gtk_header_bar_get_subtitle;
	const(char)* function(GtkHeaderBar* bar) c_gtk_header_bar_get_title;
	void function(GtkHeaderBar* bar, GtkWidget* child) c_gtk_header_bar_pack_end;
	void function(GtkHeaderBar* bar, GtkWidget* child) c_gtk_header_bar_pack_start;
	void function(GtkHeaderBar* bar, GtkWidget* titleWidget) c_gtk_header_bar_set_custom_title;
	void function(GtkHeaderBar* bar, const(char)* layout) c_gtk_header_bar_set_decoration_layout;
	void function(GtkHeaderBar* bar, int setting) c_gtk_header_bar_set_has_subtitle;
	void function(GtkHeaderBar* bar, int setting) c_gtk_header_bar_set_show_close_button;
	void function(GtkHeaderBar* bar, const(char)* subtitle) c_gtk_header_bar_set_subtitle;
	void function(GtkHeaderBar* bar, const(char)* title) c_gtk_header_bar_set_title;

	// gtk.IMContext

	GType function() c_gtk_im_context_get_type;
	int function(GtkIMContext* context, int offset, int nChars) c_gtk_im_context_delete_surrounding;
	int function(GtkIMContext* context, GdkEventKey* event) c_gtk_im_context_filter_keypress;
	void function(GtkIMContext* context) c_gtk_im_context_focus_in;
	void function(GtkIMContext* context) c_gtk_im_context_focus_out;
	void function(GtkIMContext* context, char** str, PangoAttrList** attrs, int* cursorPos) c_gtk_im_context_get_preedit_string;
	int function(GtkIMContext* context, char** text, int* cursorIndex) c_gtk_im_context_get_surrounding;
	void function(GtkIMContext* context) c_gtk_im_context_reset;
	void function(GtkIMContext* context, GdkWindow* window) c_gtk_im_context_set_client_window;
	void function(GtkIMContext* context, GdkRectangle* area) c_gtk_im_context_set_cursor_location;
	void function(GtkIMContext* context, const(char)* text, int len, int cursorIndex) c_gtk_im_context_set_surrounding;
	void function(GtkIMContext* context, int usePreedit) c_gtk_im_context_set_use_preedit;

	// gtk.IMContextSimple

	GType function() c_gtk_im_context_simple_get_type;
	GtkIMContext* function() c_gtk_im_context_simple_new;
	void function(GtkIMContextSimple* contextSimple, const(char)* composeFile) c_gtk_im_context_simple_add_compose_file;
	void function(GtkIMContextSimple* contextSimple, ushort* data, int maxSeqLen, int nSeqs) c_gtk_im_context_simple_add_table;

	// gtk.IMMulticontext

	GType function() c_gtk_im_multicontext_get_type;
	GtkIMContext* function() c_gtk_im_multicontext_new;
	void function(GtkIMMulticontext* context, GtkMenuShell* menushell) c_gtk_im_multicontext_append_menuitems;
	const(char)* function(GtkIMMulticontext* context) c_gtk_im_multicontext_get_context_id;
	void function(GtkIMMulticontext* context, const(char)* contextId) c_gtk_im_multicontext_set_context_id;

	// gtk.IconFactory

	GType function() c_gtk_icon_factory_get_type;
	GtkIconFactory* function() c_gtk_icon_factory_new;
	GtkIconSet* function(const(char)* stockId) c_gtk_icon_factory_lookup_default;
	void function(GtkIconFactory* factory, const(char)* stockId, GtkIconSet* iconSet) c_gtk_icon_factory_add;
	void function(GtkIconFactory* factory) c_gtk_icon_factory_add_default;
	GtkIconSet* function(GtkIconFactory* factory, const(char)* stockId) c_gtk_icon_factory_lookup;
	void function(GtkIconFactory* factory) c_gtk_icon_factory_remove_default;

	// gtk.IconInfo

	GType function() c_gtk_icon_info_get_type;
	GtkIconInfo* function(GtkIconTheme* iconTheme, GdkPixbuf* pixbuf) c_gtk_icon_info_new_for_pixbuf;
	GtkIconInfo* function(GtkIconInfo* iconInfo) c_gtk_icon_info_copy;
	void function(GtkIconInfo* iconInfo) c_gtk_icon_info_free;
	int function(GtkIconInfo* iconInfo, GdkPoint** points, int* nPoints) c_gtk_icon_info_get_attach_points;
	int function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_base_scale;
	int function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_base_size;
	GdkPixbuf* function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_builtin_pixbuf;
	const(char)* function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_display_name;
	int function(GtkIconInfo* iconInfo, GdkRectangle* rectangle) c_gtk_icon_info_get_embedded_rect;
	char* function(GtkIconInfo* iconInfo) c_gtk_icon_info_get_filename;
	int function(GtkIconInfo* iconInfo) c_gtk_icon_info_is_symbolic;
	GdkPixbuf* function(GtkIconInfo* iconInfo, GError** err) c_gtk_icon_info_load_icon;
	void function(GtkIconInfo* iconInfo, GCancellable* cancellable, GAsyncReadyCallback callback, void* userData) c_gtk_icon_info_load_icon_async;
	GdkPixbuf* function(GtkIconInfo* iconInfo, GAsyncResult* res, GError** err) c_gtk_icon_info_load_icon_finish;
	cairo_surface_t* function(GtkIconInfo* iconInfo, GdkWindow* forWindow, GError** err) c_gtk_icon_info_load_surface;
	GdkPixbuf* function(GtkIconInfo* iconInfo, GdkRGBA* fg, GdkRGBA* successColor, GdkRGBA* warningColor, GdkRGBA* errorColor, int* wasSymbolic, GError** err) c_gtk_icon_info_load_symbolic;
	void function(GtkIconInfo* iconInfo, GdkRGBA* fg, GdkRGBA* successColor, GdkRGBA* warningColor, GdkRGBA* errorColor, GCancellable* cancellable, GAsyncReadyCallback callback, void* userData) c_gtk_icon_info_load_symbolic_async;
	GdkPixbuf* function(GtkIconInfo* iconInfo, GAsyncResult* res, int* wasSymbolic, GError** err) c_gtk_icon_info_load_symbolic_finish;
	GdkPixbuf* function(GtkIconInfo* iconInfo, GtkStyleContext* context, int* wasSymbolic, GError** err) c_gtk_icon_info_load_symbolic_for_context;
	void function(GtkIconInfo* iconInfo, GtkStyleContext* context, GCancellable* cancellable, GAsyncReadyCallback callback, void* userData) c_gtk_icon_info_load_symbolic_for_context_async;
	GdkPixbuf* function(GtkIconInfo* iconInfo, GAsyncResult* res, int* wasSymbolic, GError** err) c_gtk_icon_info_load_symbolic_for_context_finish;
	GdkPixbuf* function(GtkIconInfo* iconInfo, GtkStyle* style, GtkStateType state, int* wasSymbolic, GError** err) c_gtk_icon_info_load_symbolic_for_style;
	void function(GtkIconInfo* iconInfo, int rawCoordinates) c_gtk_icon_info_set_raw_coordinates;

	// gtk.IconSet

	GType function() c_gtk_icon_set_get_type;
	GtkIconSet* function() c_gtk_icon_set_new;
	GtkIconSet* function(GdkPixbuf* pixbuf) c_gtk_icon_set_new_from_pixbuf;
	void function(GtkIconSet* iconSet, GtkIconSource* source) c_gtk_icon_set_add_source;
	GtkIconSet* function(GtkIconSet* iconSet) c_gtk_icon_set_copy;
	void function(GtkIconSet* iconSet, GtkIconSize** sizes, int* nSizes) c_gtk_icon_set_get_sizes;
	GtkIconSet* function(GtkIconSet* iconSet) c_gtk_icon_set_ref;
	GdkPixbuf* function(GtkIconSet* iconSet, GtkStyle* style, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget* widget, const(char)* detail) c_gtk_icon_set_render_icon;
	GdkPixbuf* function(GtkIconSet* iconSet, GtkStyleContext* context, GtkIconSize size) c_gtk_icon_set_render_icon_pixbuf;
	cairo_surface_t* function(GtkIconSet* iconSet, GtkStyleContext* context, GtkIconSize size, int scale, GdkWindow* forWindow) c_gtk_icon_set_render_icon_surface;
	void function(GtkIconSet* iconSet) c_gtk_icon_set_unref;

	// gtk.IconSource

	GType function() c_gtk_icon_source_get_type;
	GtkIconSource* function() c_gtk_icon_source_new;
	GtkIconSource* function(GtkIconSource* source) c_gtk_icon_source_copy;
	void function(GtkIconSource* source) c_gtk_icon_source_free;
	GtkTextDirection function(GtkIconSource* source) c_gtk_icon_source_get_direction;
	int function(GtkIconSource* source) c_gtk_icon_source_get_direction_wildcarded;
	char* function(GtkIconSource* source) c_gtk_icon_source_get_filename;
	const(char)* function(GtkIconSource* source) c_gtk_icon_source_get_icon_name;
	GdkPixbuf* function(GtkIconSource* source) c_gtk_icon_source_get_pixbuf;
	GtkIconSize function(GtkIconSource* source) c_gtk_icon_source_get_size;
	int function(GtkIconSource* source) c_gtk_icon_source_get_size_wildcarded;
	GtkStateType function(GtkIconSource* source) c_gtk_icon_source_get_state;
	int function(GtkIconSource* source) c_gtk_icon_source_get_state_wildcarded;
	void function(GtkIconSource* source, GtkTextDirection direction) c_gtk_icon_source_set_direction;
	void function(GtkIconSource* source, int setting) c_gtk_icon_source_set_direction_wildcarded;
	void function(GtkIconSource* source, char* filename) c_gtk_icon_source_set_filename;
	void function(GtkIconSource* source, const(char)* iconName) c_gtk_icon_source_set_icon_name;
	void function(GtkIconSource* source, GdkPixbuf* pixbuf) c_gtk_icon_source_set_pixbuf;
	void function(GtkIconSource* source, GtkIconSize size) c_gtk_icon_source_set_size;
	void function(GtkIconSource* source, int setting) c_gtk_icon_source_set_size_wildcarded;
	void function(GtkIconSource* source, GtkStateType state) c_gtk_icon_source_set_state;
	void function(GtkIconSource* source, int setting) c_gtk_icon_source_set_state_wildcarded;

	// gtk.IconTheme

	GType function() c_gtk_icon_theme_get_type;
	GtkIconTheme* function() c_gtk_icon_theme_new;
	void function(const(char)* iconName, int size, GdkPixbuf* pixbuf) c_gtk_icon_theme_add_builtin_icon;
	GtkIconTheme* function() c_gtk_icon_theme_get_default;
	GtkIconTheme* function(GdkScreen* screen) c_gtk_icon_theme_get_for_screen;
	void function(GtkIconTheme* iconTheme, const(char)* path) c_gtk_icon_theme_add_resource_path;
	void function(GtkIconTheme* iconTheme, char* path) c_gtk_icon_theme_append_search_path;
	GtkIconInfo* function(GtkIconTheme* iconTheme, char* iconNames, int size, GtkIconLookupFlags flags) c_gtk_icon_theme_choose_icon;
	GtkIconInfo* function(GtkIconTheme* iconTheme, char* iconNames, int size, int scale, GtkIconLookupFlags flags) c_gtk_icon_theme_choose_icon_for_scale;
	char* function(GtkIconTheme* iconTheme) c_gtk_icon_theme_get_example_icon_name;
	int* function(GtkIconTheme* iconTheme, const(char)* iconName) c_gtk_icon_theme_get_icon_sizes;
	void function(GtkIconTheme* iconTheme, char** path, int* nElements) c_gtk_icon_theme_get_search_path;
	int function(GtkIconTheme* iconTheme, const(char)* iconName) c_gtk_icon_theme_has_icon;
	GList* function(GtkIconTheme* iconTheme) c_gtk_icon_theme_list_contexts;
	GList* function(GtkIconTheme* iconTheme, const(char)* context) c_gtk_icon_theme_list_icons;
	GdkPixbuf* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, GtkIconLookupFlags flags, GError** err) c_gtk_icon_theme_load_icon;
	GdkPixbuf* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, int scale, GtkIconLookupFlags flags, GError** err) c_gtk_icon_theme_load_icon_for_scale;
	cairo_surface_t* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, int scale, GdkWindow* forWindow, GtkIconLookupFlags flags, GError** err) c_gtk_icon_theme_load_surface;
	GtkIconInfo* function(GtkIconTheme* iconTheme, GIcon* icon, int size, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_by_gicon;
	GtkIconInfo* function(GtkIconTheme* iconTheme, GIcon* icon, int size, int scale, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_by_gicon_for_scale;
	GtkIconInfo* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_icon;
	GtkIconInfo* function(GtkIconTheme* iconTheme, const(char)* iconName, int size, int scale, GtkIconLookupFlags flags) c_gtk_icon_theme_lookup_icon_for_scale;
	void function(GtkIconTheme* iconTheme, char* path) c_gtk_icon_theme_prepend_search_path;
	int function(GtkIconTheme* iconTheme) c_gtk_icon_theme_rescan_if_needed;
	void function(GtkIconTheme* iconTheme, const(char)* themeName) c_gtk_icon_theme_set_custom_theme;
	void function(GtkIconTheme* iconTheme, GdkScreen* screen) c_gtk_icon_theme_set_screen;
	void function(GtkIconTheme* iconTheme, char** path, int nElements) c_gtk_icon_theme_set_search_path;

	// gtk.IconView

	GType function() c_gtk_icon_view_get_type;
	GtkWidget* function() c_gtk_icon_view_new;
	GtkWidget* function(GtkCellArea* area) c_gtk_icon_view_new_with_area;
	GtkWidget* function(GtkTreeModel* model) c_gtk_icon_view_new_with_model;
	void function(GtkIconView* iconView, int wx, int wy, int* bx, int* by) c_gtk_icon_view_convert_widget_to_bin_window_coords;
	cairo_surface_t* function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_create_drag_icon;
	void function(GtkIconView* iconView, GtkTargetEntry* targets, int nTargets, GdkDragAction actions) c_gtk_icon_view_enable_model_drag_dest;
	void function(GtkIconView* iconView, GdkModifierType startButtonMask, GtkTargetEntry* targets, int nTargets, GdkDragAction actions) c_gtk_icon_view_enable_model_drag_source;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_activate_on_single_click;
	int function(GtkIconView* iconView, GtkTreePath* path, GtkCellRenderer* cell, GdkRectangle* rect) c_gtk_icon_view_get_cell_rect;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_column_spacing;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_columns;
	int function(GtkIconView* iconView, GtkTreePath** path, GtkCellRenderer** cell) c_gtk_icon_view_get_cursor;
	int function(GtkIconView* iconView, int dragX, int dragY, GtkTreePath** path, GtkIconViewDropPosition* pos) c_gtk_icon_view_get_dest_item_at_pos;
	void function(GtkIconView* iconView, GtkTreePath** path, GtkIconViewDropPosition* pos) c_gtk_icon_view_get_drag_dest_item;
	int function(GtkIconView* iconView, int x, int y, GtkTreePath** path, GtkCellRenderer** cell) c_gtk_icon_view_get_item_at_pos;
	int function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_get_item_column;
	GtkOrientation function(GtkIconView* iconView) c_gtk_icon_view_get_item_orientation;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_item_padding;
	int function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_get_item_row;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_item_width;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_margin;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_markup_column;
	GtkTreeModel* function(GtkIconView* iconView) c_gtk_icon_view_get_model;
	GtkTreePath* function(GtkIconView* iconView, int x, int y) c_gtk_icon_view_get_path_at_pos;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_pixbuf_column;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_reorderable;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_row_spacing;
	GList* function(GtkIconView* iconView) c_gtk_icon_view_get_selected_items;
	GtkSelectionMode function(GtkIconView* iconView) c_gtk_icon_view_get_selection_mode;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_spacing;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_text_column;
	int function(GtkIconView* iconView) c_gtk_icon_view_get_tooltip_column;
	int function(GtkIconView* iconView, int* x, int* y, int keyboardTip, GtkTreeModel** model, GtkTreePath** path, GtkTreeIter* iter) c_gtk_icon_view_get_tooltip_context;
	int function(GtkIconView* iconView, GtkTreePath** startPath, GtkTreePath** endPath) c_gtk_icon_view_get_visible_range;
	void function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_item_activated;
	int function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_path_is_selected;
	void function(GtkIconView* iconView, GtkTreePath* path, int useAlign, float rowAlign, float colAlign) c_gtk_icon_view_scroll_to_path;
	void function(GtkIconView* iconView) c_gtk_icon_view_select_all;
	void function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_select_path;
	void function(GtkIconView* iconView, GtkIconViewForeachFunc func, void* data) c_gtk_icon_view_selected_foreach;
	void function(GtkIconView* iconView, int single) c_gtk_icon_view_set_activate_on_single_click;
	void function(GtkIconView* iconView, int columnSpacing) c_gtk_icon_view_set_column_spacing;
	void function(GtkIconView* iconView, int columns) c_gtk_icon_view_set_columns;
	void function(GtkIconView* iconView, GtkTreePath* path, GtkCellRenderer* cell, int startEditing) c_gtk_icon_view_set_cursor;
	void function(GtkIconView* iconView, GtkTreePath* path, GtkIconViewDropPosition pos) c_gtk_icon_view_set_drag_dest_item;
	void function(GtkIconView* iconView, GtkOrientation orientation) c_gtk_icon_view_set_item_orientation;
	void function(GtkIconView* iconView, int itemPadding) c_gtk_icon_view_set_item_padding;
	void function(GtkIconView* iconView, int itemWidth) c_gtk_icon_view_set_item_width;
	void function(GtkIconView* iconView, int margin) c_gtk_icon_view_set_margin;
	void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_markup_column;
	void function(GtkIconView* iconView, GtkTreeModel* model) c_gtk_icon_view_set_model;
	void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_pixbuf_column;
	void function(GtkIconView* iconView, int reorderable) c_gtk_icon_view_set_reorderable;
	void function(GtkIconView* iconView, int rowSpacing) c_gtk_icon_view_set_row_spacing;
	void function(GtkIconView* iconView, GtkSelectionMode mode) c_gtk_icon_view_set_selection_mode;
	void function(GtkIconView* iconView, int spacing) c_gtk_icon_view_set_spacing;
	void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_text_column;
	void function(GtkIconView* iconView, GtkTooltip* tooltip, GtkTreePath* path, GtkCellRenderer* cell) c_gtk_icon_view_set_tooltip_cell;
	void function(GtkIconView* iconView, int column) c_gtk_icon_view_set_tooltip_column;
	void function(GtkIconView* iconView, GtkTooltip* tooltip, GtkTreePath* path) c_gtk_icon_view_set_tooltip_item;
	void function(GtkIconView* iconView) c_gtk_icon_view_unselect_all;
	void function(GtkIconView* iconView, GtkTreePath* path) c_gtk_icon_view_unselect_path;
	void function(GtkIconView* iconView) c_gtk_icon_view_unset_model_drag_dest;
	void function(GtkIconView* iconView) c_gtk_icon_view_unset_model_drag_source;

	// gtk.IconViewAccessible

	GType function() c_gtk_icon_view_accessible_get_type;

	// gtk.Image

	GType function() c_gtk_image_get_type;
	GtkWidget* function() c_gtk_image_new;
	GtkWidget* function(GdkPixbufAnimation* animation) c_gtk_image_new_from_animation;
	GtkWidget* function(char* filename) c_gtk_image_new_from_file;
	GtkWidget* function(GIcon* icon, GtkIconSize size) c_gtk_image_new_from_gicon;
	GtkWidget* function(const(char)* iconName, GtkIconSize size) c_gtk_image_new_from_icon_name;
	GtkWidget* function(GtkIconSet* iconSet, GtkIconSize size) c_gtk_image_new_from_icon_set;
	GtkWidget* function(GdkPixbuf* pixbuf) c_gtk_image_new_from_pixbuf;
	GtkWidget* function(const(char)* resourcePath) c_gtk_image_new_from_resource;
	GtkWidget* function(const(char)* stockId, GtkIconSize size) c_gtk_image_new_from_stock;
	GtkWidget* function(cairo_surface_t* surface) c_gtk_image_new_from_surface;
	void function(GtkImage* image) c_gtk_image_clear;
	GdkPixbufAnimation* function(GtkImage* image) c_gtk_image_get_animation;
	void function(GtkImage* image, GIcon** gicon, GtkIconSize* size) c_gtk_image_get_gicon;
	void function(GtkImage* image, char** iconName, GtkIconSize* size) c_gtk_image_get_icon_name;
	void function(GtkImage* image, GtkIconSet** iconSet, GtkIconSize* size) c_gtk_image_get_icon_set;
	GdkPixbuf* function(GtkImage* image) c_gtk_image_get_pixbuf;
	int function(GtkImage* image) c_gtk_image_get_pixel_size;
	void function(GtkImage* image, char** stockId, GtkIconSize* size) c_gtk_image_get_stock;
	GtkImageType function(GtkImage* image) c_gtk_image_get_storage_type;
	void function(GtkImage* image, GdkPixbufAnimation* animation) c_gtk_image_set_from_animation;
	void function(GtkImage* image, char* filename) c_gtk_image_set_from_file;
	void function(GtkImage* image, GIcon* icon, GtkIconSize size) c_gtk_image_set_from_gicon;
	void function(GtkImage* image, const(char)* iconName, GtkIconSize size) c_gtk_image_set_from_icon_name;
	void function(GtkImage* image, GtkIconSet* iconSet, GtkIconSize size) c_gtk_image_set_from_icon_set;
	void function(GtkImage* image, GdkPixbuf* pixbuf) c_gtk_image_set_from_pixbuf;
	void function(GtkImage* image, const(char)* resourcePath) c_gtk_image_set_from_resource;
	void function(GtkImage* image, const(char)* stockId, GtkIconSize size) c_gtk_image_set_from_stock;
	void function(GtkImage* image, cairo_surface_t* surface) c_gtk_image_set_from_surface;
	void function(GtkImage* image, int pixelSize) c_gtk_image_set_pixel_size;

	// gtk.ImageAccessible

	GType function() c_gtk_image_accessible_get_type;

	// gtk.ImageCellAccessible

	GType function() c_gtk_image_cell_accessible_get_type;

	// gtk.ImageMenuItem

	GType function() c_gtk_image_menu_item_get_type;
	GtkWidget* function() c_gtk_image_menu_item_new;
	GtkWidget* function(const(char)* stockId, GtkAccelGroup* accelGroup) c_gtk_image_menu_item_new_from_stock;
	GtkWidget* function(const(char)* label) c_gtk_image_menu_item_new_with_label;
	GtkWidget* function(const(char)* label) c_gtk_image_menu_item_new_with_mnemonic;
	int function(GtkImageMenuItem* imageMenuItem) c_gtk_image_menu_item_get_always_show_image;
	GtkWidget* function(GtkImageMenuItem* imageMenuItem) c_gtk_image_menu_item_get_image;
	int function(GtkImageMenuItem* imageMenuItem) c_gtk_image_menu_item_get_use_stock;
	void function(GtkImageMenuItem* imageMenuItem, GtkAccelGroup* accelGroup) c_gtk_image_menu_item_set_accel_group;
	void function(GtkImageMenuItem* imageMenuItem, int alwaysShow) c_gtk_image_menu_item_set_always_show_image;
	void function(GtkImageMenuItem* imageMenuItem, GtkWidget* image) c_gtk_image_menu_item_set_image;
	void function(GtkImageMenuItem* imageMenuItem, int useStock) c_gtk_image_menu_item_set_use_stock;

	// gtk.InfoBar

	GType function() c_gtk_info_bar_get_type;
	GtkWidget* function() c_gtk_info_bar_new;
	GtkWidget* function(const(char)* firstButtonText, ... ) c_gtk_info_bar_new_with_buttons;
	void function(GtkInfoBar* infoBar, GtkWidget* child, int responseId) c_gtk_info_bar_add_action_widget;
	GtkWidget* function(GtkInfoBar* infoBar, const(char)* buttonText, int responseId) c_gtk_info_bar_add_button;
	void function(GtkInfoBar* infoBar, const(char)* firstButtonText, ... ) c_gtk_info_bar_add_buttons;
	GtkWidget* function(GtkInfoBar* infoBar) c_gtk_info_bar_get_action_area;
	GtkWidget* function(GtkInfoBar* infoBar) c_gtk_info_bar_get_content_area;
	GtkMessageType function(GtkInfoBar* infoBar) c_gtk_info_bar_get_message_type;
	int function(GtkInfoBar* infoBar) c_gtk_info_bar_get_show_close_button;
	void function(GtkInfoBar* infoBar, int responseId) c_gtk_info_bar_response;
	void function(GtkInfoBar* infoBar, int responseId) c_gtk_info_bar_set_default_response;
	void function(GtkInfoBar* infoBar, GtkMessageType messageType) c_gtk_info_bar_set_message_type;
	void function(GtkInfoBar* infoBar, int responseId, int setting) c_gtk_info_bar_set_response_sensitive;
	void function(GtkInfoBar* infoBar, int setting) c_gtk_info_bar_set_show_close_button;

	// gtk.Invisible

	GType function() c_gtk_invisible_get_type;
	GtkWidget* function() c_gtk_invisible_new;
	GtkWidget* function(GdkScreen* screen) c_gtk_invisible_new_for_screen;
	GdkScreen* function(GtkInvisible* invisible) c_gtk_invisible_get_screen;
	void function(GtkInvisible* invisible, GdkScreen* screen) c_gtk_invisible_set_screen;

	// gtk.Label

	GType function() c_gtk_label_get_type;
	GtkWidget* function(const(char)* str) c_gtk_label_new;
	GtkWidget* function(const(char)* str) c_gtk_label_new_with_mnemonic;
	double function(GtkLabel* label) c_gtk_label_get_angle;
	PangoAttrList* function(GtkLabel* label) c_gtk_label_get_attributes;
	const(char)* function(GtkLabel* label) c_gtk_label_get_current_uri;
	PangoEllipsizeMode function(GtkLabel* label) c_gtk_label_get_ellipsize;
	GtkJustification function(GtkLabel* label) c_gtk_label_get_justify;
	const(char)* function(GtkLabel* label) c_gtk_label_get_label;
	PangoLayout* function(GtkLabel* label) c_gtk_label_get_layout;
	void function(GtkLabel* label, int* x, int* y) c_gtk_label_get_layout_offsets;
	int function(GtkLabel* label) c_gtk_label_get_line_wrap;
	PangoWrapMode function(GtkLabel* label) c_gtk_label_get_line_wrap_mode;
	int function(GtkLabel* label) c_gtk_label_get_lines;
	int function(GtkLabel* label) c_gtk_label_get_max_width_chars;
	uint function(GtkLabel* label) c_gtk_label_get_mnemonic_keyval;
	GtkWidget* function(GtkLabel* label) c_gtk_label_get_mnemonic_widget;
	int function(GtkLabel* label) c_gtk_label_get_selectable;
	int function(GtkLabel* label, int* start, int* end) c_gtk_label_get_selection_bounds;
	int function(GtkLabel* label) c_gtk_label_get_single_line_mode;
	const(char)* function(GtkLabel* label) c_gtk_label_get_text;
	int function(GtkLabel* label) c_gtk_label_get_track_visited_links;
	int function(GtkLabel* label) c_gtk_label_get_use_markup;
	int function(GtkLabel* label) c_gtk_label_get_use_underline;
	int function(GtkLabel* label) c_gtk_label_get_width_chars;
	float function(GtkLabel* label) c_gtk_label_get_xalign;
	float function(GtkLabel* label) c_gtk_label_get_yalign;
	void function(GtkLabel* label, int startOffset, int endOffset) c_gtk_label_select_region;
	void function(GtkLabel* label, double angle) c_gtk_label_set_angle;
	void function(GtkLabel* label, PangoAttrList* attrs) c_gtk_label_set_attributes;
	void function(GtkLabel* label, PangoEllipsizeMode mode) c_gtk_label_set_ellipsize;
	void function(GtkLabel* label, GtkJustification jtype) c_gtk_label_set_justify;
	void function(GtkLabel* label, const(char)* str) c_gtk_label_set_label;
	void function(GtkLabel* label, int wrap) c_gtk_label_set_line_wrap;
	void function(GtkLabel* label, PangoWrapMode wrapMode) c_gtk_label_set_line_wrap_mode;
	void function(GtkLabel* label, int lines) c_gtk_label_set_lines;
	void function(GtkLabel* label, const(char)* str) c_gtk_label_set_markup;
	void function(GtkLabel* label, const(char)* str) c_gtk_label_set_markup_with_mnemonic;
	void function(GtkLabel* label, int nChars) c_gtk_label_set_max_width_chars;
	void function(GtkLabel* label, GtkWidget* widget) c_gtk_label_set_mnemonic_widget;
	void function(GtkLabel* label, const(char)* pattern) c_gtk_label_set_pattern;
	void function(GtkLabel* label, int setting) c_gtk_label_set_selectable;
	void function(GtkLabel* label, int singleLineMode) c_gtk_label_set_single_line_mode;
	void function(GtkLabel* label, const(char)* str) c_gtk_label_set_text;
	void function(GtkLabel* label, const(char)* str) c_gtk_label_set_text_with_mnemonic;
	void function(GtkLabel* label, int trackLinks) c_gtk_label_set_track_visited_links;
	void function(GtkLabel* label, int setting) c_gtk_label_set_use_markup;
	void function(GtkLabel* label, int setting) c_gtk_label_set_use_underline;
	void function(GtkLabel* label, int nChars) c_gtk_label_set_width_chars;
	void function(GtkLabel* label, float xalign) c_gtk_label_set_xalign;
	void function(GtkLabel* label, float yalign) c_gtk_label_set_yalign;

	// gtk.LabelAccessible

	GType function() c_gtk_label_accessible_get_type;

	// gtk.Layout

	GType function() c_gtk_layout_get_type;
	GtkWidget* function(GtkAdjustment* hadjustment, GtkAdjustment* vadjustment) c_gtk_layout_new;
	GdkWindow* function(GtkLayout* layout) c_gtk_layout_get_bin_window;
	GtkAdjustment* function(GtkLayout* layout) c_gtk_layout_get_hadjustment;
	void function(GtkLayout* layout, uint* width, uint* height) c_gtk_layout_get_size;
	GtkAdjustment* function(GtkLayout* layout) c_gtk_layout_get_vadjustment;
	void function(GtkLayout* layout, GtkWidget* childWidget, int x, int y) c_gtk_layout_move;
	void function(GtkLayout* layout, GtkWidget* childWidget, int x, int y) c_gtk_layout_put;
	void function(GtkLayout* layout, GtkAdjustment* adjustment) c_gtk_layout_set_hadjustment;
	void function(GtkLayout* layout, uint width, uint height) c_gtk_layout_set_size;
	void function(GtkLayout* layout, GtkAdjustment* adjustment) c_gtk_layout_set_vadjustment;

	// gtk.LevelBar

	GType function() c_gtk_level_bar_get_type;
	GtkWidget* function() c_gtk_level_bar_new;
	GtkWidget* function(double minValue, double maxValue) c_gtk_level_bar_new_for_interval;
	void function(GtkLevelBar* self, const(char)* name, double value) c_gtk_level_bar_add_offset_value;
	int function(GtkLevelBar* self) c_gtk_level_bar_get_inverted;
	double function(GtkLevelBar* self) c_gtk_level_bar_get_max_value;
	double function(GtkLevelBar* self) c_gtk_level_bar_get_min_value;
	GtkLevelBarMode function(GtkLevelBar* self) c_gtk_level_bar_get_mode;
	int function(GtkLevelBar* self, const(char)* name, double* value) c_gtk_level_bar_get_offset_value;
	double function(GtkLevelBar* self) c_gtk_level_bar_get_value;
	void function(GtkLevelBar* self, const(char)* name) c_gtk_level_bar_remove_offset_value;
	void function(GtkLevelBar* self, int inverted) c_gtk_level_bar_set_inverted;
	void function(GtkLevelBar* self, double value) c_gtk_level_bar_set_max_value;
	void function(GtkLevelBar* self, double value) c_gtk_level_bar_set_min_value;
	void function(GtkLevelBar* self, GtkLevelBarMode mode) c_gtk_level_bar_set_mode;
	void function(GtkLevelBar* self, double value) c_gtk_level_bar_set_value;

	// gtk.LevelBarAccessible

	GType function() c_gtk_level_bar_accessible_get_type;

	// gtk.LinkButton

	GType function() c_gtk_link_button_get_type;
	GtkWidget* function(const(char)* uri) c_gtk_link_button_new;
	GtkWidget* function(const(char)* uri, const(char)* label) c_gtk_link_button_new_with_label;
	const(char)* function(GtkLinkButton* linkButton) c_gtk_link_button_get_uri;
	int function(GtkLinkButton* linkButton) c_gtk_link_button_get_visited;
	void function(GtkLinkButton* linkButton, const(char)* uri) c_gtk_link_button_set_uri;
	void function(GtkLinkButton* linkButton, int visited) c_gtk_link_button_set_visited;

	// gtk.LinkButtonAccessible

	GType function() c_gtk_link_button_accessible_get_type;

	// gtk.ListBox

	GType function() c_gtk_list_box_get_type;
	GtkWidget* function() c_gtk_list_box_new;
	void function(GtkListBox* box, GListModel* model, GtkListBoxCreateWidgetFunc createWidgetFunc, void* userData, GDestroyNotify userDataFreeFunc) c_gtk_list_box_bind_model;
	void function(GtkListBox* box, GtkListBoxRow* row) c_gtk_list_box_drag_highlight_row;
	void function(GtkListBox* box) c_gtk_list_box_drag_unhighlight_row;
	int function(GtkListBox* box) c_gtk_list_box_get_activate_on_single_click;
	GtkAdjustment* function(GtkListBox* box) c_gtk_list_box_get_adjustment;
	GtkListBoxRow* function(GtkListBox* box, int index) c_gtk_list_box_get_row_at_index;
	GtkListBoxRow* function(GtkListBox* box, int y) c_gtk_list_box_get_row_at_y;
	GtkListBoxRow* function(GtkListBox* box) c_gtk_list_box_get_selected_row;
	GList* function(GtkListBox* box) c_gtk_list_box_get_selected_rows;
	GtkSelectionMode function(GtkListBox* box) c_gtk_list_box_get_selection_mode;
	void function(GtkListBox* box, GtkWidget* child, int position) c_gtk_list_box_insert;
	void function(GtkListBox* box) c_gtk_list_box_invalidate_filter;
	void function(GtkListBox* box) c_gtk_list_box_invalidate_headers;
	void function(GtkListBox* box) c_gtk_list_box_invalidate_sort;
	void function(GtkListBox* box, GtkWidget* child) c_gtk_list_box_prepend;
	void function(GtkListBox* box) c_gtk_list_box_select_all;
	void function(GtkListBox* box, GtkListBoxRow* row) c_gtk_list_box_select_row;
	void function(GtkListBox* box, GtkListBoxForeachFunc func, void* data) c_gtk_list_box_selected_foreach;
	void function(GtkListBox* box, int single) c_gtk_list_box_set_activate_on_single_click;
	void function(GtkListBox* box, GtkAdjustment* adjustment) c_gtk_list_box_set_adjustment;
	void function(GtkListBox* box, GtkListBoxFilterFunc filterFunc, void* userData, GDestroyNotify destroy) c_gtk_list_box_set_filter_func;
	void function(GtkListBox* box, GtkListBoxUpdateHeaderFunc updateHeader, void* userData, GDestroyNotify destroy) c_gtk_list_box_set_header_func;
	void function(GtkListBox* box, GtkWidget* placeholder) c_gtk_list_box_set_placeholder;
	void function(GtkListBox* box, GtkSelectionMode mode) c_gtk_list_box_set_selection_mode;
	void function(GtkListBox* box, GtkListBoxSortFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_list_box_set_sort_func;
	void function(GtkListBox* box) c_gtk_list_box_unselect_all;
	void function(GtkListBox* box, GtkListBoxRow* row) c_gtk_list_box_unselect_row;

	// gtk.ListBoxAccessible

	GType function() c_gtk_list_box_accessible_get_type;

	// gtk.ListBoxRow

	GType function() c_gtk_list_box_row_get_type;
	GtkWidget* function() c_gtk_list_box_row_new;
	void function(GtkListBoxRow* row) c_gtk_list_box_row_changed;
	int function(GtkListBoxRow* row) c_gtk_list_box_row_get_activatable;
	GtkWidget* function(GtkListBoxRow* row) c_gtk_list_box_row_get_header;
	int function(GtkListBoxRow* row) c_gtk_list_box_row_get_index;
	int function(GtkListBoxRow* row) c_gtk_list_box_row_get_selectable;
	int function(GtkListBoxRow* row) c_gtk_list_box_row_is_selected;
	void function(GtkListBoxRow* row, int activatable) c_gtk_list_box_row_set_activatable;
	void function(GtkListBoxRow* row, GtkWidget* header) c_gtk_list_box_row_set_header;
	void function(GtkListBoxRow* row, int selectable) c_gtk_list_box_row_set_selectable;

	// gtk.ListBoxRowAccessible

	GType function() c_gtk_list_box_row_accessible_get_type;

	// gtk.ListStore

	GType function() c_gtk_list_store_get_type;
	GtkListStore* function(int nColumns, ... ) c_gtk_list_store_new;
	GtkListStore* function(int nColumns, GType* types) c_gtk_list_store_newv;
	void function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_append;
	void function(GtkListStore* listStore) c_gtk_list_store_clear;
	void function(GtkListStore* listStore, GtkTreeIter* iter, int position) c_gtk_list_store_insert;
	void function(GtkListStore* listStore, GtkTreeIter* iter, GtkTreeIter* sibling) c_gtk_list_store_insert_after;
	void function(GtkListStore* listStore, GtkTreeIter* iter, GtkTreeIter* sibling) c_gtk_list_store_insert_before;
	void function(GtkListStore* listStore, GtkTreeIter* iter, int position, ... ) c_gtk_list_store_insert_with_values;
	void function(GtkListStore* listStore, GtkTreeIter* iter, int position, int* columns, GValue* values, int nValues) c_gtk_list_store_insert_with_valuesv;
	int function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_iter_is_valid;
	void function(GtkListStore* store, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_list_store_move_after;
	void function(GtkListStore* store, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_list_store_move_before;
	void function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_prepend;
	int function(GtkListStore* listStore, GtkTreeIter* iter) c_gtk_list_store_remove;
	void function(GtkListStore* store, int* newOrder) c_gtk_list_store_reorder;
	void function(GtkListStore* listStore, GtkTreeIter* iter, ... ) c_gtk_list_store_set;
	void function(GtkListStore* listStore, int nColumns, GType* types) c_gtk_list_store_set_column_types;
	void function(GtkListStore* listStore, GtkTreeIter* iter, void* varArgs) c_gtk_list_store_set_valist;
	void function(GtkListStore* listStore, GtkTreeIter* iter, int column, GValue* value) c_gtk_list_store_set_value;
	void function(GtkListStore* listStore, GtkTreeIter* iter, int* columns, GValue* values, int nValues) c_gtk_list_store_set_valuesv;
	void function(GtkListStore* store, GtkTreeIter* a, GtkTreeIter* b) c_gtk_list_store_swap;

	// gtk.LockButton

	GType function() c_gtk_lock_button_get_type;
	GtkWidget* function(GPermission* permission) c_gtk_lock_button_new;
	GPermission* function(GtkLockButton* button) c_gtk_lock_button_get_permission;
	void function(GtkLockButton* button, GPermission* permission) c_gtk_lock_button_set_permission;

	// gtk.LockButtonAccessible

	GType function() c_gtk_lock_button_accessible_get_type;

	// gtk.Menu

	GType function() c_gtk_menu_get_type;
	GtkWidget* function() c_gtk_menu_new;
	GtkWidget* function(GMenuModel* model) c_gtk_menu_new_from_model;
	GList* function(GtkWidget* widget) c_gtk_menu_get_for_attach_widget;
	void function(GtkMenu* menu, GtkWidget* child, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach) c_gtk_menu_attach;
	void function(GtkMenu* menu, GtkWidget* attachWidget, GtkMenuDetachFunc detacher) c_gtk_menu_attach_to_widget;
	void function(GtkMenu* menu) c_gtk_menu_detach;
	GtkAccelGroup* function(GtkMenu* menu) c_gtk_menu_get_accel_group;
	const(char)* function(GtkMenu* menu) c_gtk_menu_get_accel_path;
	GtkWidget* function(GtkMenu* menu) c_gtk_menu_get_active;
	GtkWidget* function(GtkMenu* menu) c_gtk_menu_get_attach_widget;
	int function(GtkMenu* menu) c_gtk_menu_get_monitor;
	int function(GtkMenu* menu) c_gtk_menu_get_reserve_toggle_size;
	int function(GtkMenu* menu) c_gtk_menu_get_tearoff_state;
	const(char)* function(GtkMenu* menu) c_gtk_menu_get_title;
	void function(GtkMenu* menu, GdkMonitor* monitor) c_gtk_menu_place_on_monitor;
	void function(GtkMenu* menu) c_gtk_menu_popdown;
	void function(GtkMenu* menu, GtkWidget* parentMenuShell, GtkWidget* parentMenuItem, GtkMenuPositionFunc func, void* data, uint button, uint activateTime) c_gtk_menu_popup;
	void function(GtkMenu* menu, GdkEvent* triggerEvent) c_gtk_menu_popup_at_pointer;
	void function(GtkMenu* menu, GdkWindow* rectWindow, GdkRectangle* rect, GdkGravity rectAnchor, GdkGravity menuAnchor, GdkEvent* triggerEvent) c_gtk_menu_popup_at_rect;
	void function(GtkMenu* menu, GtkWidget* widget, GdkGravity widgetAnchor, GdkGravity menuAnchor, GdkEvent* triggerEvent) c_gtk_menu_popup_at_widget;
	void function(GtkMenu* menu, GdkDevice* device, GtkWidget* parentMenuShell, GtkWidget* parentMenuItem, GtkMenuPositionFunc func, void* data, GDestroyNotify destroy, uint button, uint activateTime) c_gtk_menu_popup_for_device;
	void function(GtkMenu* menu, GtkWidget* child, int position) c_gtk_menu_reorder_child;
	void function(GtkMenu* menu) c_gtk_menu_reposition;
	void function(GtkMenu* menu, GtkAccelGroup* accelGroup) c_gtk_menu_set_accel_group;
	void function(GtkMenu* menu, const(char)* accelPath) c_gtk_menu_set_accel_path;
	void function(GtkMenu* menu, uint index) c_gtk_menu_set_active;
	void function(GtkMenu* menu, int monitorNum) c_gtk_menu_set_monitor;
	void function(GtkMenu* menu, int reserveToggleSize) c_gtk_menu_set_reserve_toggle_size;
	void function(GtkMenu* menu, GdkScreen* screen) c_gtk_menu_set_screen;
	void function(GtkMenu* menu, int tornOff) c_gtk_menu_set_tearoff_state;
	void function(GtkMenu* menu, const(char)* title) c_gtk_menu_set_title;

	// gtk.MenuAccessible

	GType function() c_gtk_menu_accessible_get_type;

	// gtk.MenuBar

	GType function() c_gtk_menu_bar_get_type;
	GtkWidget* function() c_gtk_menu_bar_new;
	GtkWidget* function(GMenuModel* model) c_gtk_menu_bar_new_from_model;
	GtkPackDirection function(GtkMenuBar* menubar) c_gtk_menu_bar_get_child_pack_direction;
	GtkPackDirection function(GtkMenuBar* menubar) c_gtk_menu_bar_get_pack_direction;
	void function(GtkMenuBar* menubar, GtkPackDirection childPackDir) c_gtk_menu_bar_set_child_pack_direction;
	void function(GtkMenuBar* menubar, GtkPackDirection packDir) c_gtk_menu_bar_set_pack_direction;

	// gtk.MenuButton

	GType function() c_gtk_menu_button_get_type;
	GtkWidget* function() c_gtk_menu_button_new;
	GtkWidget* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_align_widget;
	GtkArrowType function(GtkMenuButton* menuButton) c_gtk_menu_button_get_direction;
	GMenuModel* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_menu_model;
	GtkPopover* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_popover;
	GtkMenu* function(GtkMenuButton* menuButton) c_gtk_menu_button_get_popup;
	int function(GtkMenuButton* menuButton) c_gtk_menu_button_get_use_popover;
	void function(GtkMenuButton* menuButton, GtkWidget* alignWidget) c_gtk_menu_button_set_align_widget;
	void function(GtkMenuButton* menuButton, GtkArrowType direction) c_gtk_menu_button_set_direction;
	void function(GtkMenuButton* menuButton, GMenuModel* menuModel) c_gtk_menu_button_set_menu_model;
	void function(GtkMenuButton* menuButton, GtkWidget* popover) c_gtk_menu_button_set_popover;
	void function(GtkMenuButton* menuButton, GtkWidget* menu) c_gtk_menu_button_set_popup;
	void function(GtkMenuButton* menuButton, int usePopover) c_gtk_menu_button_set_use_popover;

	// gtk.MenuButtonAccessible

	GType function() c_gtk_menu_button_accessible_get_type;

	// gtk.MenuItem

	GType function() c_gtk_menu_item_get_type;
	GtkWidget* function() c_gtk_menu_item_new;
	GtkWidget* function(const(char)* label) c_gtk_menu_item_new_with_label;
	GtkWidget* function(const(char)* label) c_gtk_menu_item_new_with_mnemonic;
	void function(GtkMenuItem* menuItem) c_gtk_menu_item_activate;
	void function(GtkMenuItem* menuItem) c_gtk_menu_item_deselect;
	const(char)* function(GtkMenuItem* menuItem) c_gtk_menu_item_get_accel_path;
	const(char)* function(GtkMenuItem* menuItem) c_gtk_menu_item_get_label;
	int function(GtkMenuItem* menuItem) c_gtk_menu_item_get_reserve_indicator;
	int function(GtkMenuItem* menuItem) c_gtk_menu_item_get_right_justified;
	GtkWidget* function(GtkMenuItem* menuItem) c_gtk_menu_item_get_submenu;
	int function(GtkMenuItem* menuItem) c_gtk_menu_item_get_use_underline;
	void function(GtkMenuItem* menuItem) c_gtk_menu_item_select;
	void function(GtkMenuItem* menuItem, const(char)* accelPath) c_gtk_menu_item_set_accel_path;
	void function(GtkMenuItem* menuItem, const(char)* label) c_gtk_menu_item_set_label;
	void function(GtkMenuItem* menuItem, int reserve) c_gtk_menu_item_set_reserve_indicator;
	void function(GtkMenuItem* menuItem, int rightJustified) c_gtk_menu_item_set_right_justified;
	void function(GtkMenuItem* menuItem, GtkWidget* submenu) c_gtk_menu_item_set_submenu;
	void function(GtkMenuItem* menuItem, int setting) c_gtk_menu_item_set_use_underline;
	void function(GtkMenuItem* menuItem, int allocation) c_gtk_menu_item_toggle_size_allocate;
	void function(GtkMenuItem* menuItem, int* requisition) c_gtk_menu_item_toggle_size_request;

	// gtk.MenuItemAccessible

	GType function() c_gtk_menu_item_accessible_get_type;

	// gtk.MenuShell

	GType function() c_gtk_menu_shell_get_type;
	void function(GtkMenuShell* menuShell, GtkWidget* menuItem, int forceDeactivate) c_gtk_menu_shell_activate_item;
	void function(GtkMenuShell* menuShell, GtkWidget* child) c_gtk_menu_shell_append;
	void function(GtkMenuShell* menuShell, GMenuModel* model, const(char)* actionNamespace, int withSeparators) c_gtk_menu_shell_bind_model;
	void function(GtkMenuShell* menuShell) c_gtk_menu_shell_cancel;
	void function(GtkMenuShell* menuShell) c_gtk_menu_shell_deactivate;
	void function(GtkMenuShell* menuShell) c_gtk_menu_shell_deselect;
	GtkWidget* function(GtkMenuShell* menuShell) c_gtk_menu_shell_get_parent_shell;
	GtkWidget* function(GtkMenuShell* menuShell) c_gtk_menu_shell_get_selected_item;
	int function(GtkMenuShell* menuShell) c_gtk_menu_shell_get_take_focus;
	void function(GtkMenuShell* menuShell, GtkWidget* child, int position) c_gtk_menu_shell_insert;
	void function(GtkMenuShell* menuShell, GtkWidget* child) c_gtk_menu_shell_prepend;
	void function(GtkMenuShell* menuShell, int searchSensitive) c_gtk_menu_shell_select_first;
	void function(GtkMenuShell* menuShell, GtkWidget* menuItem) c_gtk_menu_shell_select_item;
	void function(GtkMenuShell* menuShell, int takeFocus) c_gtk_menu_shell_set_take_focus;

	// gtk.MenuShellAccessible

	GType function() c_gtk_menu_shell_accessible_get_type;

	// gtk.MenuToolButton

	GType function() c_gtk_menu_tool_button_get_type;
	GtkToolItem* function(GtkWidget* iconWidget, const(char)* label) c_gtk_menu_tool_button_new;
	GtkToolItem* function(const(char)* stockId) c_gtk_menu_tool_button_new_from_stock;
	GtkWidget* function(GtkMenuToolButton* button) c_gtk_menu_tool_button_get_menu;
	void function(GtkMenuToolButton* button, const(char)* markup) c_gtk_menu_tool_button_set_arrow_tooltip_markup;
	void function(GtkMenuToolButton* button, const(char)* text) c_gtk_menu_tool_button_set_arrow_tooltip_text;
	void function(GtkMenuToolButton* button, GtkWidget* menu) c_gtk_menu_tool_button_set_menu;

	// gtk.MessageDialog

	GType function() c_gtk_message_dialog_get_type;
	GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const(char)* messageFormat, ... ) c_gtk_message_dialog_new;
	GtkWidget* function(GtkWindow* parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const(char)* messageFormat, ... ) c_gtk_message_dialog_new_with_markup;
	void function(GtkMessageDialog* messageDialog, const(char)* messageFormat, ... ) c_gtk_message_dialog_format_secondary_markup;
	void function(GtkMessageDialog* messageDialog, const(char)* messageFormat, ... ) c_gtk_message_dialog_format_secondary_text;
	GtkWidget* function(GtkMessageDialog* dialog) c_gtk_message_dialog_get_image;
	GtkWidget* function(GtkMessageDialog* messageDialog) c_gtk_message_dialog_get_message_area;
	void function(GtkMessageDialog* dialog, GtkWidget* image) c_gtk_message_dialog_set_image;
	void function(GtkMessageDialog* messageDialog, const(char)* str) c_gtk_message_dialog_set_markup;

	// gtk.Misc

	GType function() c_gtk_misc_get_type;
	void function(GtkMisc* misc, float* xalign, float* yalign) c_gtk_misc_get_alignment;
	void function(GtkMisc* misc, int* xpad, int* ypad) c_gtk_misc_get_padding;
	void function(GtkMisc* misc, float xalign, float yalign) c_gtk_misc_set_alignment;
	void function(GtkMisc* misc, int xpad, int ypad) c_gtk_misc_set_padding;

	// gtk.ModelButton

	GType function() c_gtk_model_button_get_type;
	GtkWidget* function() c_gtk_model_button_new;

	// gtk.MountOperation

	GType function() c_gtk_mount_operation_get_type;
	GMountOperation* function(GtkWindow* parent) c_gtk_mount_operation_new;
	GtkWindow* function(GtkMountOperation* op) c_gtk_mount_operation_get_parent;
	GdkScreen* function(GtkMountOperation* op) c_gtk_mount_operation_get_screen;
	int function(GtkMountOperation* op) c_gtk_mount_operation_is_showing;
	void function(GtkMountOperation* op, GtkWindow* parent) c_gtk_mount_operation_set_parent;
	void function(GtkMountOperation* op, GdkScreen* screen) c_gtk_mount_operation_set_screen;
	int function(GdkScreen* screen, const(char)* uri, uint timestamp, GError** err) c_gtk_show_uri;

	// gtk.NativeDialog

	GType function() c_gtk_native_dialog_get_type;
	void function(GtkNativeDialog* self) c_gtk_native_dialog_destroy;
	int function(GtkNativeDialog* self) c_gtk_native_dialog_get_modal;
	const(char)* function(GtkNativeDialog* self) c_gtk_native_dialog_get_title;
	GtkWindow* function(GtkNativeDialog* self) c_gtk_native_dialog_get_transient_for;
	int function(GtkNativeDialog* self) c_gtk_native_dialog_get_visible;
	void function(GtkNativeDialog* self) c_gtk_native_dialog_hide;
	int function(GtkNativeDialog* self) c_gtk_native_dialog_run;
	void function(GtkNativeDialog* self, int modal) c_gtk_native_dialog_set_modal;
	void function(GtkNativeDialog* self, const(char)* title) c_gtk_native_dialog_set_title;
	void function(GtkNativeDialog* self, GtkWindow* parent) c_gtk_native_dialog_set_transient_for;
	void function(GtkNativeDialog* self) c_gtk_native_dialog_show;

	// gtk.Notebook

	GType function() c_gtk_notebook_get_type;
	GtkWidget* function() c_gtk_notebook_new;
	int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel) c_gtk_notebook_append_page;
	int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, GtkWidget* menuLabel) c_gtk_notebook_append_page_menu;
	void function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_detach_tab;
	GtkWidget* function(GtkNotebook* notebook, GtkPackType packType) c_gtk_notebook_get_action_widget;
	int function(GtkNotebook* notebook) c_gtk_notebook_get_current_page;
	const(char)* function(GtkNotebook* notebook) c_gtk_notebook_get_group_name;
	GtkWidget* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_menu_label;
	const(char)* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_menu_label_text;
	int function(GtkNotebook* notebook) c_gtk_notebook_get_n_pages;
	GtkWidget* function(GtkNotebook* notebook, int pageNum) c_gtk_notebook_get_nth_page;
	int function(GtkNotebook* notebook) c_gtk_notebook_get_scrollable;
	int function(GtkNotebook* notebook) c_gtk_notebook_get_show_border;
	int function(GtkNotebook* notebook) c_gtk_notebook_get_show_tabs;
	int function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_detachable;
	ushort function(GtkNotebook* notebook) c_gtk_notebook_get_tab_hborder;
	GtkWidget* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_label;
	const(char)* function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_label_text;
	GtkPositionType function(GtkNotebook* notebook) c_gtk_notebook_get_tab_pos;
	int function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_get_tab_reorderable;
	ushort function(GtkNotebook* notebook) c_gtk_notebook_get_tab_vborder;
	int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, int position) c_gtk_notebook_insert_page;
	int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, GtkWidget* menuLabel, int position) c_gtk_notebook_insert_page_menu;
	void function(GtkNotebook* notebook) c_gtk_notebook_next_page;
	int function(GtkNotebook* notebook, GtkWidget* child) c_gtk_notebook_page_num;
	void function(GtkNotebook* notebook) c_gtk_notebook_popup_disable;
	void function(GtkNotebook* notebook) c_gtk_notebook_popup_enable;
	int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel) c_gtk_notebook_prepend_page;
	int function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel, GtkWidget* menuLabel) c_gtk_notebook_prepend_page_menu;
	void function(GtkNotebook* notebook) c_gtk_notebook_prev_page;
	void function(GtkNotebook* notebook, int pageNum) c_gtk_notebook_remove_page;
	void function(GtkNotebook* notebook, GtkWidget* child, int position) c_gtk_notebook_reorder_child;
	void function(GtkNotebook* notebook, GtkWidget* widget, GtkPackType packType) c_gtk_notebook_set_action_widget;
	void function(GtkNotebook* notebook, int pageNum) c_gtk_notebook_set_current_page;
	void function(GtkNotebook* notebook, const(char)* groupName) c_gtk_notebook_set_group_name;
	void function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* menuLabel) c_gtk_notebook_set_menu_label;
	void function(GtkNotebook* notebook, GtkWidget* child, const(char)* menuText) c_gtk_notebook_set_menu_label_text;
	void function(GtkNotebook* notebook, int scrollable) c_gtk_notebook_set_scrollable;
	void function(GtkNotebook* notebook, int showBorder) c_gtk_notebook_set_show_border;
	void function(GtkNotebook* notebook, int showTabs) c_gtk_notebook_set_show_tabs;
	void function(GtkNotebook* notebook, GtkWidget* child, int detachable) c_gtk_notebook_set_tab_detachable;
	void function(GtkNotebook* notebook, GtkWidget* child, GtkWidget* tabLabel) c_gtk_notebook_set_tab_label;
	void function(GtkNotebook* notebook, GtkWidget* child, const(char)* tabText) c_gtk_notebook_set_tab_label_text;
	void function(GtkNotebook* notebook, GtkPositionType pos) c_gtk_notebook_set_tab_pos;
	void function(GtkNotebook* notebook, GtkWidget* child, int reorderable) c_gtk_notebook_set_tab_reorderable;

	// gtk.NotebookAccessible

	GType function() c_gtk_notebook_accessible_get_type;

	// gtk.NotebookPageAccessible

	GType function() c_gtk_notebook_page_accessible_get_type;
	AtkObject* function(GtkNotebookAccessible* notebook, GtkWidget* child) c_gtk_notebook_page_accessible_new;
	void function(GtkNotebookPageAccessible* page) c_gtk_notebook_page_accessible_invalidate;

	// gtk.NumerableIcon

	GType function() c_gtk_numerable_icon_get_type;
	GIcon* function(GIcon* baseIcon) c_gtk_numerable_icon_new;
	GIcon* function(GIcon* baseIcon, GtkStyleContext* context) c_gtk_numerable_icon_new_with_style_context;
	GIcon* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_background_gicon;
	const(char)* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_background_icon_name;
	int function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_count;
	const(char)* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_label;
	GtkStyleContext* function(GtkNumerableIcon* self) c_gtk_numerable_icon_get_style_context;
	void function(GtkNumerableIcon* self, GIcon* icon) c_gtk_numerable_icon_set_background_gicon;
	void function(GtkNumerableIcon* self, const(char)* iconName) c_gtk_numerable_icon_set_background_icon_name;
	void function(GtkNumerableIcon* self, int count) c_gtk_numerable_icon_set_count;
	void function(GtkNumerableIcon* self, const(char)* label) c_gtk_numerable_icon_set_label;
	void function(GtkNumerableIcon* self, GtkStyleContext* style) c_gtk_numerable_icon_set_style_context;

	// gtk.OffscreenWindow

	GType function() c_gtk_offscreen_window_get_type;
	GtkWidget* function() c_gtk_offscreen_window_new;
	GdkPixbuf* function(GtkOffscreenWindow* offscreen) c_gtk_offscreen_window_get_pixbuf;
	cairo_surface_t* function(GtkOffscreenWindow* offscreen) c_gtk_offscreen_window_get_surface;

	// gtk.Orientable

	GType function() c_gtk_orientable_get_type;
	GtkOrientation function(GtkOrientable* orientable) c_gtk_orientable_get_orientation;
	void function(GtkOrientable* orientable, GtkOrientation orientation) c_gtk_orientable_set_orientation;

	// gtk.Overlay

	GType function() c_gtk_overlay_get_type;
	GtkWidget* function() c_gtk_overlay_new;
	void function(GtkOverlay* overlay, GtkWidget* widget) c_gtk_overlay_add_overlay;
	int function(GtkOverlay* overlay, GtkWidget* widget) c_gtk_overlay_get_overlay_pass_through;
	void function(GtkOverlay* overlay, GtkWidget* child, int position) c_gtk_overlay_reorder_overlay;
	void function(GtkOverlay* overlay, GtkWidget* widget, int passThrough) c_gtk_overlay_set_overlay_pass_through;

	// gtk.PadController

	GType function() c_gtk_pad_controller_get_type;
	GtkPadController* function(GtkWindow* window, GActionGroup* group, GdkDevice* pad) c_gtk_pad_controller_new;
	void function(GtkPadController* controller, GtkPadActionType type, int index, int mode, const(char)* label, const(char)* actionName) c_gtk_pad_controller_set_action;
	void function(GtkPadController* controller, GtkPadActionEntry* entries, int nEntries) c_gtk_pad_controller_set_action_entries;

	// gtk.PageSetup

	GType function() c_gtk_page_setup_get_type;
	GtkPageSetup* function() c_gtk_page_setup_new;
	GtkPageSetup* function(char* fileName, GError** err) c_gtk_page_setup_new_from_file;
	GtkPageSetup* function(GVariant* variant) c_gtk_page_setup_new_from_gvariant;
	GtkPageSetup* function(GKeyFile* keyFile, const(char)* groupName, GError** err) c_gtk_page_setup_new_from_key_file;
	GtkPageSetup* function(GtkPageSetup* other) c_gtk_page_setup_copy;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_bottom_margin;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_left_margin;
	GtkPageOrientation function(GtkPageSetup* setup) c_gtk_page_setup_get_orientation;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_page_height;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_page_width;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_paper_height;
	GtkPaperSize* function(GtkPageSetup* setup) c_gtk_page_setup_get_paper_size;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_paper_width;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_right_margin;
	double function(GtkPageSetup* setup, GtkUnit unit) c_gtk_page_setup_get_top_margin;
	int function(GtkPageSetup* setup, char* fileName, GError** err) c_gtk_page_setup_load_file;
	int function(GtkPageSetup* setup, GKeyFile* keyFile, const(char)* groupName, GError** err) c_gtk_page_setup_load_key_file;
	void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_bottom_margin;
	void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_left_margin;
	void function(GtkPageSetup* setup, GtkPageOrientation orientation) c_gtk_page_setup_set_orientation;
	void function(GtkPageSetup* setup, GtkPaperSize* size) c_gtk_page_setup_set_paper_size;
	void function(GtkPageSetup* setup, GtkPaperSize* size) c_gtk_page_setup_set_paper_size_and_default_margins;
	void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_right_margin;
	void function(GtkPageSetup* setup, double margin, GtkUnit unit) c_gtk_page_setup_set_top_margin;
	int function(GtkPageSetup* setup, char* fileName, GError** err) c_gtk_page_setup_to_file;
	GVariant* function(GtkPageSetup* setup) c_gtk_page_setup_to_gvariant;
	void function(GtkPageSetup* setup, GKeyFile* keyFile, const(char)* groupName) c_gtk_page_setup_to_key_file;

	// gtk.Paned

	GType function() c_gtk_paned_get_type;
	GtkWidget* function(GtkOrientation orientation) c_gtk_paned_new;
	void function(GtkPaned* paned, GtkWidget* child) c_gtk_paned_add1;
	void function(GtkPaned* paned, GtkWidget* child) c_gtk_paned_add2;
	GtkWidget* function(GtkPaned* paned) c_gtk_paned_get_child1;
	GtkWidget* function(GtkPaned* paned) c_gtk_paned_get_child2;
	GdkWindow* function(GtkPaned* paned) c_gtk_paned_get_handle_window;
	int function(GtkPaned* paned) c_gtk_paned_get_position;
	int function(GtkPaned* paned) c_gtk_paned_get_wide_handle;
	void function(GtkPaned* paned, GtkWidget* child, int resize, int shrink) c_gtk_paned_pack1;
	void function(GtkPaned* paned, GtkWidget* child, int resize, int shrink) c_gtk_paned_pack2;
	void function(GtkPaned* paned, int position) c_gtk_paned_set_position;
	void function(GtkPaned* paned, int wide) c_gtk_paned_set_wide_handle;

	// gtk.PanedAccessible

	GType function() c_gtk_paned_accessible_get_type;

	// gtk.PaperSize

	GType function() c_gtk_paper_size_get_type;
	GtkPaperSize* function(const(char)* name) c_gtk_paper_size_new;
	GtkPaperSize* function(const(char)* name, const(char)* displayName, double width, double height, GtkUnit unit) c_gtk_paper_size_new_custom;
	GtkPaperSize* function(GVariant* variant) c_gtk_paper_size_new_from_gvariant;
	GtkPaperSize* function(const(char)* ippName, double width, double height) c_gtk_paper_size_new_from_ipp;
	GtkPaperSize* function(GKeyFile* keyFile, const(char)* groupName, GError** err) c_gtk_paper_size_new_from_key_file;
	GtkPaperSize* function(const(char)* ppdName, const(char)* ppdDisplayName, double width, double height) c_gtk_paper_size_new_from_ppd;
	GtkPaperSize* function(GtkPaperSize* other) c_gtk_paper_size_copy;
	void function(GtkPaperSize* size) c_gtk_paper_size_free;
	double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_bottom_margin;
	double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_left_margin;
	double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_right_margin;
	double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_default_top_margin;
	const(char)* function(GtkPaperSize* size) c_gtk_paper_size_get_display_name;
	double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_height;
	const(char)* function(GtkPaperSize* size) c_gtk_paper_size_get_name;
	const(char)* function(GtkPaperSize* size) c_gtk_paper_size_get_ppd_name;
	double function(GtkPaperSize* size, GtkUnit unit) c_gtk_paper_size_get_width;
	int function(GtkPaperSize* size) c_gtk_paper_size_is_custom;
	int function(GtkPaperSize* size1, GtkPaperSize* size2) c_gtk_paper_size_is_equal;
	int function(GtkPaperSize* size) c_gtk_paper_size_is_ipp;
	void function(GtkPaperSize* size, double width, double height, GtkUnit unit) c_gtk_paper_size_set_size;
	GVariant* function(GtkPaperSize* paperSize) c_gtk_paper_size_to_gvariant;
	void function(GtkPaperSize* size, GKeyFile* keyFile, const(char)* groupName) c_gtk_paper_size_to_key_file;
	const(char)* function() c_gtk_paper_size_get_default;
	GList* function(int includeCustom) c_gtk_paper_size_get_paper_sizes;

	// gtk.PlacesSidebar

	GType function() c_gtk_places_sidebar_get_type;
	GtkWidget* function() c_gtk_places_sidebar_new;
	void function(GtkPlacesSidebar* sidebar, GFile* location) c_gtk_places_sidebar_add_shortcut;
	int function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_local_only;
	GFile* function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_location;
	GFile* function(GtkPlacesSidebar* sidebar, int n) c_gtk_places_sidebar_get_nth_bookmark;
	GtkPlacesOpenFlags function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_open_flags;
	int function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_connect_to_server;
	int function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_desktop;
	int function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_enter_location;
	int function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_other_locations;
	int function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_recent;
	int function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_get_show_trash;
	GSList* function(GtkPlacesSidebar* sidebar) c_gtk_places_sidebar_list_shortcuts;
	void function(GtkPlacesSidebar* sidebar, GFile* location) c_gtk_places_sidebar_remove_shortcut;
	void function(GtkPlacesSidebar* sidebar, int visible, GdkDragContext* context) c_gtk_places_sidebar_set_drop_targets_visible;
	void function(GtkPlacesSidebar* sidebar, int localOnly) c_gtk_places_sidebar_set_local_only;
	void function(GtkPlacesSidebar* sidebar, GFile* location) c_gtk_places_sidebar_set_location;
	void function(GtkPlacesSidebar* sidebar, GtkPlacesOpenFlags flags) c_gtk_places_sidebar_set_open_flags;
	void function(GtkPlacesSidebar* sidebar, int showConnectToServer) c_gtk_places_sidebar_set_show_connect_to_server;
	void function(GtkPlacesSidebar* sidebar, int showDesktop) c_gtk_places_sidebar_set_show_desktop;
	void function(GtkPlacesSidebar* sidebar, int showEnterLocation) c_gtk_places_sidebar_set_show_enter_location;
	void function(GtkPlacesSidebar* sidebar, int showOtherLocations) c_gtk_places_sidebar_set_show_other_locations;
	void function(GtkPlacesSidebar* sidebar, int showRecent) c_gtk_places_sidebar_set_show_recent;
	void function(GtkPlacesSidebar* sidebar, int showTrash) c_gtk_places_sidebar_set_show_trash;

	// gtk.Plug

	GType function() c_gtk_plug_get_type;
	GtkWidget* function(ulong socketId) c_gtk_plug_new;
	GtkWidget* function(GdkDisplay* display, ulong socketId) c_gtk_plug_new_for_display;
	void function(GtkPlug* plug, ulong socketId) c_gtk_plug_construct;
	void function(GtkPlug* plug, GdkDisplay* display, ulong socketId) c_gtk_plug_construct_for_display;
	int function(GtkPlug* plug) c_gtk_plug_get_embedded;
	ulong function(GtkPlug* plug) c_gtk_plug_get_id;
	GdkWindow* function(GtkPlug* plug) c_gtk_plug_get_socket_window;

	// gtk.Popover

	GType function() c_gtk_popover_get_type;
	GtkWidget* function(GtkWidget* relativeTo) c_gtk_popover_new;
	GtkWidget* function(GtkWidget* relativeTo, GMenuModel* model) c_gtk_popover_new_from_model;
	void function(GtkPopover* popover, GMenuModel* model, const(char)* actionNamespace) c_gtk_popover_bind_model;
	GtkPopoverConstraint function(GtkPopover* popover) c_gtk_popover_get_constrain_to;
	GtkWidget* function(GtkPopover* popover) c_gtk_popover_get_default_widget;
	int function(GtkPopover* popover) c_gtk_popover_get_modal;
	int function(GtkPopover* popover, GdkRectangle* rect) c_gtk_popover_get_pointing_to;
	GtkPositionType function(GtkPopover* popover) c_gtk_popover_get_position;
	GtkWidget* function(GtkPopover* popover) c_gtk_popover_get_relative_to;
	int function(GtkPopover* popover) c_gtk_popover_get_transitions_enabled;
	void function(GtkPopover* popover) c_gtk_popover_popdown;
	void function(GtkPopover* popover) c_gtk_popover_popup;
	void function(GtkPopover* popover, GtkPopoverConstraint constraint) c_gtk_popover_set_constrain_to;
	void function(GtkPopover* popover, GtkWidget* widget) c_gtk_popover_set_default_widget;
	void function(GtkPopover* popover, int modal) c_gtk_popover_set_modal;
	void function(GtkPopover* popover, GdkRectangle* rect) c_gtk_popover_set_pointing_to;
	void function(GtkPopover* popover, GtkPositionType position) c_gtk_popover_set_position;
	void function(GtkPopover* popover, GtkWidget* relativeTo) c_gtk_popover_set_relative_to;
	void function(GtkPopover* popover, int transitionsEnabled) c_gtk_popover_set_transitions_enabled;

	// gtk.PopoverAccessible

	GType function() c_gtk_popover_accessible_get_type;

	// gtk.PopoverMenu

	GType function() c_gtk_popover_menu_get_type;
	GtkWidget* function() c_gtk_popover_menu_new;
	void function(GtkPopoverMenu* popover, const(char)* name) c_gtk_popover_menu_open_submenu;

	// gtk.PrintContext

	GType function() c_gtk_print_context_get_type;
	PangoContext* function(GtkPrintContext* context) c_gtk_print_context_create_pango_context;
	PangoLayout* function(GtkPrintContext* context) c_gtk_print_context_create_pango_layout;
	cairo_t* function(GtkPrintContext* context) c_gtk_print_context_get_cairo_context;
	double function(GtkPrintContext* context) c_gtk_print_context_get_dpi_x;
	double function(GtkPrintContext* context) c_gtk_print_context_get_dpi_y;
	int function(GtkPrintContext* context, double* top, double* bottom, double* left, double* right) c_gtk_print_context_get_hard_margins;
	double function(GtkPrintContext* context) c_gtk_print_context_get_height;
	GtkPageSetup* function(GtkPrintContext* context) c_gtk_print_context_get_page_setup;
	PangoFontMap* function(GtkPrintContext* context) c_gtk_print_context_get_pango_fontmap;
	double function(GtkPrintContext* context) c_gtk_print_context_get_width;
	void function(GtkPrintContext* context, cairo_t* cr, double dpiX, double dpiY) c_gtk_print_context_set_cairo_context;

	// gtk.PrintOperation

	GType function() c_gtk_print_operation_get_type;
	GtkPrintOperation* function() c_gtk_print_operation_new;
	void function(GtkPrintOperation* op) c_gtk_print_operation_cancel;
	void function(GtkPrintOperation* op) c_gtk_print_operation_draw_page_finish;
	GtkPageSetup* function(GtkPrintOperation* op) c_gtk_print_operation_get_default_page_setup;
	int function(GtkPrintOperation* op) c_gtk_print_operation_get_embed_page_setup;
	void function(GtkPrintOperation* op, GError** err) c_gtk_print_operation_get_error;
	int function(GtkPrintOperation* op) c_gtk_print_operation_get_has_selection;
	int function(GtkPrintOperation* op) c_gtk_print_operation_get_n_pages_to_print;
	GtkPrintSettings* function(GtkPrintOperation* op) c_gtk_print_operation_get_print_settings;
	GtkPrintStatus function(GtkPrintOperation* op) c_gtk_print_operation_get_status;
	const(char)* function(GtkPrintOperation* op) c_gtk_print_operation_get_status_string;
	int function(GtkPrintOperation* op) c_gtk_print_operation_get_support_selection;
	int function(GtkPrintOperation* op) c_gtk_print_operation_is_finished;
	GtkPrintOperationResult function(GtkPrintOperation* op, GtkPrintOperationAction action, GtkWindow* parent, GError** err) c_gtk_print_operation_run;
	void function(GtkPrintOperation* op, int allowAsync) c_gtk_print_operation_set_allow_async;
	void function(GtkPrintOperation* op, int currentPage) c_gtk_print_operation_set_current_page;
	void function(GtkPrintOperation* op, const(char)* label) c_gtk_print_operation_set_custom_tab_label;
	void function(GtkPrintOperation* op, GtkPageSetup* defaultPageSetup) c_gtk_print_operation_set_default_page_setup;
	void function(GtkPrintOperation* op) c_gtk_print_operation_set_defer_drawing;
	void function(GtkPrintOperation* op, int embed) c_gtk_print_operation_set_embed_page_setup;
	void function(GtkPrintOperation* op, char* filename) c_gtk_print_operation_set_export_filename;
	void function(GtkPrintOperation* op, int hasSelection) c_gtk_print_operation_set_has_selection;
	void function(GtkPrintOperation* op, const(char)* jobName) c_gtk_print_operation_set_job_name;
	void function(GtkPrintOperation* op, int nPages) c_gtk_print_operation_set_n_pages;
	void function(GtkPrintOperation* op, GtkPrintSettings* printSettings) c_gtk_print_operation_set_print_settings;
	void function(GtkPrintOperation* op, int showProgress) c_gtk_print_operation_set_show_progress;
	void function(GtkPrintOperation* op, int supportSelection) c_gtk_print_operation_set_support_selection;
	void function(GtkPrintOperation* op, int trackStatus) c_gtk_print_operation_set_track_print_status;
	void function(GtkPrintOperation* op, GtkUnit unit) c_gtk_print_operation_set_unit;
	void function(GtkPrintOperation* op, int fullPage) c_gtk_print_operation_set_use_full_page;
	GtkPageSetup* function(GtkWindow* parent, GtkPageSetup* pageSetup, GtkPrintSettings* settings) c_gtk_print_run_page_setup_dialog;
	void function(GtkWindow* parent, GtkPageSetup* pageSetup, GtkPrintSettings* settings, GtkPageSetupDoneFunc doneCb, void* data) c_gtk_print_run_page_setup_dialog_async;

	// gtk.PrintOperationPreview

	GType function() c_gtk_print_operation_preview_get_type;
	void function(GtkPrintOperationPreview* preview) c_gtk_print_operation_preview_end_preview;
	int function(GtkPrintOperationPreview* preview, int pageNr) c_gtk_print_operation_preview_is_selected;
	void function(GtkPrintOperationPreview* preview, int pageNr) c_gtk_print_operation_preview_render_page;

	// gtk.PrintSettings

	GType function() c_gtk_print_settings_get_type;
	GtkPrintSettings* function() c_gtk_print_settings_new;
	GtkPrintSettings* function(char* fileName, GError** err) c_gtk_print_settings_new_from_file;
	GtkPrintSettings* function(GVariant* variant) c_gtk_print_settings_new_from_gvariant;
	GtkPrintSettings* function(GKeyFile* keyFile, const(char)* groupName, GError** err) c_gtk_print_settings_new_from_key_file;
	GtkPrintSettings* function(GtkPrintSettings* other) c_gtk_print_settings_copy;
	void function(GtkPrintSettings* settings, GtkPrintSettingsFunc func, void* userData) c_gtk_print_settings_foreach;
	const(char)* function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get;
	int function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get_bool;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_collate;
	const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_default_source;
	const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_dither;
	double function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get_double;
	double function(GtkPrintSettings* settings, const(char)* key, double def) c_gtk_print_settings_get_double_with_default;
	GtkPrintDuplex function(GtkPrintSettings* settings) c_gtk_print_settings_get_duplex;
	const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_finishings;
	int function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_get_int;
	int function(GtkPrintSettings* settings, const(char)* key, int def) c_gtk_print_settings_get_int_with_default;
	double function(GtkPrintSettings* settings, const(char)* key, GtkUnit unit) c_gtk_print_settings_get_length;
	const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_media_type;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_n_copies;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_number_up;
	GtkNumberUpLayout function(GtkPrintSettings* settings) c_gtk_print_settings_get_number_up_layout;
	GtkPageOrientation function(GtkPrintSettings* settings) c_gtk_print_settings_get_orientation;
	const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_output_bin;
	GtkPageRange* function(GtkPrintSettings* settings, int* numRanges) c_gtk_print_settings_get_page_ranges;
	GtkPageSet function(GtkPrintSettings* settings) c_gtk_print_settings_get_page_set;
	double function(GtkPrintSettings* settings, GtkUnit unit) c_gtk_print_settings_get_paper_height;
	GtkPaperSize* function(GtkPrintSettings* settings) c_gtk_print_settings_get_paper_size;
	double function(GtkPrintSettings* settings, GtkUnit unit) c_gtk_print_settings_get_paper_width;
	GtkPrintPages function(GtkPrintSettings* settings) c_gtk_print_settings_get_print_pages;
	const(char)* function(GtkPrintSettings* settings) c_gtk_print_settings_get_printer;
	double function(GtkPrintSettings* settings) c_gtk_print_settings_get_printer_lpi;
	GtkPrintQuality function(GtkPrintSettings* settings) c_gtk_print_settings_get_quality;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_resolution;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_resolution_x;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_resolution_y;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_reverse;
	double function(GtkPrintSettings* settings) c_gtk_print_settings_get_scale;
	int function(GtkPrintSettings* settings) c_gtk_print_settings_get_use_color;
	int function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_has_key;
	int function(GtkPrintSettings* settings, char* fileName, GError** err) c_gtk_print_settings_load_file;
	int function(GtkPrintSettings* settings, GKeyFile* keyFile, const(char)* groupName, GError** err) c_gtk_print_settings_load_key_file;
	void function(GtkPrintSettings* settings, const(char)* key, const(char)* value) c_gtk_print_settings_set;
	void function(GtkPrintSettings* settings, const(char)* key, int value) c_gtk_print_settings_set_bool;
	void function(GtkPrintSettings* settings, int collate) c_gtk_print_settings_set_collate;
	void function(GtkPrintSettings* settings, const(char)* defaultSource) c_gtk_print_settings_set_default_source;
	void function(GtkPrintSettings* settings, const(char)* dither) c_gtk_print_settings_set_dither;
	void function(GtkPrintSettings* settings, const(char)* key, double value) c_gtk_print_settings_set_double;
	void function(GtkPrintSettings* settings, GtkPrintDuplex duplex) c_gtk_print_settings_set_duplex;
	void function(GtkPrintSettings* settings, const(char)* finishings) c_gtk_print_settings_set_finishings;
	void function(GtkPrintSettings* settings, const(char)* key, int value) c_gtk_print_settings_set_int;
	void function(GtkPrintSettings* settings, const(char)* key, double value, GtkUnit unit) c_gtk_print_settings_set_length;
	void function(GtkPrintSettings* settings, const(char)* mediaType) c_gtk_print_settings_set_media_type;
	void function(GtkPrintSettings* settings, int numCopies) c_gtk_print_settings_set_n_copies;
	void function(GtkPrintSettings* settings, int numberUp) c_gtk_print_settings_set_number_up;
	void function(GtkPrintSettings* settings, GtkNumberUpLayout numberUpLayout) c_gtk_print_settings_set_number_up_layout;
	void function(GtkPrintSettings* settings, GtkPageOrientation orientation) c_gtk_print_settings_set_orientation;
	void function(GtkPrintSettings* settings, const(char)* outputBin) c_gtk_print_settings_set_output_bin;
	void function(GtkPrintSettings* settings, GtkPageRange* pageRanges, int numRanges) c_gtk_print_settings_set_page_ranges;
	void function(GtkPrintSettings* settings, GtkPageSet pageSet) c_gtk_print_settings_set_page_set;
	void function(GtkPrintSettings* settings, double height, GtkUnit unit) c_gtk_print_settings_set_paper_height;
	void function(GtkPrintSettings* settings, GtkPaperSize* paperSize) c_gtk_print_settings_set_paper_size;
	void function(GtkPrintSettings* settings, double width, GtkUnit unit) c_gtk_print_settings_set_paper_width;
	void function(GtkPrintSettings* settings, GtkPrintPages pages) c_gtk_print_settings_set_print_pages;
	void function(GtkPrintSettings* settings, const(char)* printer) c_gtk_print_settings_set_printer;
	void function(GtkPrintSettings* settings, double lpi) c_gtk_print_settings_set_printer_lpi;
	void function(GtkPrintSettings* settings, GtkPrintQuality quality) c_gtk_print_settings_set_quality;
	void function(GtkPrintSettings* settings, int resolution) c_gtk_print_settings_set_resolution;
	void function(GtkPrintSettings* settings, int resolutionX, int resolutionY) c_gtk_print_settings_set_resolution_xy;
	void function(GtkPrintSettings* settings, int reverse) c_gtk_print_settings_set_reverse;
	void function(GtkPrintSettings* settings, double scale) c_gtk_print_settings_set_scale;
	void function(GtkPrintSettings* settings, int useColor) c_gtk_print_settings_set_use_color;
	int function(GtkPrintSettings* settings, char* fileName, GError** err) c_gtk_print_settings_to_file;
	GVariant* function(GtkPrintSettings* settings) c_gtk_print_settings_to_gvariant;
	void function(GtkPrintSettings* settings, GKeyFile* keyFile, const(char)* groupName) c_gtk_print_settings_to_key_file;
	void function(GtkPrintSettings* settings, const(char)* key) c_gtk_print_settings_unset;

	// gtk.ProgressBar

	GType function() c_gtk_progress_bar_get_type;
	GtkWidget* function() c_gtk_progress_bar_new;
	PangoEllipsizeMode function(GtkProgressBar* pbar) c_gtk_progress_bar_get_ellipsize;
	double function(GtkProgressBar* pbar) c_gtk_progress_bar_get_fraction;
	int function(GtkProgressBar* pbar) c_gtk_progress_bar_get_inverted;
	double function(GtkProgressBar* pbar) c_gtk_progress_bar_get_pulse_step;
	int function(GtkProgressBar* pbar) c_gtk_progress_bar_get_show_text;
	const(char)* function(GtkProgressBar* pbar) c_gtk_progress_bar_get_text;
	void function(GtkProgressBar* pbar) c_gtk_progress_bar_pulse;
	void function(GtkProgressBar* pbar, PangoEllipsizeMode mode) c_gtk_progress_bar_set_ellipsize;
	void function(GtkProgressBar* pbar, double fraction) c_gtk_progress_bar_set_fraction;
	void function(GtkProgressBar* pbar, int inverted) c_gtk_progress_bar_set_inverted;
	void function(GtkProgressBar* pbar, double fraction) c_gtk_progress_bar_set_pulse_step;
	void function(GtkProgressBar* pbar, int showText) c_gtk_progress_bar_set_show_text;
	void function(GtkProgressBar* pbar, const(char)* text) c_gtk_progress_bar_set_text;

	// gtk.ProgressBarAccessible

	GType function() c_gtk_progress_bar_accessible_get_type;

	// gtk.RadioAction

	GType function() c_gtk_radio_action_get_type;
	GtkRadioAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId, int value) c_gtk_radio_action_new;
	int function(GtkRadioAction* action) c_gtk_radio_action_get_current_value;
	GSList* function(GtkRadioAction* action) c_gtk_radio_action_get_group;
	void function(GtkRadioAction* action, GtkRadioAction* groupSource) c_gtk_radio_action_join_group;
	void function(GtkRadioAction* action, int currentValue) c_gtk_radio_action_set_current_value;
	void function(GtkRadioAction* action, GSList* group) c_gtk_radio_action_set_group;

	// gtk.RadioButton

	GType function() c_gtk_radio_button_get_type;
	GtkWidget* function(GSList* group) c_gtk_radio_button_new;
	GtkWidget* function(GtkRadioButton* radioGroupMember) c_gtk_radio_button_new_from_widget;
	GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_button_new_with_label;
	GtkWidget* function(GtkRadioButton* radioGroupMember, const(char)* label) c_gtk_radio_button_new_with_label_from_widget;
	GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_button_new_with_mnemonic;
	GtkWidget* function(GtkRadioButton* radioGroupMember, const(char)* label) c_gtk_radio_button_new_with_mnemonic_from_widget;
	GSList* function(GtkRadioButton* radioButton) c_gtk_radio_button_get_group;
	void function(GtkRadioButton* radioButton, GtkRadioButton* groupSource) c_gtk_radio_button_join_group;
	void function(GtkRadioButton* radioButton, GSList* group) c_gtk_radio_button_set_group;

	// gtk.RadioButtonAccessible

	GType function() c_gtk_radio_button_accessible_get_type;

	// gtk.RadioMenuItem

	GType function() c_gtk_radio_menu_item_get_type;
	GtkWidget* function(GSList* group) c_gtk_radio_menu_item_new;
	GtkWidget* function(GtkRadioMenuItem* group) c_gtk_radio_menu_item_new_from_widget;
	GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_menu_item_new_with_label;
	GtkWidget* function(GtkRadioMenuItem* group, const(char)* label) c_gtk_radio_menu_item_new_with_label_from_widget;
	GtkWidget* function(GSList* group, const(char)* label) c_gtk_radio_menu_item_new_with_mnemonic;
	GtkWidget* function(GtkRadioMenuItem* group, const(char)* label) c_gtk_radio_menu_item_new_with_mnemonic_from_widget;
	GSList* function(GtkRadioMenuItem* radioMenuItem) c_gtk_radio_menu_item_get_group;
	void function(GtkRadioMenuItem* radioMenuItem, GtkRadioMenuItem* groupSource) c_gtk_radio_menu_item_join_group;
	void function(GtkRadioMenuItem* radioMenuItem, GSList* group) c_gtk_radio_menu_item_set_group;

	// gtk.RadioMenuItemAccessible

	GType function() c_gtk_radio_menu_item_accessible_get_type;

	// gtk.RadioToolButton

	GType function() c_gtk_radio_tool_button_get_type;
	GtkToolItem* function(GSList* group) c_gtk_radio_tool_button_new;
	GtkToolItem* function(GSList* group, const(char)* stockId) c_gtk_radio_tool_button_new_from_stock;
	GtkToolItem* function(GtkRadioToolButton* group) c_gtk_radio_tool_button_new_from_widget;
	GtkToolItem* function(GtkRadioToolButton* group, const(char)* stockId) c_gtk_radio_tool_button_new_with_stock_from_widget;
	GSList* function(GtkRadioToolButton* button) c_gtk_radio_tool_button_get_group;
	void function(GtkRadioToolButton* button, GSList* group) c_gtk_radio_tool_button_set_group;

	// gtk.Range

	GType function() c_gtk_range_get_type;
	GtkAdjustment* function(GtkRange* range) c_gtk_range_get_adjustment;
	double function(GtkRange* range) c_gtk_range_get_fill_level;
	int function(GtkRange* range) c_gtk_range_get_flippable;
	int function(GtkRange* range) c_gtk_range_get_inverted;
	GtkSensitivityType function(GtkRange* range) c_gtk_range_get_lower_stepper_sensitivity;
	int function(GtkRange* range) c_gtk_range_get_min_slider_size;
	void function(GtkRange* range, GdkRectangle* rangeRect) c_gtk_range_get_range_rect;
	int function(GtkRange* range) c_gtk_range_get_restrict_to_fill_level;
	int function(GtkRange* range) c_gtk_range_get_round_digits;
	int function(GtkRange* range) c_gtk_range_get_show_fill_level;
	void function(GtkRange* range, int* sliderStart, int* sliderEnd) c_gtk_range_get_slider_range;
	int function(GtkRange* range) c_gtk_range_get_slider_size_fixed;
	GtkSensitivityType function(GtkRange* range) c_gtk_range_get_upper_stepper_sensitivity;
	double function(GtkRange* range) c_gtk_range_get_value;
	void function(GtkRange* range, GtkAdjustment* adjustment) c_gtk_range_set_adjustment;
	void function(GtkRange* range, double fillLevel) c_gtk_range_set_fill_level;
	void function(GtkRange* range, int flippable) c_gtk_range_set_flippable;
	void function(GtkRange* range, double step, double page) c_gtk_range_set_increments;
	void function(GtkRange* range, int setting) c_gtk_range_set_inverted;
	void function(GtkRange* range, GtkSensitivityType sensitivity) c_gtk_range_set_lower_stepper_sensitivity;
	void function(GtkRange* range, int minSize) c_gtk_range_set_min_slider_size;
	void function(GtkRange* range, double min, double max) c_gtk_range_set_range;
	void function(GtkRange* range, int restrictToFillLevel) c_gtk_range_set_restrict_to_fill_level;
	void function(GtkRange* range, int roundDigits) c_gtk_range_set_round_digits;
	void function(GtkRange* range, int showFillLevel) c_gtk_range_set_show_fill_level;
	void function(GtkRange* range, int sizeFixed) c_gtk_range_set_slider_size_fixed;
	void function(GtkRange* range, GtkSensitivityType sensitivity) c_gtk_range_set_upper_stepper_sensitivity;
	void function(GtkRange* range, double value) c_gtk_range_set_value;

	// gtk.RangeAccessible

	GType function() c_gtk_range_accessible_get_type;

	// gtk.RcProperty

	int function(GParamSpec* pspec, GString* gstring, GValue* propertyValue) c_gtk_rc_property_parse_border;
	int function(GParamSpec* pspec, GString* gstring, GValue* propertyValue) c_gtk_rc_property_parse_color;
	int function(GParamSpec* pspec, GString* gstring, GValue* propertyValue) c_gtk_rc_property_parse_enum;
	int function(GParamSpec* pspec, GString* gstring, GValue* propertyValue) c_gtk_rc_property_parse_flags;
	int function(GParamSpec* pspec, GString* gstring, GValue* propertyValue) c_gtk_rc_property_parse_requisition;

	// gtk.RcStyle

	GType function() c_gtk_rc_style_get_type;
	GtkRcStyle* function() c_gtk_rc_style_new;
	GtkRcStyle* function(GtkRcStyle* orig) c_gtk_rc_style_copy;
	void function(char* filename) c_gtk_rc_add_default_file;
	char* function(const(char)* moduleFile) c_gtk_rc_find_module_in_path;
	char* function(GtkSettings* settings, GScanner* scanner, const(char)* pixmapFile) c_gtk_rc_find_pixmap_in_path;
	char** function() c_gtk_rc_get_default_files;
	char* function() c_gtk_rc_get_im_module_file;
	char* function() c_gtk_rc_get_im_module_path;
	char* function() c_gtk_rc_get_module_dir;
	GtkStyle* function(GtkWidget* widget) c_gtk_rc_get_style;
	GtkStyle* function(GtkSettings* settings, const(char)* widgetPath, const(char)* classPath, GType type) c_gtk_rc_get_style_by_paths;
	char* function() c_gtk_rc_get_theme_dir;
	void function(const(char)* filename) c_gtk_rc_parse;
	uint function(GScanner* scanner, GdkColor* color) c_gtk_rc_parse_color;
	uint function(GScanner* scanner, GtkRcStyle* style, GdkColor* color) c_gtk_rc_parse_color_full;
	uint function(GScanner* scanner, GtkPathPriorityType* priority) c_gtk_rc_parse_priority;
	uint function(GScanner* scanner, GtkStateType* state) c_gtk_rc_parse_state;
	void function(const(char)* rcString) c_gtk_rc_parse_string;
	int function() c_gtk_rc_reparse_all;
	int function(GtkSettings* settings, int forceLoad) c_gtk_rc_reparse_all_for_settings;
	void function(GtkSettings* settings) c_gtk_rc_reset_styles;
	GScanner* function() c_gtk_rc_scanner_new;
	void function(char** filenames) c_gtk_rc_set_default_files;

	// gtk.RecentAction

	GType function() c_gtk_recent_action_get_type;
	GtkAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId) c_gtk_recent_action_new;
	GtkAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId, GtkRecentManager* manager) c_gtk_recent_action_new_for_manager;
	int function(GtkRecentAction* action) c_gtk_recent_action_get_show_numbers;
	void function(GtkRecentAction* action, int showNumbers) c_gtk_recent_action_set_show_numbers;

	// gtk.RecentChooser

	GType function() c_gtk_recent_chooser_get_type;
	void function(GtkRecentChooser* chooser, GtkRecentFilter* filter) c_gtk_recent_chooser_add_filter;
	GtkRecentInfo* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_current_item;
	char* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_current_uri;
	GtkRecentFilter* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_filter;
	GList* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_items;
	int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_limit;
	int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_local_only;
	int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_select_multiple;
	int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_icons;
	int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_not_found;
	int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_private;
	int function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_show_tips;
	GtkRecentSortType function(GtkRecentChooser* chooser) c_gtk_recent_chooser_get_sort_type;
	char** function(GtkRecentChooser* chooser, size_t* length) c_gtk_recent_chooser_get_uris;
	GSList* function(GtkRecentChooser* chooser) c_gtk_recent_chooser_list_filters;
	void function(GtkRecentChooser* chooser, GtkRecentFilter* filter) c_gtk_recent_chooser_remove_filter;
	void function(GtkRecentChooser* chooser) c_gtk_recent_chooser_select_all;
	int function(GtkRecentChooser* chooser, const(char)* uri, GError** err) c_gtk_recent_chooser_select_uri;
	int function(GtkRecentChooser* chooser, const(char)* uri, GError** err) c_gtk_recent_chooser_set_current_uri;
	void function(GtkRecentChooser* chooser, GtkRecentFilter* filter) c_gtk_recent_chooser_set_filter;
	void function(GtkRecentChooser* chooser, int limit) c_gtk_recent_chooser_set_limit;
	void function(GtkRecentChooser* chooser, int localOnly) c_gtk_recent_chooser_set_local_only;
	void function(GtkRecentChooser* chooser, int selectMultiple) c_gtk_recent_chooser_set_select_multiple;
	void function(GtkRecentChooser* chooser, int showIcons) c_gtk_recent_chooser_set_show_icons;
	void function(GtkRecentChooser* chooser, int showNotFound) c_gtk_recent_chooser_set_show_not_found;
	void function(GtkRecentChooser* chooser, int showPrivate) c_gtk_recent_chooser_set_show_private;
	void function(GtkRecentChooser* chooser, int showTips) c_gtk_recent_chooser_set_show_tips;
	void function(GtkRecentChooser* chooser, GtkRecentSortFunc sortFunc, void* sortData, GDestroyNotify dataDestroy) c_gtk_recent_chooser_set_sort_func;
	void function(GtkRecentChooser* chooser, GtkRecentSortType sortType) c_gtk_recent_chooser_set_sort_type;
	void function(GtkRecentChooser* chooser) c_gtk_recent_chooser_unselect_all;
	void function(GtkRecentChooser* chooser, const(char)* uri) c_gtk_recent_chooser_unselect_uri;

	// gtk.RecentChooserDialog

	GType function() c_gtk_recent_chooser_dialog_get_type;
	GtkWidget* function(const(char)* title, GtkWindow* parent, const(char)* firstButtonText, ... ) c_gtk_recent_chooser_dialog_new;
	GtkWidget* function(const(char)* title, GtkWindow* parent, GtkRecentManager* manager, const(char)* firstButtonText, ... ) c_gtk_recent_chooser_dialog_new_for_manager;

	// gtk.RecentChooserMenu

	GType function() c_gtk_recent_chooser_menu_get_type;
	GtkWidget* function() c_gtk_recent_chooser_menu_new;
	GtkWidget* function(GtkRecentManager* manager) c_gtk_recent_chooser_menu_new_for_manager;
	int function(GtkRecentChooserMenu* menu) c_gtk_recent_chooser_menu_get_show_numbers;
	void function(GtkRecentChooserMenu* menu, int showNumbers) c_gtk_recent_chooser_menu_set_show_numbers;

	// gtk.RecentChooserWidget

	GType function() c_gtk_recent_chooser_widget_get_type;
	GtkWidget* function() c_gtk_recent_chooser_widget_new;
	GtkWidget* function(GtkRecentManager* manager) c_gtk_recent_chooser_widget_new_for_manager;

	// gtk.RecentFilter

	GType function() c_gtk_recent_filter_get_type;
	GtkRecentFilter* function() c_gtk_recent_filter_new;
	void function(GtkRecentFilter* filter, int days) c_gtk_recent_filter_add_age;
	void function(GtkRecentFilter* filter, const(char)* application) c_gtk_recent_filter_add_application;
	void function(GtkRecentFilter* filter, GtkRecentFilterFlags needed, GtkRecentFilterFunc func, void* data, GDestroyNotify dataDestroy) c_gtk_recent_filter_add_custom;
	void function(GtkRecentFilter* filter, const(char)* group) c_gtk_recent_filter_add_group;
	void function(GtkRecentFilter* filter, const(char)* mimeType) c_gtk_recent_filter_add_mime_type;
	void function(GtkRecentFilter* filter, const(char)* pattern) c_gtk_recent_filter_add_pattern;
	void function(GtkRecentFilter* filter) c_gtk_recent_filter_add_pixbuf_formats;
	int function(GtkRecentFilter* filter, GtkRecentFilterInfo* filterInfo) c_gtk_recent_filter_filter;
	const(char)* function(GtkRecentFilter* filter) c_gtk_recent_filter_get_name;
	GtkRecentFilterFlags function(GtkRecentFilter* filter) c_gtk_recent_filter_get_needed;
	void function(GtkRecentFilter* filter, const(char)* name) c_gtk_recent_filter_set_name;

	// gtk.RecentInfo

	GType function() c_gtk_recent_info_get_type;
	GAppInfo* function(GtkRecentInfo* info, const(char)* appName, GError** err) c_gtk_recent_info_create_app_info;
	int function(GtkRecentInfo* info) c_gtk_recent_info_exists;
	uint function(GtkRecentInfo* info) c_gtk_recent_info_get_added;
	int function(GtkRecentInfo* info) c_gtk_recent_info_get_age;
	int function(GtkRecentInfo* info, const(char)* appName, char** appExec, uint* count, uint* time) c_gtk_recent_info_get_application_info;
	char** function(GtkRecentInfo* info, size_t* length) c_gtk_recent_info_get_applications;
	const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_description;
	const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_display_name;
	GIcon* function(GtkRecentInfo* info) c_gtk_recent_info_get_gicon;
	char** function(GtkRecentInfo* info, size_t* length) c_gtk_recent_info_get_groups;
	GdkPixbuf* function(GtkRecentInfo* info, int size) c_gtk_recent_info_get_icon;
	const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_mime_type;
	uint function(GtkRecentInfo* info) c_gtk_recent_info_get_modified;
	int function(GtkRecentInfo* info) c_gtk_recent_info_get_private_hint;
	char* function(GtkRecentInfo* info) c_gtk_recent_info_get_short_name;
	const(char)* function(GtkRecentInfo* info) c_gtk_recent_info_get_uri;
	char* function(GtkRecentInfo* info) c_gtk_recent_info_get_uri_display;
	uint function(GtkRecentInfo* info) c_gtk_recent_info_get_visited;
	int function(GtkRecentInfo* info, const(char)* appName) c_gtk_recent_info_has_application;
	int function(GtkRecentInfo* info, const(char)* groupName) c_gtk_recent_info_has_group;
	int function(GtkRecentInfo* info) c_gtk_recent_info_is_local;
	char* function(GtkRecentInfo* info) c_gtk_recent_info_last_application;
	int function(GtkRecentInfo* infoA, GtkRecentInfo* infoB) c_gtk_recent_info_match;
	GtkRecentInfo* function(GtkRecentInfo* info) c_gtk_recent_info_ref;
	void function(GtkRecentInfo* info) c_gtk_recent_info_unref;

	// gtk.RecentManager

	GType function() c_gtk_recent_manager_get_type;
	GtkRecentManager* function() c_gtk_recent_manager_new;
	GtkRecentManager* function() c_gtk_recent_manager_get_default;
	int function(GtkRecentManager* manager, const(char)* uri, GtkRecentData* recentData) c_gtk_recent_manager_add_full;
	int function(GtkRecentManager* manager, const(char)* uri) c_gtk_recent_manager_add_item;
	GList* function(GtkRecentManager* manager) c_gtk_recent_manager_get_items;
	int function(GtkRecentManager* manager, const(char)* uri) c_gtk_recent_manager_has_item;
	GtkRecentInfo* function(GtkRecentManager* manager, const(char)* uri, GError** err) c_gtk_recent_manager_lookup_item;
	int function(GtkRecentManager* manager, const(char)* uri, const(char)* newUri, GError** err) c_gtk_recent_manager_move_item;
	int function(GtkRecentManager* manager, GError** err) c_gtk_recent_manager_purge_items;
	int function(GtkRecentManager* manager, const(char)* uri, GError** err) c_gtk_recent_manager_remove_item;

	// gtk.RendererCellAccessible

	GType function() c_gtk_renderer_cell_accessible_get_type;
	AtkObject* function(GtkCellRenderer* renderer) c_gtk_renderer_cell_accessible_new;

	// gtk.Requisition

	GType function() c_gtk_requisition_get_type;
	GtkRequisition* function() c_gtk_requisition_new;
	GtkRequisition* function(GtkRequisition* requisition) c_gtk_requisition_copy;
	void function(GtkRequisition* requisition) c_gtk_requisition_free;

	// gtk.Revealer

	GType function() c_gtk_revealer_get_type;
	GtkWidget* function() c_gtk_revealer_new;
	int function(GtkRevealer* revealer) c_gtk_revealer_get_child_revealed;
	int function(GtkRevealer* revealer) c_gtk_revealer_get_reveal_child;
	uint function(GtkRevealer* revealer) c_gtk_revealer_get_transition_duration;
	GtkRevealerTransitionType function(GtkRevealer* revealer) c_gtk_revealer_get_transition_type;
	void function(GtkRevealer* revealer, int revealChild) c_gtk_revealer_set_reveal_child;
	void function(GtkRevealer* revealer, uint duration) c_gtk_revealer_set_transition_duration;
	void function(GtkRevealer* revealer, GtkRevealerTransitionType transition) c_gtk_revealer_set_transition_type;

	// gtk.Scale

	GType function() c_gtk_scale_get_type;
	GtkWidget* function(GtkOrientation orientation, GtkAdjustment* adjustment) c_gtk_scale_new;
	GtkWidget* function(GtkOrientation orientation, double min, double max, double step) c_gtk_scale_new_with_range;
	void function(GtkScale* scale, double value, GtkPositionType position, const(char)* markup) c_gtk_scale_add_mark;
	void function(GtkScale* scale) c_gtk_scale_clear_marks;
	int function(GtkScale* scale) c_gtk_scale_get_digits;
	int function(GtkScale* scale) c_gtk_scale_get_draw_value;
	int function(GtkScale* scale) c_gtk_scale_get_has_origin;
	PangoLayout* function(GtkScale* scale) c_gtk_scale_get_layout;
	void function(GtkScale* scale, int* x, int* y) c_gtk_scale_get_layout_offsets;
	GtkPositionType function(GtkScale* scale) c_gtk_scale_get_value_pos;
	void function(GtkScale* scale, int digits) c_gtk_scale_set_digits;
	void function(GtkScale* scale, int drawValue) c_gtk_scale_set_draw_value;
	void function(GtkScale* scale, int hasOrigin) c_gtk_scale_set_has_origin;
	void function(GtkScale* scale, GtkPositionType pos) c_gtk_scale_set_value_pos;

	// gtk.ScaleAccessible

	GType function() c_gtk_scale_accessible_get_type;

	// gtk.ScaleButton

	GType function() c_gtk_scale_button_get_type;
	GtkWidget* function(GtkIconSize size, double min, double max, double step, char** icons) c_gtk_scale_button_new;
	GtkAdjustment* function(GtkScaleButton* button) c_gtk_scale_button_get_adjustment;
	GtkWidget* function(GtkScaleButton* button) c_gtk_scale_button_get_minus_button;
	GtkWidget* function(GtkScaleButton* button) c_gtk_scale_button_get_plus_button;
	GtkWidget* function(GtkScaleButton* button) c_gtk_scale_button_get_popup;
	double function(GtkScaleButton* button) c_gtk_scale_button_get_value;
	void function(GtkScaleButton* button, GtkAdjustment* adjustment) c_gtk_scale_button_set_adjustment;
	void function(GtkScaleButton* button, char** icons) c_gtk_scale_button_set_icons;
	void function(GtkScaleButton* button, double value) c_gtk_scale_button_set_value;

	// gtk.ScaleButtonAccessible

	GType function() c_gtk_scale_button_accessible_get_type;

	// gtk.Scrollable

	GType function() c_gtk_scrollable_get_type;
	int function(GtkScrollable* scrollable, GtkBorder* border) c_gtk_scrollable_get_border;
	GtkAdjustment* function(GtkScrollable* scrollable) c_gtk_scrollable_get_hadjustment;
	GtkScrollablePolicy function(GtkScrollable* scrollable) c_gtk_scrollable_get_hscroll_policy;
	GtkAdjustment* function(GtkScrollable* scrollable) c_gtk_scrollable_get_vadjustment;
	GtkScrollablePolicy function(GtkScrollable* scrollable) c_gtk_scrollable_get_vscroll_policy;
	void function(GtkScrollable* scrollable, GtkAdjustment* hadjustment) c_gtk_scrollable_set_hadjustment;
	void function(GtkScrollable* scrollable, GtkScrollablePolicy policy) c_gtk_scrollable_set_hscroll_policy;
	void function(GtkScrollable* scrollable, GtkAdjustment* vadjustment) c_gtk_scrollable_set_vadjustment;
	void function(GtkScrollable* scrollable, GtkScrollablePolicy policy) c_gtk_scrollable_set_vscroll_policy;

	// gtk.Scrollbar

	GType function() c_gtk_scrollbar_get_type;
	GtkWidget* function(GtkOrientation orientation, GtkAdjustment* adjustment) c_gtk_scrollbar_new;

	// gtk.ScrolledWindow

	GType function() c_gtk_scrolled_window_get_type;
	GtkWidget* function(GtkAdjustment* hadjustment, GtkAdjustment* vadjustment) c_gtk_scrolled_window_new;
	void function(GtkScrolledWindow* scrolledWindow, GtkWidget* child) c_gtk_scrolled_window_add_with_viewport;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_capture_button_press;
	GtkAdjustment* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_hadjustment;
	GtkWidget* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_hscrollbar;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_kinetic_scrolling;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_max_content_height;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_max_content_width;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_min_content_height;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_min_content_width;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_overlay_scrolling;
	GtkCornerType function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_placement;
	void function(GtkScrolledWindow* scrolledWindow, GtkPolicyType* hscrollbarPolicy, GtkPolicyType* vscrollbarPolicy) c_gtk_scrolled_window_get_policy;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_propagate_natural_height;
	int function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_propagate_natural_width;
	GtkShadowType function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_shadow_type;
	GtkAdjustment* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_vadjustment;
	GtkWidget* function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_get_vscrollbar;
	void function(GtkScrolledWindow* scrolledWindow, int captureButtonPress) c_gtk_scrolled_window_set_capture_button_press;
	void function(GtkScrolledWindow* scrolledWindow, GtkAdjustment* hadjustment) c_gtk_scrolled_window_set_hadjustment;
	void function(GtkScrolledWindow* scrolledWindow, int kineticScrolling) c_gtk_scrolled_window_set_kinetic_scrolling;
	void function(GtkScrolledWindow* scrolledWindow, int height) c_gtk_scrolled_window_set_max_content_height;
	void function(GtkScrolledWindow* scrolledWindow, int width) c_gtk_scrolled_window_set_max_content_width;
	void function(GtkScrolledWindow* scrolledWindow, int height) c_gtk_scrolled_window_set_min_content_height;
	void function(GtkScrolledWindow* scrolledWindow, int width) c_gtk_scrolled_window_set_min_content_width;
	void function(GtkScrolledWindow* scrolledWindow, int overlayScrolling) c_gtk_scrolled_window_set_overlay_scrolling;
	void function(GtkScrolledWindow* scrolledWindow, GtkCornerType windowPlacement) c_gtk_scrolled_window_set_placement;
	void function(GtkScrolledWindow* scrolledWindow, GtkPolicyType hscrollbarPolicy, GtkPolicyType vscrollbarPolicy) c_gtk_scrolled_window_set_policy;
	void function(GtkScrolledWindow* scrolledWindow, int propagate) c_gtk_scrolled_window_set_propagate_natural_height;
	void function(GtkScrolledWindow* scrolledWindow, int propagate) c_gtk_scrolled_window_set_propagate_natural_width;
	void function(GtkScrolledWindow* scrolledWindow, GtkShadowType type) c_gtk_scrolled_window_set_shadow_type;
	void function(GtkScrolledWindow* scrolledWindow, GtkAdjustment* vadjustment) c_gtk_scrolled_window_set_vadjustment;
	void function(GtkScrolledWindow* scrolledWindow) c_gtk_scrolled_window_unset_placement;

	// gtk.ScrolledWindowAccessible

	GType function() c_gtk_scrolled_window_accessible_get_type;

	// gtk.SearchBar

	GType function() c_gtk_search_bar_get_type;
	GtkWidget* function() c_gtk_search_bar_new;
	void function(GtkSearchBar* bar, GtkEntry* entry) c_gtk_search_bar_connect_entry;
	int function(GtkSearchBar* bar) c_gtk_search_bar_get_search_mode;
	int function(GtkSearchBar* bar) c_gtk_search_bar_get_show_close_button;
	int function(GtkSearchBar* bar, GdkEvent* event) c_gtk_search_bar_handle_event;
	void function(GtkSearchBar* bar, int searchMode) c_gtk_search_bar_set_search_mode;
	void function(GtkSearchBar* bar, int visible) c_gtk_search_bar_set_show_close_button;

	// gtk.SearchEntry

	GType function() c_gtk_search_entry_get_type;
	GtkWidget* function() c_gtk_search_entry_new;
	int function(GtkSearchEntry* entry, GdkEvent* event) c_gtk_search_entry_handle_event;

	// gtk.SelectionData

	GType function() c_gtk_selection_data_get_type;
	GtkSelectionData* function(GtkSelectionData* data) c_gtk_selection_data_copy;
	void function(GtkSelectionData* data) c_gtk_selection_data_free;
	char* function(GtkSelectionData* selectionData) c_gtk_selection_data_get_data;
	GdkAtom function(GtkSelectionData* selectionData) c_gtk_selection_data_get_data_type;
	char* function(GtkSelectionData* selectionData, int* length) c_gtk_selection_data_get_data_with_length;
	GdkDisplay* function(GtkSelectionData* selectionData) c_gtk_selection_data_get_display;
	int function(GtkSelectionData* selectionData) c_gtk_selection_data_get_format;
	int function(GtkSelectionData* selectionData) c_gtk_selection_data_get_length;
	GdkPixbuf* function(GtkSelectionData* selectionData) c_gtk_selection_data_get_pixbuf;
	GdkAtom function(GtkSelectionData* selectionData) c_gtk_selection_data_get_selection;
	GdkAtom function(GtkSelectionData* selectionData) c_gtk_selection_data_get_target;
	int function(GtkSelectionData* selectionData, GdkAtom** targets, int* nAtoms) c_gtk_selection_data_get_targets;
	char* function(GtkSelectionData* selectionData) c_gtk_selection_data_get_text;
	char** function(GtkSelectionData* selectionData) c_gtk_selection_data_get_uris;
	void function(GtkSelectionData* selectionData, GdkAtom type, int format, char* data, int length) c_gtk_selection_data_set;
	int function(GtkSelectionData* selectionData, GdkPixbuf* pixbuf) c_gtk_selection_data_set_pixbuf;
	int function(GtkSelectionData* selectionData, const(char)* str, int len) c_gtk_selection_data_set_text;
	int function(GtkSelectionData* selectionData, char** uris) c_gtk_selection_data_set_uris;
	int function(GtkSelectionData* selectionData, int writable) c_gtk_selection_data_targets_include_image;
	int function(GtkSelectionData* selectionData, GtkTextBuffer* buffer) c_gtk_selection_data_targets_include_rich_text;
	int function(GtkSelectionData* selectionData) c_gtk_selection_data_targets_include_text;
	int function(GtkSelectionData* selectionData) c_gtk_selection_data_targets_include_uri;
	void function(GtkWidget* widget, GdkAtom selection, GdkAtom target, uint info) c_gtk_selection_add_target;
	void function(GtkWidget* widget, GdkAtom selection, GtkTargetEntry* targets, uint ntargets) c_gtk_selection_add_targets;
	void function(GtkWidget* widget, GdkAtom selection) c_gtk_selection_clear_targets;
	int function(GtkWidget* widget, GdkAtom selection, GdkAtom target, uint time) c_gtk_selection_convert;
	int function(GtkWidget* widget, GdkAtom selection, uint time) c_gtk_selection_owner_set;
	int function(GdkDisplay* display, GtkWidget* widget, GdkAtom selection, uint time) c_gtk_selection_owner_set_for_display;
	void function(GtkWidget* widget) c_gtk_selection_remove_all;

	// gtk.Separator

	GType function() c_gtk_separator_get_type;
	GtkWidget* function(GtkOrientation orientation) c_gtk_separator_new;

	// gtk.SeparatorMenuItem

	GType function() c_gtk_separator_menu_item_get_type;
	GtkWidget* function() c_gtk_separator_menu_item_new;

	// gtk.SeparatorToolItem

	GType function() c_gtk_separator_tool_item_get_type;
	GtkToolItem* function() c_gtk_separator_tool_item_new;
	int function(GtkSeparatorToolItem* item) c_gtk_separator_tool_item_get_draw;
	void function(GtkSeparatorToolItem* item, int draw) c_gtk_separator_tool_item_set_draw;

	// gtk.Settings

	GType function() c_gtk_settings_get_type;
	GtkSettings* function() c_gtk_settings_get_default;
	GtkSettings* function(GdkScreen* screen) c_gtk_settings_get_for_screen;
	void function(GParamSpec* pspec) c_gtk_settings_install_property;
	void function(GParamSpec* pspec, GtkRcPropertyParser parser) c_gtk_settings_install_property_parser;
	void function(GtkSettings* settings, const(char)* name) c_gtk_settings_reset_property;
	void function(GtkSettings* settings, const(char)* name, double vDouble, const(char)* origin) c_gtk_settings_set_double_property;
	void function(GtkSettings* settings, const(char)* name, glong vLong, const(char)* origin) c_gtk_settings_set_long_property;
	void function(GtkSettings* settings, const(char)* name, GtkSettingsValue* svalue) c_gtk_settings_set_property_value;
	void function(GtkSettings* settings, const(char)* name, const(char)* vString, const(char)* origin) c_gtk_settings_set_string_property;

	// gtk.ShortcutLabel

	GType function() c_gtk_shortcut_label_get_type;
	GtkWidget* function(const(char)* accelerator) c_gtk_shortcut_label_new;
	const(char)* function(GtkShortcutLabel* self) c_gtk_shortcut_label_get_accelerator;
	const(char)* function(GtkShortcutLabel* self) c_gtk_shortcut_label_get_disabled_text;
	void function(GtkShortcutLabel* self, const(char)* accelerator) c_gtk_shortcut_label_set_accelerator;
	void function(GtkShortcutLabel* self, const(char)* disabledText) c_gtk_shortcut_label_set_disabled_text;

	// gtk.ShortcutsGroup

	GType function() c_gtk_shortcuts_group_get_type;

	// gtk.ShortcutsSection

	GType function() c_gtk_shortcuts_section_get_type;

	// gtk.ShortcutsShortcut

	GType function() c_gtk_shortcuts_shortcut_get_type;

	// gtk.ShortcutsWindow

	GType function() c_gtk_shortcuts_window_get_type;

	// gtk.SizeGroup

	GType function() c_gtk_size_group_get_type;
	GtkSizeGroup* function(GtkSizeGroupMode mode) c_gtk_size_group_new;
	void function(GtkSizeGroup* sizeGroup, GtkWidget* widget) c_gtk_size_group_add_widget;
	int function(GtkSizeGroup* sizeGroup) c_gtk_size_group_get_ignore_hidden;
	GtkSizeGroupMode function(GtkSizeGroup* sizeGroup) c_gtk_size_group_get_mode;
	GSList* function(GtkSizeGroup* sizeGroup) c_gtk_size_group_get_widgets;
	void function(GtkSizeGroup* sizeGroup, GtkWidget* widget) c_gtk_size_group_remove_widget;
	void function(GtkSizeGroup* sizeGroup, int ignoreHidden) c_gtk_size_group_set_ignore_hidden;
	void function(GtkSizeGroup* sizeGroup, GtkSizeGroupMode mode) c_gtk_size_group_set_mode;

	// gtk.Socket

	GType function() c_gtk_socket_get_type;
	GtkWidget* function() c_gtk_socket_new;
	void function(GtkSocket* socket, ulong window) c_gtk_socket_add_id;
	ulong function(GtkSocket* socket) c_gtk_socket_get_id;
	GdkWindow* function(GtkSocket* socket) c_gtk_socket_get_plug_window;

	// gtk.SpinButton

	GType function() c_gtk_spin_button_get_type;
	GtkWidget* function(GtkAdjustment* adjustment, double climbRate, uint digits) c_gtk_spin_button_new;
	GtkWidget* function(double min, double max, double step) c_gtk_spin_button_new_with_range;
	void function(GtkSpinButton* spinButton, GtkAdjustment* adjustment, double climbRate, uint digits) c_gtk_spin_button_configure;
	GtkAdjustment* function(GtkSpinButton* spinButton) c_gtk_spin_button_get_adjustment;
	uint function(GtkSpinButton* spinButton) c_gtk_spin_button_get_digits;
	void function(GtkSpinButton* spinButton, double* step, double* page) c_gtk_spin_button_get_increments;
	int function(GtkSpinButton* spinButton) c_gtk_spin_button_get_numeric;
	void function(GtkSpinButton* spinButton, double* min, double* max) c_gtk_spin_button_get_range;
	int function(GtkSpinButton* spinButton) c_gtk_spin_button_get_snap_to_ticks;
	GtkSpinButtonUpdatePolicy function(GtkSpinButton* spinButton) c_gtk_spin_button_get_update_policy;
	double function(GtkSpinButton* spinButton) c_gtk_spin_button_get_value;
	int function(GtkSpinButton* spinButton) c_gtk_spin_button_get_value_as_int;
	int function(GtkSpinButton* spinButton) c_gtk_spin_button_get_wrap;
	void function(GtkSpinButton* spinButton, GtkAdjustment* adjustment) c_gtk_spin_button_set_adjustment;
	void function(GtkSpinButton* spinButton, uint digits) c_gtk_spin_button_set_digits;
	void function(GtkSpinButton* spinButton, double step, double page) c_gtk_spin_button_set_increments;
	void function(GtkSpinButton* spinButton, int numeric) c_gtk_spin_button_set_numeric;
	void function(GtkSpinButton* spinButton, double min, double max) c_gtk_spin_button_set_range;
	void function(GtkSpinButton* spinButton, int snapToTicks) c_gtk_spin_button_set_snap_to_ticks;
	void function(GtkSpinButton* spinButton, GtkSpinButtonUpdatePolicy policy) c_gtk_spin_button_set_update_policy;
	void function(GtkSpinButton* spinButton, double value) c_gtk_spin_button_set_value;
	void function(GtkSpinButton* spinButton, int wrap) c_gtk_spin_button_set_wrap;
	void function(GtkSpinButton* spinButton, GtkSpinType direction, double increment) c_gtk_spin_button_spin;
	void function(GtkSpinButton* spinButton) c_gtk_spin_button_update;

	// gtk.SpinButtonAccessible

	GType function() c_gtk_spin_button_accessible_get_type;

	// gtk.Spinner

	GType function() c_gtk_spinner_get_type;
	GtkWidget* function() c_gtk_spinner_new;
	void function(GtkSpinner* spinner) c_gtk_spinner_start;
	void function(GtkSpinner* spinner) c_gtk_spinner_stop;

	// gtk.SpinnerAccessible

	GType function() c_gtk_spinner_accessible_get_type;

	// gtk.Stack

	GType function() c_gtk_stack_get_type;
	GtkWidget* function() c_gtk_stack_new;
	void function(GtkStack* stack, GtkWidget* child, const(char)* name) c_gtk_stack_add_named;
	void function(GtkStack* stack, GtkWidget* child, const(char)* name, const(char)* title) c_gtk_stack_add_titled;
	GtkWidget* function(GtkStack* stack, const(char)* name) c_gtk_stack_get_child_by_name;
	int function(GtkStack* stack) c_gtk_stack_get_hhomogeneous;
	int function(GtkStack* stack) c_gtk_stack_get_homogeneous;
	int function(GtkStack* stack) c_gtk_stack_get_interpolate_size;
	uint function(GtkStack* stack) c_gtk_stack_get_transition_duration;
	int function(GtkStack* stack) c_gtk_stack_get_transition_running;
	GtkStackTransitionType function(GtkStack* stack) c_gtk_stack_get_transition_type;
	int function(GtkStack* stack) c_gtk_stack_get_vhomogeneous;
	GtkWidget* function(GtkStack* stack) c_gtk_stack_get_visible_child;
	const(char)* function(GtkStack* stack) c_gtk_stack_get_visible_child_name;
	void function(GtkStack* stack, int hhomogeneous) c_gtk_stack_set_hhomogeneous;
	void function(GtkStack* stack, int homogeneous) c_gtk_stack_set_homogeneous;
	void function(GtkStack* stack, int interpolateSize) c_gtk_stack_set_interpolate_size;
	void function(GtkStack* stack, uint duration) c_gtk_stack_set_transition_duration;
	void function(GtkStack* stack, GtkStackTransitionType transition) c_gtk_stack_set_transition_type;
	void function(GtkStack* stack, int vhomogeneous) c_gtk_stack_set_vhomogeneous;
	void function(GtkStack* stack, GtkWidget* child) c_gtk_stack_set_visible_child;
	void function(GtkStack* stack, const(char)* name, GtkStackTransitionType transition) c_gtk_stack_set_visible_child_full;
	void function(GtkStack* stack, const(char)* name) c_gtk_stack_set_visible_child_name;

	// gtk.StackAccessible

	GType function() c_gtk_stack_accessible_get_type;

	// gtk.StackSidebar

	GType function() c_gtk_stack_sidebar_get_type;
	GtkWidget* function() c_gtk_stack_sidebar_new;
	GtkStack* function(GtkStackSidebar* sidebar) c_gtk_stack_sidebar_get_stack;
	void function(GtkStackSidebar* sidebar, GtkStack* stack) c_gtk_stack_sidebar_set_stack;

	// gtk.StackSwitcher

	GType function() c_gtk_stack_switcher_get_type;
	GtkWidget* function() c_gtk_stack_switcher_new;
	GtkStack* function(GtkStackSwitcher* switcher) c_gtk_stack_switcher_get_stack;
	void function(GtkStackSwitcher* switcher, GtkStack* stack) c_gtk_stack_switcher_set_stack;

	// gtk.StatusIcon

	GType function() c_gtk_status_icon_get_type;
	GtkStatusIcon* function() c_gtk_status_icon_new;
	GtkStatusIcon* function(char* filename) c_gtk_status_icon_new_from_file;
	GtkStatusIcon* function(GIcon* icon) c_gtk_status_icon_new_from_gicon;
	GtkStatusIcon* function(const(char)* iconName) c_gtk_status_icon_new_from_icon_name;
	GtkStatusIcon* function(GdkPixbuf* pixbuf) c_gtk_status_icon_new_from_pixbuf;
	GtkStatusIcon* function(const(char)* stockId) c_gtk_status_icon_new_from_stock;
	void function(GtkMenu* menu, int* x, int* y, int* pushIn, void* userData) c_gtk_status_icon_position_menu;
	int function(GtkStatusIcon* statusIcon, GdkScreen** screen, GdkRectangle* area, GtkOrientation* orientation) c_gtk_status_icon_get_geometry;
	GIcon* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_gicon;
	int function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_has_tooltip;
	const(char)* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_icon_name;
	GdkPixbuf* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_pixbuf;
	GdkScreen* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_screen;
	int function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_size;
	const(char)* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_stock;
	GtkImageType function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_storage_type;
	const(char)* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_title;
	char* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_tooltip_markup;
	char* function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_tooltip_text;
	int function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_visible;
	uint function(GtkStatusIcon* statusIcon) c_gtk_status_icon_get_x11_window_id;
	int function(GtkStatusIcon* statusIcon) c_gtk_status_icon_is_embedded;
	void function(GtkStatusIcon* statusIcon, char* filename) c_gtk_status_icon_set_from_file;
	void function(GtkStatusIcon* statusIcon, GIcon* icon) c_gtk_status_icon_set_from_gicon;
	void function(GtkStatusIcon* statusIcon, const(char)* iconName) c_gtk_status_icon_set_from_icon_name;
	void function(GtkStatusIcon* statusIcon, GdkPixbuf* pixbuf) c_gtk_status_icon_set_from_pixbuf;
	void function(GtkStatusIcon* statusIcon, const(char)* stockId) c_gtk_status_icon_set_from_stock;
	void function(GtkStatusIcon* statusIcon, int hasTooltip) c_gtk_status_icon_set_has_tooltip;
	void function(GtkStatusIcon* statusIcon, const(char)* name) c_gtk_status_icon_set_name;
	void function(GtkStatusIcon* statusIcon, GdkScreen* screen) c_gtk_status_icon_set_screen;
	void function(GtkStatusIcon* statusIcon, const(char)* title) c_gtk_status_icon_set_title;
	void function(GtkStatusIcon* statusIcon, const(char)* markup) c_gtk_status_icon_set_tooltip_markup;
	void function(GtkStatusIcon* statusIcon, const(char)* text) c_gtk_status_icon_set_tooltip_text;
	void function(GtkStatusIcon* statusIcon, int visible) c_gtk_status_icon_set_visible;

	// gtk.Statusbar

	GType function() c_gtk_statusbar_get_type;
	GtkWidget* function() c_gtk_statusbar_new;
	uint function(GtkStatusbar* statusbar, const(char)* contextDescription) c_gtk_statusbar_get_context_id;
	GtkWidget* function(GtkStatusbar* statusbar) c_gtk_statusbar_get_message_area;
	void function(GtkStatusbar* statusbar, uint contextId) c_gtk_statusbar_pop;
	uint function(GtkStatusbar* statusbar, uint contextId, const(char)* text) c_gtk_statusbar_push;
	void function(GtkStatusbar* statusbar, uint contextId, uint messageId) c_gtk_statusbar_remove;
	void function(GtkStatusbar* statusbar, uint contextId) c_gtk_statusbar_remove_all;

	// gtk.StatusbarAccessible

	GType function() c_gtk_statusbar_accessible_get_type;

	// gtk.StockItem

	GtkStockItem* function(GtkStockItem* item) c_gtk_stock_item_copy;
	void function(GtkStockItem* item) c_gtk_stock_item_free;
	void function(GtkStockItem* items, uint nItems) c_gtk_stock_add;
	void function(GtkStockItem* items, uint nItems) c_gtk_stock_add_static;
	GSList* function() c_gtk_stock_list_ids;
	int function(const(char)* stockId, GtkStockItem* item) c_gtk_stock_lookup;
	void function(const(char)* domain, GtkTranslateFunc func, void* data, GDestroyNotify notify) c_gtk_stock_set_translate_func;

	// gtk.Style

	GType function() c_gtk_style_get_type;
	GtkStyle* function() c_gtk_style_new;
	void function(GtkStyle* style, cairo_t* cr, GdkWindow* window, GtkStateType stateType, int x, int y, int width, int height) c_gtk_style_apply_default_background;
	GtkStyle* function(GtkStyle* style, GdkWindow* window) c_gtk_style_attach;
	GtkStyle* function(GtkStyle* style) c_gtk_style_copy;
	void function(GtkStyle* style) c_gtk_style_detach;
	void function(GtkStyle* style, GType widgetType, const(char)* firstPropertyName, ... ) c_gtk_style_get;
	void function(GtkStyle* style, GType widgetType, const(char)* propertyName, GValue* value) c_gtk_style_get_style_property;
	void function(GtkStyle* style, GType widgetType, const(char)* firstPropertyName, void* varArgs) c_gtk_style_get_valist;
	int function(GtkStyle* style) c_gtk_style_has_context;
	int function(GtkStyle* style, const(char)* colorName, GdkColor* color) c_gtk_style_lookup_color;
	GtkIconSet* function(GtkStyle* style, const(char)* stockId) c_gtk_style_lookup_icon_set;
	GdkPixbuf* function(GtkStyle* style, GtkIconSource* source, GtkTextDirection direction, GtkStateType state, GtkIconSize size, GtkWidget* widget, const(char)* detail) c_gtk_style_render_icon;
	void function(GtkStyle* style, GdkWindow* window, GtkStateType stateType) c_gtk_style_set_background;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, GtkArrowType arrowType, int fill, int x, int y, int width, int height) c_gtk_paint_arrow;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_box;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth) c_gtk_paint_box_gap;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_check;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_diamond;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int x, int y, GtkExpanderStyle expanderStyle) c_gtk_paint_expander;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkPositionType gapSide) c_gtk_paint_extension;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_flat_box;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_focus;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkOrientation orientation) c_gtk_paint_handle;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int x1, int x2, int y) c_gtk_paint_hline;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, int useText, GtkWidget* widget, const(char)* detail, int x, int y, PangoLayout* layout) c_gtk_paint_layout;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_option;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, GdkWindowEdge edge, int x, int y, int width, int height) c_gtk_paint_resize_grip;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_shadow;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkPositionType gapSide, int gapX, int gapWidth) c_gtk_paint_shadow_gap;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height, GtkOrientation orientation) c_gtk_paint_slider;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, uint step, int x, int y, int width, int height) c_gtk_paint_spinner;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkShadowType shadowType, GtkWidget* widget, const(char)* detail, int x, int y, int width, int height) c_gtk_paint_tab;
	void function(GtkStyle* style, cairo_t* cr, GtkStateType stateType, GtkWidget* widget, const(char)* detail, int y1, int y2, int x) c_gtk_paint_vline;

	// gtk.StyleContext

	GType function() c_gtk_style_context_get_type;
	GtkStyleContext* function() c_gtk_style_context_new;
	void function(GdkScreen* screen, GtkStyleProvider* provider, uint priority) c_gtk_style_context_add_provider_for_screen;
	void function(GdkScreen* screen, GtkStyleProvider* provider) c_gtk_style_context_remove_provider_for_screen;
	void function(GdkScreen* screen) c_gtk_style_context_reset_widgets;
	void function(GtkStyleContext* context, const(char)* className) c_gtk_style_context_add_class;
	void function(GtkStyleContext* context, GtkStyleProvider* provider, uint priority) c_gtk_style_context_add_provider;
	void function(GtkStyleContext* context, const(char)* regionName, GtkRegionFlags flags) c_gtk_style_context_add_region;
	void function(GtkStyleContext* context, void* regionId) c_gtk_style_context_cancel_animations;
	void function(GtkStyleContext* context, GtkStateFlags state, ... ) c_gtk_style_context_get;
	void function(GtkStyleContext* context, GtkStateFlags state, GdkRGBA* color) c_gtk_style_context_get_background_color;
	void function(GtkStyleContext* context, GtkStateFlags state, GtkBorder* border) c_gtk_style_context_get_border;
	void function(GtkStyleContext* context, GtkStateFlags state, GdkRGBA* color) c_gtk_style_context_get_border_color;
	void function(GtkStyleContext* context, GtkStateFlags state, GdkRGBA* color) c_gtk_style_context_get_color;
	GtkTextDirection function(GtkStyleContext* context) c_gtk_style_context_get_direction;
	PangoFontDescription* function(GtkStyleContext* context, GtkStateFlags state) c_gtk_style_context_get_font;
	GdkFrameClock* function(GtkStyleContext* context) c_gtk_style_context_get_frame_clock;
	GtkJunctionSides function(GtkStyleContext* context) c_gtk_style_context_get_junction_sides;
	void function(GtkStyleContext* context, GtkStateFlags state, GtkBorder* margin) c_gtk_style_context_get_margin;
	void function(GtkStyleContext* context, GtkStateFlags state, GtkBorder* padding) c_gtk_style_context_get_padding;
	GtkStyleContext* function(GtkStyleContext* context) c_gtk_style_context_get_parent;
	GtkWidgetPath* function(GtkStyleContext* context) c_gtk_style_context_get_path;
	void function(GtkStyleContext* context, const(char)* property, GtkStateFlags state, GValue* value) c_gtk_style_context_get_property;
	int function(GtkStyleContext* context) c_gtk_style_context_get_scale;
	GdkScreen* function(GtkStyleContext* context) c_gtk_style_context_get_screen;
	GtkCssSection* function(GtkStyleContext* context, const(char)* property) c_gtk_style_context_get_section;
	GtkStateFlags function(GtkStyleContext* context) c_gtk_style_context_get_state;
	void function(GtkStyleContext* context, ... ) c_gtk_style_context_get_style;
	void function(GtkStyleContext* context, const(char)* propertyName, GValue* value) c_gtk_style_context_get_style_property;
	void function(GtkStyleContext* context, void* args) c_gtk_style_context_get_style_valist;
	void function(GtkStyleContext* context, GtkStateFlags state, void* args) c_gtk_style_context_get_valist;
	int function(GtkStyleContext* context, const(char)* className) c_gtk_style_context_has_class;
	int function(GtkStyleContext* context, const(char)* regionName, GtkRegionFlags* flagsReturn) c_gtk_style_context_has_region;
	void function(GtkStyleContext* context) c_gtk_style_context_invalidate;
	GList* function(GtkStyleContext* context) c_gtk_style_context_list_classes;
	GList* function(GtkStyleContext* context) c_gtk_style_context_list_regions;
	int function(GtkStyleContext* context, const(char)* colorName, GdkRGBA* color) c_gtk_style_context_lookup_color;
	GtkIconSet* function(GtkStyleContext* context, const(char)* stockId) c_gtk_style_context_lookup_icon_set;
	void function(GtkStyleContext* context, GdkWindow* window, void* regionId, GtkStateType state, int stateValue) c_gtk_style_context_notify_state_change;
	void function(GtkStyleContext* context) c_gtk_style_context_pop_animatable_region;
	void function(GtkStyleContext* context, void* regionId) c_gtk_style_context_push_animatable_region;
	void function(GtkStyleContext* context, const(char)* className) c_gtk_style_context_remove_class;
	void function(GtkStyleContext* context, GtkStyleProvider* provider) c_gtk_style_context_remove_provider;
	void function(GtkStyleContext* context, const(char)* regionName) c_gtk_style_context_remove_region;
	void function(GtkStyleContext* context) c_gtk_style_context_restore;
	void function(GtkStyleContext* context) c_gtk_style_context_save;
	void function(GtkStyleContext* context, GdkWindow* window, int dx, int dy) c_gtk_style_context_scroll_animations;
	void function(GtkStyleContext* context, GdkWindow* window) c_gtk_style_context_set_background;
	void function(GtkStyleContext* context, GtkTextDirection direction) c_gtk_style_context_set_direction;
	void function(GtkStyleContext* context, GdkFrameClock* frameClock) c_gtk_style_context_set_frame_clock;
	void function(GtkStyleContext* context, GtkJunctionSides sides) c_gtk_style_context_set_junction_sides;
	void function(GtkStyleContext* context, GtkStyleContext* parent) c_gtk_style_context_set_parent;
	void function(GtkStyleContext* context, GtkWidgetPath* path) c_gtk_style_context_set_path;
	void function(GtkStyleContext* context, int scale) c_gtk_style_context_set_scale;
	void function(GtkStyleContext* context, GdkScreen* screen) c_gtk_style_context_set_screen;
	void function(GtkStyleContext* context, GtkStateFlags flags) c_gtk_style_context_set_state;
	int function(GtkStyleContext* context, GtkStateType state, double* progress) c_gtk_style_context_state_is_running;
	char* function(GtkStyleContext* context, GtkStyleContextPrintFlags flags) c_gtk_style_context_to_string;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_activity;
	void function(GtkStyleContext* context, cairo_t* cr, double angle, double x, double y, double size) c_gtk_render_arrow;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_background;
	void function(GtkStyleContext* context, double x, double y, double width, double height, GdkRectangle* outClip) c_gtk_render_background_get_clip;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_check;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_expander;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height, GtkPositionType gapSide) c_gtk_render_extension;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_focus;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_frame;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height, GtkPositionType gapSide, double xy0Gap, double xy1Gap) c_gtk_render_frame_gap;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_handle;
	void function(GtkStyleContext* context, cairo_t* cr, GdkPixbuf* pixbuf, double x, double y) c_gtk_render_icon;
	GdkPixbuf* function(GtkStyleContext* context, GtkIconSource* source, GtkIconSize size) c_gtk_render_icon_pixbuf;
	void function(GtkStyleContext* context, cairo_t* cr, cairo_surface_t* surface, double x, double y) c_gtk_render_icon_surface;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, PangoLayout* layout, int index, PangoDirection direction) c_gtk_render_insertion_cursor;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, PangoLayout* layout) c_gtk_render_layout;
	void function(GtkStyleContext* context, cairo_t* cr, double x0, double y0, double x1, double y1) c_gtk_render_line;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height) c_gtk_render_option;
	void function(GtkStyleContext* context, cairo_t* cr, double x, double y, double width, double height, GtkOrientation orientation) c_gtk_render_slider;

	// gtk.StyleProperties

	GType function() c_gtk_style_properties_get_type;
	GtkStyleProperties* function() c_gtk_style_properties_new;
	int function(const(char)* propertyName, GtkStylePropertyParser* parseFunc, GParamSpec** pspec) c_gtk_style_properties_lookup_property;
	void function(GtkStylePropertyParser parseFunc, GParamSpec* pspec) c_gtk_style_properties_register_property;
	void function(GtkStyleProperties* props) c_gtk_style_properties_clear;
	void function(GtkStyleProperties* props, GtkStateFlags state, ... ) c_gtk_style_properties_get;
	int function(GtkStyleProperties* props, const(char)* property, GtkStateFlags state, GValue* value) c_gtk_style_properties_get_property;
	void function(GtkStyleProperties* props, GtkStateFlags state, void* args) c_gtk_style_properties_get_valist;
	GtkSymbolicColor* function(GtkStyleProperties* props, const(char)* name) c_gtk_style_properties_lookup_color;
	void function(GtkStyleProperties* props, const(char)* name, GtkSymbolicColor* color) c_gtk_style_properties_map_color;
	void function(GtkStyleProperties* props, GtkStyleProperties* propsToMerge, int replace) c_gtk_style_properties_merge;
	void function(GtkStyleProperties* props, GtkStateFlags state, ... ) c_gtk_style_properties_set;
	void function(GtkStyleProperties* props, const(char)* property, GtkStateFlags state, GValue* value) c_gtk_style_properties_set_property;
	void function(GtkStyleProperties* props, GtkStateFlags state, void* args) c_gtk_style_properties_set_valist;
	void function(GtkStyleProperties* props, const(char)* property, GtkStateFlags state) c_gtk_style_properties_unset_property;

	// gtk.StyleProvider

	GType function() c_gtk_style_provider_get_type;
	GtkIconFactory* function(GtkStyleProvider* provider, GtkWidgetPath* path) c_gtk_style_provider_get_icon_factory;
	GtkStyleProperties* function(GtkStyleProvider* provider, GtkWidgetPath* path) c_gtk_style_provider_get_style;
	int function(GtkStyleProvider* provider, GtkWidgetPath* path, GtkStateFlags state, GParamSpec* pspec, GValue* value) c_gtk_style_provider_get_style_property;

	// gtk.Switch

	GType function() c_gtk_switch_get_type;
	GtkWidget* function() c_gtk_switch_new;
	int function(GtkSwitch* sw) c_gtk_switch_get_active;
	int function(GtkSwitch* sw) c_gtk_switch_get_state;
	void function(GtkSwitch* sw, int isActive) c_gtk_switch_set_active;
	void function(GtkSwitch* sw, int state) c_gtk_switch_set_state;

	// gtk.SwitchAccessible

	GType function() c_gtk_switch_accessible_get_type;

	// gtk.SymbolicColor

	GType function() c_gtk_symbolic_color_get_type;
	GtkSymbolicColor* function(GtkSymbolicColor* color, double factor) c_gtk_symbolic_color_new_alpha;
	GtkSymbolicColor* function(GdkRGBA* color) c_gtk_symbolic_color_new_literal;
	GtkSymbolicColor* function(GtkSymbolicColor* color1, GtkSymbolicColor* color2, double factor) c_gtk_symbolic_color_new_mix;
	GtkSymbolicColor* function(const(char)* name) c_gtk_symbolic_color_new_name;
	GtkSymbolicColor* function(GtkSymbolicColor* color, double factor) c_gtk_symbolic_color_new_shade;
	GtkSymbolicColor* function(const(char)* themeClass, int id) c_gtk_symbolic_color_new_win32;
	GtkSymbolicColor* function(GtkSymbolicColor* color) c_gtk_symbolic_color_ref;
	int function(GtkSymbolicColor* color, GtkStyleProperties* props, GdkRGBA* resolvedColor) c_gtk_symbolic_color_resolve;
	char* function(GtkSymbolicColor* color) c_gtk_symbolic_color_to_string;
	void function(GtkSymbolicColor* color) c_gtk_symbolic_color_unref;

	// gtk.Table

	GType function() c_gtk_table_get_type;
	GtkWidget* function(uint rows, uint columns, int homogeneous) c_gtk_table_new;
	void function(GtkTable* table, GtkWidget* child, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, uint xpadding, uint ypadding) c_gtk_table_attach;
	void function(GtkTable* table, GtkWidget* widget, uint leftAttach, uint rightAttach, uint topAttach, uint bottomAttach) c_gtk_table_attach_defaults;
	uint function(GtkTable* table, uint column) c_gtk_table_get_col_spacing;
	uint function(GtkTable* table) c_gtk_table_get_default_col_spacing;
	uint function(GtkTable* table) c_gtk_table_get_default_row_spacing;
	int function(GtkTable* table) c_gtk_table_get_homogeneous;
	uint function(GtkTable* table, uint row) c_gtk_table_get_row_spacing;
	void function(GtkTable* table, uint* rows, uint* columns) c_gtk_table_get_size;
	void function(GtkTable* table, uint rows, uint columns) c_gtk_table_resize;
	void function(GtkTable* table, uint column, uint spacing) c_gtk_table_set_col_spacing;
	void function(GtkTable* table, uint spacing) c_gtk_table_set_col_spacings;
	void function(GtkTable* table, int homogeneous) c_gtk_table_set_homogeneous;
	void function(GtkTable* table, uint row, uint spacing) c_gtk_table_set_row_spacing;
	void function(GtkTable* table, uint spacing) c_gtk_table_set_row_spacings;

	// gtk.TargetEntry

	GType function() c_gtk_target_entry_get_type;
	GtkTargetEntry* function(const(char)* target, uint flags, uint info) c_gtk_target_entry_new;
	GtkTargetEntry* function(GtkTargetEntry* data) c_gtk_target_entry_copy;
	void function(GtkTargetEntry* data) c_gtk_target_entry_free;

	// gtk.TargetList

	GType function() c_gtk_target_list_get_type;
	GtkTargetList* function(GtkTargetEntry* targets, uint ntargets) c_gtk_target_list_new;
	void function(GtkTargetList* list, GdkAtom target, uint flags, uint info) c_gtk_target_list_add;
	void function(GtkTargetList* list, uint info, int writable) c_gtk_target_list_add_image_targets;
	void function(GtkTargetList* list, uint info, int deserializable, GtkTextBuffer* buffer) c_gtk_target_list_add_rich_text_targets;
	void function(GtkTargetList* list, GtkTargetEntry* targets, uint ntargets) c_gtk_target_list_add_table;
	void function(GtkTargetList* list, uint info) c_gtk_target_list_add_text_targets;
	void function(GtkTargetList* list, uint info) c_gtk_target_list_add_uri_targets;
	int function(GtkTargetList* list, GdkAtom target, uint* info) c_gtk_target_list_find;
	GtkTargetList* function(GtkTargetList* list) c_gtk_target_list_ref;
	void function(GtkTargetList* list, GdkAtom target) c_gtk_target_list_remove;
	void function(GtkTargetList* list) c_gtk_target_list_unref;
	void function(GtkTargetEntry* targets, int nTargets) c_gtk_target_table_free;
	GtkTargetEntry* function(GtkTargetList* list, int* nTargets) c_gtk_target_table_new_from_list;
	int function(GdkAtom* targets, int nTargets, int writable) c_gtk_targets_include_image;
	int function(GdkAtom* targets, int nTargets, GtkTextBuffer* buffer) c_gtk_targets_include_rich_text;
	int function(GdkAtom* targets, int nTargets) c_gtk_targets_include_text;
	int function(GdkAtom* targets, int nTargets) c_gtk_targets_include_uri;

	// gtk.TearoffMenuItem

	GType function() c_gtk_tearoff_menu_item_get_type;
	GtkWidget* function() c_gtk_tearoff_menu_item_new;

	// gtk.TextAttributes

	GType function() c_gtk_text_attributes_get_type;
	GtkTextAttributes* function() c_gtk_text_attributes_new;
	GtkTextAttributes* function(GtkTextAttributes* src) c_gtk_text_attributes_copy;
	void function(GtkTextAttributes* src, GtkTextAttributes* dest) c_gtk_text_attributes_copy_values;
	GtkTextAttributes* function(GtkTextAttributes* values) c_gtk_text_attributes_ref;
	void function(GtkTextAttributes* values) c_gtk_text_attributes_unref;

	// gtk.TextBuffer

	GType function() c_gtk_text_buffer_get_type;
	GtkTextBuffer* function(GtkTextTagTable* table) c_gtk_text_buffer_new;
	void function(GtkTextBuffer* buffer, GtkTextMark* mark, GtkTextIter* where) c_gtk_text_buffer_add_mark;
	void function(GtkTextBuffer* buffer, GtkClipboard* clipboard) c_gtk_text_buffer_add_selection_clipboard;
	void function(GtkTextBuffer* buffer, GtkTextTag* tag, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_apply_tag;
	void function(GtkTextBuffer* buffer, const(char)* name, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_apply_tag_by_name;
	int function(GtkTextBuffer* buffer, GtkTextIter* iter, int interactive, int defaultEditable) c_gtk_text_buffer_backspace;
	void function(GtkTextBuffer* buffer) c_gtk_text_buffer_begin_user_action;
	void function(GtkTextBuffer* buffer, GtkClipboard* clipboard) c_gtk_text_buffer_copy_clipboard;
	GtkTextChildAnchor* function(GtkTextBuffer* buffer, GtkTextIter* iter) c_gtk_text_buffer_create_child_anchor;
	GtkTextMark* function(GtkTextBuffer* buffer, const(char)* markName, GtkTextIter* where, int leftGravity) c_gtk_text_buffer_create_mark;
	GtkTextTag* function(GtkTextBuffer* buffer, const(char)* tagName, const(char)* firstPropertyName, ... ) c_gtk_text_buffer_create_tag;
	void function(GtkTextBuffer* buffer, GtkClipboard* clipboard, int defaultEditable) c_gtk_text_buffer_cut_clipboard;
	void function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_delete;
	int function(GtkTextBuffer* buffer, GtkTextIter* startIter, GtkTextIter* endIter, int defaultEditable) c_gtk_text_buffer_delete_interactive;
	void function(GtkTextBuffer* buffer, GtkTextMark* mark) c_gtk_text_buffer_delete_mark;
	void function(GtkTextBuffer* buffer, const(char)* name) c_gtk_text_buffer_delete_mark_by_name;
	int function(GtkTextBuffer* buffer, int interactive, int defaultEditable) c_gtk_text_buffer_delete_selection;
	int function(GtkTextBuffer* registerBuffer, GtkTextBuffer* contentBuffer, GdkAtom format, GtkTextIter* iter, ubyte* data, size_t length, GError** err) c_gtk_text_buffer_deserialize;
	int function(GtkTextBuffer* buffer, GdkAtom format) c_gtk_text_buffer_deserialize_get_can_create_tags;
	void function(GtkTextBuffer* buffer, GdkAtom format, int canCreateTags) c_gtk_text_buffer_deserialize_set_can_create_tags;
	void function(GtkTextBuffer* buffer) c_gtk_text_buffer_end_user_action;
	void function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_get_bounds;
	int function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_char_count;
	GtkTargetList* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_copy_target_list;
	GdkAtom* function(GtkTextBuffer* buffer, int* nFormats) c_gtk_text_buffer_get_deserialize_formats;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter) c_gtk_text_buffer_get_end_iter;
	int function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_has_selection;
	GtkTextMark* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_insert;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextChildAnchor* anchor) c_gtk_text_buffer_get_iter_at_child_anchor;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, int lineNumber) c_gtk_text_buffer_get_iter_at_line;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, int lineNumber, int byteIndex) c_gtk_text_buffer_get_iter_at_line_index;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, int lineNumber, int charOffset) c_gtk_text_buffer_get_iter_at_line_offset;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextMark* mark) c_gtk_text_buffer_get_iter_at_mark;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, int charOffset) c_gtk_text_buffer_get_iter_at_offset;
	int function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_line_count;
	GtkTextMark* function(GtkTextBuffer* buffer, const(char)* name) c_gtk_text_buffer_get_mark;
	int function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_modified;
	GtkTargetList* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_paste_target_list;
	GtkTextMark* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_selection_bound;
	int function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_get_selection_bounds;
	GdkAtom* function(GtkTextBuffer* buffer, int* nFormats) c_gtk_text_buffer_get_serialize_formats;
	char* function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end, int includeHiddenChars) c_gtk_text_buffer_get_slice;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter) c_gtk_text_buffer_get_start_iter;
	GtkTextTagTable* function(GtkTextBuffer* buffer) c_gtk_text_buffer_get_tag_table;
	char* function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end, int includeHiddenChars) c_gtk_text_buffer_get_text;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len) c_gtk_text_buffer_insert;
	void function(GtkTextBuffer* buffer, const(char)* text, int len) c_gtk_text_buffer_insert_at_cursor;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextChildAnchor* anchor) c_gtk_text_buffer_insert_child_anchor;
	int function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len, int defaultEditable) c_gtk_text_buffer_insert_interactive;
	int function(GtkTextBuffer* buffer, const(char)* text, int len, int defaultEditable) c_gtk_text_buffer_insert_interactive_at_cursor;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* markup, int len) c_gtk_text_buffer_insert_markup;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, GdkPixbuf* pixbuf) c_gtk_text_buffer_insert_pixbuf;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_insert_range;
	int function(GtkTextBuffer* buffer, GtkTextIter* iter, GtkTextIter* start, GtkTextIter* end, int defaultEditable) c_gtk_text_buffer_insert_range_interactive;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len, GtkTextTag* firstTag, ... ) c_gtk_text_buffer_insert_with_tags;
	void function(GtkTextBuffer* buffer, GtkTextIter* iter, const(char)* text, int len, const(char)* firstTagName, ... ) c_gtk_text_buffer_insert_with_tags_by_name;
	void function(GtkTextBuffer* buffer, GtkTextMark* mark, GtkTextIter* where) c_gtk_text_buffer_move_mark;
	void function(GtkTextBuffer* buffer, const(char)* name, GtkTextIter* where) c_gtk_text_buffer_move_mark_by_name;
	void function(GtkTextBuffer* buffer, GtkClipboard* clipboard, GtkTextIter* overrideLocation, int defaultEditable) c_gtk_text_buffer_paste_clipboard;
	void function(GtkTextBuffer* buffer, GtkTextIter* where) c_gtk_text_buffer_place_cursor;
	GdkAtom function(GtkTextBuffer* buffer, const(char)* mimeType, GtkTextBufferDeserializeFunc funct, void* userData, GDestroyNotify userDataDestroy) c_gtk_text_buffer_register_deserialize_format;
	GdkAtom function(GtkTextBuffer* buffer, const(char)* tagsetName) c_gtk_text_buffer_register_deserialize_tagset;
	GdkAtom function(GtkTextBuffer* buffer, const(char)* mimeType, GtkTextBufferSerializeFunc funct, void* userData, GDestroyNotify userDataDestroy) c_gtk_text_buffer_register_serialize_format;
	GdkAtom function(GtkTextBuffer* buffer, const(char)* tagsetName) c_gtk_text_buffer_register_serialize_tagset;
	void function(GtkTextBuffer* buffer, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_remove_all_tags;
	void function(GtkTextBuffer* buffer, GtkClipboard* clipboard) c_gtk_text_buffer_remove_selection_clipboard;
	void function(GtkTextBuffer* buffer, GtkTextTag* tag, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_remove_tag;
	void function(GtkTextBuffer* buffer, const(char)* name, GtkTextIter* start, GtkTextIter* end) c_gtk_text_buffer_remove_tag_by_name;
	void function(GtkTextBuffer* buffer, GtkTextIter* ins, GtkTextIter* bound) c_gtk_text_buffer_select_range;
	ubyte* function(GtkTextBuffer* registerBuffer, GtkTextBuffer* contentBuffer, GdkAtom format, GtkTextIter* start, GtkTextIter* end, size_t* length) c_gtk_text_buffer_serialize;
	void function(GtkTextBuffer* buffer, int setting) c_gtk_text_buffer_set_modified;
	void function(GtkTextBuffer* buffer, const(char)* text, int len) c_gtk_text_buffer_set_text;
	void function(GtkTextBuffer* buffer, GdkAtom format) c_gtk_text_buffer_unregister_deserialize_format;
	void function(GtkTextBuffer* buffer, GdkAtom format) c_gtk_text_buffer_unregister_serialize_format;

	// gtk.TextCellAccessible

	GType function() c_gtk_text_cell_accessible_get_type;

	// gtk.TextChildAnchor

	GType function() c_gtk_text_child_anchor_get_type;
	GtkTextChildAnchor* function() c_gtk_text_child_anchor_new;
	int function(GtkTextChildAnchor* anchor) c_gtk_text_child_anchor_get_deleted;
	GList* function(GtkTextChildAnchor* anchor) c_gtk_text_child_anchor_get_widgets;

	// gtk.TextIter

	GType function() c_gtk_text_iter_get_type;
	void function(GtkTextIter* iter, GtkTextIter* other) c_gtk_text_iter_assign;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_char;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_chars;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_cursor_position;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_cursor_positions;
	int function(GtkTextIter* iter, GtkTextCharPredicate pred, void* userData, GtkTextIter* limit) c_gtk_text_iter_backward_find_char;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_line;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_lines;
	int function(GtkTextIter* iter, const(char)* str, GtkTextSearchFlags flags, GtkTextIter* matchStart, GtkTextIter* matchEnd, GtkTextIter* limit) c_gtk_text_iter_backward_search;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_sentence_start;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_sentence_starts;
	int function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_backward_to_tag_toggle;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_visible_cursor_position;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_visible_cursor_positions;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_visible_line;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_visible_lines;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_visible_word_start;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_visible_word_starts;
	int function(GtkTextIter* iter) c_gtk_text_iter_backward_word_start;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_backward_word_starts;
	int function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_begins_tag;
	int function(GtkTextIter* iter, int defaultEditability) c_gtk_text_iter_can_insert;
	int function(GtkTextIter* lhs, GtkTextIter* rhs) c_gtk_text_iter_compare;
	GtkTextIter* function(GtkTextIter* iter) c_gtk_text_iter_copy;
	int function(GtkTextIter* iter, int defaultSetting) c_gtk_text_iter_editable;
	int function(GtkTextIter* iter) c_gtk_text_iter_ends_line;
	int function(GtkTextIter* iter) c_gtk_text_iter_ends_sentence;
	int function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_ends_tag;
	int function(GtkTextIter* iter) c_gtk_text_iter_ends_word;
	int function(GtkTextIter* lhs, GtkTextIter* rhs) c_gtk_text_iter_equal;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_char;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_chars;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_cursor_position;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_cursor_positions;
	int function(GtkTextIter* iter, GtkTextCharPredicate pred, void* userData, GtkTextIter* limit) c_gtk_text_iter_forward_find_char;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_line;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_lines;
	int function(GtkTextIter* iter, const(char)* str, GtkTextSearchFlags flags, GtkTextIter* matchStart, GtkTextIter* matchEnd, GtkTextIter* limit) c_gtk_text_iter_forward_search;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_sentence_end;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_sentence_ends;
	void function(GtkTextIter* iter) c_gtk_text_iter_forward_to_end;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_to_line_end;
	int function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_forward_to_tag_toggle;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_visible_cursor_position;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_visible_cursor_positions;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_visible_line;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_visible_lines;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_visible_word_end;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_visible_word_ends;
	int function(GtkTextIter* iter) c_gtk_text_iter_forward_word_end;
	int function(GtkTextIter* iter, int count) c_gtk_text_iter_forward_word_ends;
	void function(GtkTextIter* iter) c_gtk_text_iter_free;
	int function(GtkTextIter* iter, GtkTextAttributes* values) c_gtk_text_iter_get_attributes;
	GtkTextBuffer* function(GtkTextIter* iter) c_gtk_text_iter_get_buffer;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_bytes_in_line;
	dchar function(GtkTextIter* iter) c_gtk_text_iter_get_char;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_chars_in_line;
	GtkTextChildAnchor* function(GtkTextIter* iter) c_gtk_text_iter_get_child_anchor;
	PangoLanguage* function(GtkTextIter* iter) c_gtk_text_iter_get_language;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_line;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_line_index;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_line_offset;
	GSList* function(GtkTextIter* iter) c_gtk_text_iter_get_marks;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_offset;
	GdkPixbuf* function(GtkTextIter* iter) c_gtk_text_iter_get_pixbuf;
	char* function(GtkTextIter* start, GtkTextIter* end) c_gtk_text_iter_get_slice;
	GSList* function(GtkTextIter* iter) c_gtk_text_iter_get_tags;
	char* function(GtkTextIter* start, GtkTextIter* end) c_gtk_text_iter_get_text;
	GSList* function(GtkTextIter* iter, int toggledOn) c_gtk_text_iter_get_toggled_tags;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_visible_line_index;
	int function(GtkTextIter* iter) c_gtk_text_iter_get_visible_line_offset;
	char* function(GtkTextIter* start, GtkTextIter* end) c_gtk_text_iter_get_visible_slice;
	char* function(GtkTextIter* start, GtkTextIter* end) c_gtk_text_iter_get_visible_text;
	int function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_has_tag;
	int function(GtkTextIter* iter, GtkTextIter* start, GtkTextIter* end) c_gtk_text_iter_in_range;
	int function(GtkTextIter* iter) c_gtk_text_iter_inside_sentence;
	int function(GtkTextIter* iter) c_gtk_text_iter_inside_word;
	int function(GtkTextIter* iter) c_gtk_text_iter_is_cursor_position;
	int function(GtkTextIter* iter) c_gtk_text_iter_is_end;
	int function(GtkTextIter* iter) c_gtk_text_iter_is_start;
	void function(GtkTextIter* first, GtkTextIter* second) c_gtk_text_iter_order;
	void function(GtkTextIter* iter, int lineNumber) c_gtk_text_iter_set_line;
	void function(GtkTextIter* iter, int byteOnLine) c_gtk_text_iter_set_line_index;
	void function(GtkTextIter* iter, int charOnLine) c_gtk_text_iter_set_line_offset;
	void function(GtkTextIter* iter, int charOffset) c_gtk_text_iter_set_offset;
	void function(GtkTextIter* iter, int byteOnLine) c_gtk_text_iter_set_visible_line_index;
	void function(GtkTextIter* iter, int charOnLine) c_gtk_text_iter_set_visible_line_offset;
	int function(GtkTextIter* iter) c_gtk_text_iter_starts_line;
	int function(GtkTextIter* iter) c_gtk_text_iter_starts_sentence;
	int function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_starts_tag;
	int function(GtkTextIter* iter) c_gtk_text_iter_starts_word;
	int function(GtkTextIter* iter, GtkTextTag* tag) c_gtk_text_iter_toggles_tag;

	// gtk.TextMark

	GType function() c_gtk_text_mark_get_type;
	GtkTextMark* function(const(char)* name, int leftGravity) c_gtk_text_mark_new;
	GtkTextBuffer* function(GtkTextMark* mark) c_gtk_text_mark_get_buffer;
	int function(GtkTextMark* mark) c_gtk_text_mark_get_deleted;
	int function(GtkTextMark* mark) c_gtk_text_mark_get_left_gravity;
	const(char)* function(GtkTextMark* mark) c_gtk_text_mark_get_name;
	int function(GtkTextMark* mark) c_gtk_text_mark_get_visible;
	void function(GtkTextMark* mark, int setting) c_gtk_text_mark_set_visible;

	// gtk.TextTag

	GType function() c_gtk_text_tag_get_type;
	GtkTextTag* function(const(char)* name) c_gtk_text_tag_new;
	void function(GtkTextTag* tag, int sizeChanged) c_gtk_text_tag_changed;
	int function(GtkTextTag* tag, GObject* eventObject, GdkEvent* event, GtkTextIter* iter) c_gtk_text_tag_event;
	int function(GtkTextTag* tag) c_gtk_text_tag_get_priority;
	void function(GtkTextTag* tag, int priority) c_gtk_text_tag_set_priority;

	// gtk.TextTagTable

	GType function() c_gtk_text_tag_table_get_type;
	GtkTextTagTable* function() c_gtk_text_tag_table_new;
	int function(GtkTextTagTable* table, GtkTextTag* tag) c_gtk_text_tag_table_add;
	void function(GtkTextTagTable* table, GtkTextTagTableForeach func, void* data) c_gtk_text_tag_table_foreach;
	int function(GtkTextTagTable* table) c_gtk_text_tag_table_get_size;
	GtkTextTag* function(GtkTextTagTable* table, const(char)* name) c_gtk_text_tag_table_lookup;
	void function(GtkTextTagTable* table, GtkTextTag* tag) c_gtk_text_tag_table_remove;

	// gtk.TextView

	GType function() c_gtk_text_view_get_type;
	GtkWidget* function() c_gtk_text_view_new;
	GtkWidget* function(GtkTextBuffer* buffer) c_gtk_text_view_new_with_buffer;
	void function(GtkTextView* textView, GtkWidget* child, GtkTextChildAnchor* anchor) c_gtk_text_view_add_child_at_anchor;
	void function(GtkTextView* textView, GtkWidget* child, GtkTextWindowType whichWindow, int xpos, int ypos) c_gtk_text_view_add_child_in_window;
	int function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_backward_display_line;
	int function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_backward_display_line_start;
	void function(GtkTextView* textView, GtkTextWindowType win, int bufferX, int bufferY, int* windowX, int* windowY) c_gtk_text_view_buffer_to_window_coords;
	int function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_forward_display_line;
	int function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_forward_display_line_end;
	int function(GtkTextView* textView) c_gtk_text_view_get_accepts_tab;
	int function(GtkTextView* textView, GtkTextWindowType type) c_gtk_text_view_get_border_window_size;
	int function(GtkTextView* textView) c_gtk_text_view_get_bottom_margin;
	GtkTextBuffer* function(GtkTextView* textView) c_gtk_text_view_get_buffer;
	void function(GtkTextView* textView, GtkTextIter* iter, GdkRectangle* strong, GdkRectangle* weak) c_gtk_text_view_get_cursor_locations;
	int function(GtkTextView* textView) c_gtk_text_view_get_cursor_visible;
	GtkTextAttributes* function(GtkTextView* textView) c_gtk_text_view_get_default_attributes;
	int function(GtkTextView* textView) c_gtk_text_view_get_editable;
	GtkAdjustment* function(GtkTextView* textView) c_gtk_text_view_get_hadjustment;
	int function(GtkTextView* textView) c_gtk_text_view_get_indent;
	GtkInputHints function(GtkTextView* textView) c_gtk_text_view_get_input_hints;
	GtkInputPurpose function(GtkTextView* textView) c_gtk_text_view_get_input_purpose;
	int function(GtkTextView* textView, GtkTextIter* iter, int x, int y) c_gtk_text_view_get_iter_at_location;
	int function(GtkTextView* textView, GtkTextIter* iter, int* trailing, int x, int y) c_gtk_text_view_get_iter_at_position;
	void function(GtkTextView* textView, GtkTextIter* iter, GdkRectangle* location) c_gtk_text_view_get_iter_location;
	GtkJustification function(GtkTextView* textView) c_gtk_text_view_get_justification;
	int function(GtkTextView* textView) c_gtk_text_view_get_left_margin;
	void function(GtkTextView* textView, GtkTextIter* targetIter, int y, int* lineTop) c_gtk_text_view_get_line_at_y;
	void function(GtkTextView* textView, GtkTextIter* iter, int* y, int* height) c_gtk_text_view_get_line_yrange;
	int function(GtkTextView* textView) c_gtk_text_view_get_monospace;
	int function(GtkTextView* textView) c_gtk_text_view_get_overwrite;
	int function(GtkTextView* textView) c_gtk_text_view_get_pixels_above_lines;
	int function(GtkTextView* textView) c_gtk_text_view_get_pixels_below_lines;
	int function(GtkTextView* textView) c_gtk_text_view_get_pixels_inside_wrap;
	int function(GtkTextView* textView) c_gtk_text_view_get_right_margin;
	PangoTabArray* function(GtkTextView* textView) c_gtk_text_view_get_tabs;
	int function(GtkTextView* textView) c_gtk_text_view_get_top_margin;
	GtkAdjustment* function(GtkTextView* textView) c_gtk_text_view_get_vadjustment;
	void function(GtkTextView* textView, GdkRectangle* visibleRect) c_gtk_text_view_get_visible_rect;
	GdkWindow* function(GtkTextView* textView, GtkTextWindowType win) c_gtk_text_view_get_window;
	GtkTextWindowType function(GtkTextView* textView, GdkWindow* window) c_gtk_text_view_get_window_type;
	GtkWrapMode function(GtkTextView* textView) c_gtk_text_view_get_wrap_mode;
	int function(GtkTextView* textView, GdkEventKey* event) c_gtk_text_view_im_context_filter_keypress;
	void function(GtkTextView* textView, GtkWidget* child, int xpos, int ypos) c_gtk_text_view_move_child;
	int function(GtkTextView* textView, GtkTextMark* mark) c_gtk_text_view_move_mark_onscreen;
	int function(GtkTextView* textView, GtkTextIter* iter, int count) c_gtk_text_view_move_visually;
	int function(GtkTextView* textView) c_gtk_text_view_place_cursor_onscreen;
	void function(GtkTextView* textView) c_gtk_text_view_reset_cursor_blink;
	void function(GtkTextView* textView) c_gtk_text_view_reset_im_context;
	void function(GtkTextView* textView, GtkTextMark* mark) c_gtk_text_view_scroll_mark_onscreen;
	int function(GtkTextView* textView, GtkTextIter* iter, double withinMargin, int useAlign, double xalign, double yalign) c_gtk_text_view_scroll_to_iter;
	void function(GtkTextView* textView, GtkTextMark* mark, double withinMargin, int useAlign, double xalign, double yalign) c_gtk_text_view_scroll_to_mark;
	void function(GtkTextView* textView, int acceptsTab) c_gtk_text_view_set_accepts_tab;
	void function(GtkTextView* textView, GtkTextWindowType type, int size) c_gtk_text_view_set_border_window_size;
	void function(GtkTextView* textView, int bottomMargin) c_gtk_text_view_set_bottom_margin;
	void function(GtkTextView* textView, GtkTextBuffer* buffer) c_gtk_text_view_set_buffer;
	void function(GtkTextView* textView, int setting) c_gtk_text_view_set_cursor_visible;
	void function(GtkTextView* textView, int setting) c_gtk_text_view_set_editable;
	void function(GtkTextView* textView, int indent) c_gtk_text_view_set_indent;
	void function(GtkTextView* textView, GtkInputHints hints) c_gtk_text_view_set_input_hints;
	void function(GtkTextView* textView, GtkInputPurpose purpose) c_gtk_text_view_set_input_purpose;
	void function(GtkTextView* textView, GtkJustification justification) c_gtk_text_view_set_justification;
	void function(GtkTextView* textView, int leftMargin) c_gtk_text_view_set_left_margin;
	void function(GtkTextView* textView, int monospace) c_gtk_text_view_set_monospace;
	void function(GtkTextView* textView, int overwrite) c_gtk_text_view_set_overwrite;
	void function(GtkTextView* textView, int pixelsAboveLines) c_gtk_text_view_set_pixels_above_lines;
	void function(GtkTextView* textView, int pixelsBelowLines) c_gtk_text_view_set_pixels_below_lines;
	void function(GtkTextView* textView, int pixelsInsideWrap) c_gtk_text_view_set_pixels_inside_wrap;
	void function(GtkTextView* textView, int rightMargin) c_gtk_text_view_set_right_margin;
	void function(GtkTextView* textView, PangoTabArray* tabs) c_gtk_text_view_set_tabs;
	void function(GtkTextView* textView, int topMargin) c_gtk_text_view_set_top_margin;
	void function(GtkTextView* textView, GtkWrapMode wrapMode) c_gtk_text_view_set_wrap_mode;
	int function(GtkTextView* textView, GtkTextIter* iter) c_gtk_text_view_starts_display_line;
	void function(GtkTextView* textView, GtkTextWindowType win, int windowX, int windowY, int* bufferX, int* bufferY) c_gtk_text_view_window_to_buffer_coords;

	// gtk.TextViewAccessible

	GType function() c_gtk_text_view_accessible_get_type;

	// gtk.ThemingEngine

	GType function() c_gtk_theming_engine_get_type;
	GtkThemingEngine* function(const(char)* name) c_gtk_theming_engine_load;
	void function(const(char)* nameSpace, GtkStylePropertyParser parseFunc, GParamSpec* pspec) c_gtk_theming_engine_register_property;
	void function(GtkThemingEngine* engine, GtkStateFlags state, ... ) c_gtk_theming_engine_get;
	void function(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color) c_gtk_theming_engine_get_background_color;
	void function(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* border) c_gtk_theming_engine_get_border;
	void function(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color) c_gtk_theming_engine_get_border_color;
	void function(GtkThemingEngine* engine, GtkStateFlags state, GdkRGBA* color) c_gtk_theming_engine_get_color;
	GtkTextDirection function(GtkThemingEngine* engine) c_gtk_theming_engine_get_direction;
	PangoFontDescription* function(GtkThemingEngine* engine, GtkStateFlags state) c_gtk_theming_engine_get_font;
	GtkJunctionSides function(GtkThemingEngine* engine) c_gtk_theming_engine_get_junction_sides;
	void function(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* margin) c_gtk_theming_engine_get_margin;
	void function(GtkThemingEngine* engine, GtkStateFlags state, GtkBorder* padding) c_gtk_theming_engine_get_padding;
	GtkWidgetPath* function(GtkThemingEngine* engine) c_gtk_theming_engine_get_path;
	void function(GtkThemingEngine* engine, const(char)* property, GtkStateFlags state, GValue* value) c_gtk_theming_engine_get_property;
	GdkScreen* function(GtkThemingEngine* engine) c_gtk_theming_engine_get_screen;
	GtkStateFlags function(GtkThemingEngine* engine) c_gtk_theming_engine_get_state;
	void function(GtkThemingEngine* engine, ... ) c_gtk_theming_engine_get_style;
	void function(GtkThemingEngine* engine, const(char)* propertyName, GValue* value) c_gtk_theming_engine_get_style_property;
	void function(GtkThemingEngine* engine, void* args) c_gtk_theming_engine_get_style_valist;
	void function(GtkThemingEngine* engine, GtkStateFlags state, void* args) c_gtk_theming_engine_get_valist;
	int function(GtkThemingEngine* engine, const(char)* styleClass) c_gtk_theming_engine_has_class;
	int function(GtkThemingEngine* engine, const(char)* styleRegion, GtkRegionFlags* flags) c_gtk_theming_engine_has_region;
	int function(GtkThemingEngine* engine, const(char)* colorName, GdkRGBA* color) c_gtk_theming_engine_lookup_color;
	int function(GtkThemingEngine* engine, GtkStateType state, double* progress) c_gtk_theming_engine_state_is_running;

	// gtk.ToggleAction

	GType function() c_gtk_toggle_action_get_type;
	GtkToggleAction* function(const(char)* name, const(char)* label, const(char)* tooltip, const(char)* stockId) c_gtk_toggle_action_new;
	int function(GtkToggleAction* action) c_gtk_toggle_action_get_active;
	int function(GtkToggleAction* action) c_gtk_toggle_action_get_draw_as_radio;
	void function(GtkToggleAction* action, int isActive) c_gtk_toggle_action_set_active;
	void function(GtkToggleAction* action, int drawAsRadio) c_gtk_toggle_action_set_draw_as_radio;
	void function(GtkToggleAction* action) c_gtk_toggle_action_toggled;

	// gtk.ToggleButton

	GType function() c_gtk_toggle_button_get_type;
	GtkWidget* function() c_gtk_toggle_button_new;
	GtkWidget* function(const(char)* label) c_gtk_toggle_button_new_with_label;
	GtkWidget* function(const(char)* label) c_gtk_toggle_button_new_with_mnemonic;
	int function(GtkToggleButton* toggleButton) c_gtk_toggle_button_get_active;
	int function(GtkToggleButton* toggleButton) c_gtk_toggle_button_get_inconsistent;
	int function(GtkToggleButton* toggleButton) c_gtk_toggle_button_get_mode;
	void function(GtkToggleButton* toggleButton, int isActive) c_gtk_toggle_button_set_active;
	void function(GtkToggleButton* toggleButton, int setting) c_gtk_toggle_button_set_inconsistent;
	void function(GtkToggleButton* toggleButton, int drawIndicator) c_gtk_toggle_button_set_mode;
	void function(GtkToggleButton* toggleButton) c_gtk_toggle_button_toggled;

	// gtk.ToggleButtonAccessible

	GType function() c_gtk_toggle_button_accessible_get_type;

	// gtk.ToggleToolButton

	GType function() c_gtk_toggle_tool_button_get_type;
	GtkToolItem* function() c_gtk_toggle_tool_button_new;
	GtkToolItem* function(const(char)* stockId) c_gtk_toggle_tool_button_new_from_stock;
	int function(GtkToggleToolButton* button) c_gtk_toggle_tool_button_get_active;
	void function(GtkToggleToolButton* button, int isActive) c_gtk_toggle_tool_button_set_active;

	// gtk.ToolButton

	GType function() c_gtk_tool_button_get_type;
	GtkToolItem* function(GtkWidget* iconWidget, const(char)* label) c_gtk_tool_button_new;
	GtkToolItem* function(const(char)* stockId) c_gtk_tool_button_new_from_stock;
	const(char)* function(GtkToolButton* button) c_gtk_tool_button_get_icon_name;
	GtkWidget* function(GtkToolButton* button) c_gtk_tool_button_get_icon_widget;
	const(char)* function(GtkToolButton* button) c_gtk_tool_button_get_label;
	GtkWidget* function(GtkToolButton* button) c_gtk_tool_button_get_label_widget;
	const(char)* function(GtkToolButton* button) c_gtk_tool_button_get_stock_id;
	int function(GtkToolButton* button) c_gtk_tool_button_get_use_underline;
	void function(GtkToolButton* button, const(char)* iconName) c_gtk_tool_button_set_icon_name;
	void function(GtkToolButton* button, GtkWidget* iconWidget) c_gtk_tool_button_set_icon_widget;
	void function(GtkToolButton* button, const(char)* label) c_gtk_tool_button_set_label;
	void function(GtkToolButton* button, GtkWidget* labelWidget) c_gtk_tool_button_set_label_widget;
	void function(GtkToolButton* button, const(char)* stockId) c_gtk_tool_button_set_stock_id;
	void function(GtkToolButton* button, int useUnderline) c_gtk_tool_button_set_use_underline;

	// gtk.ToolItem

	GType function() c_gtk_tool_item_get_type;
	GtkToolItem* function() c_gtk_tool_item_new;
	PangoEllipsizeMode function(GtkToolItem* toolItem) c_gtk_tool_item_get_ellipsize_mode;
	int function(GtkToolItem* toolItem) c_gtk_tool_item_get_expand;
	int function(GtkToolItem* toolItem) c_gtk_tool_item_get_homogeneous;
	GtkIconSize function(GtkToolItem* toolItem) c_gtk_tool_item_get_icon_size;
	int function(GtkToolItem* toolItem) c_gtk_tool_item_get_is_important;
	GtkOrientation function(GtkToolItem* toolItem) c_gtk_tool_item_get_orientation;
	GtkWidget* function(GtkToolItem* toolItem, const(char)* menuItemId) c_gtk_tool_item_get_proxy_menu_item;
	GtkReliefStyle function(GtkToolItem* toolItem) c_gtk_tool_item_get_relief_style;
	float function(GtkToolItem* toolItem) c_gtk_tool_item_get_text_alignment;
	GtkOrientation function(GtkToolItem* toolItem) c_gtk_tool_item_get_text_orientation;
	GtkSizeGroup* function(GtkToolItem* toolItem) c_gtk_tool_item_get_text_size_group;
	GtkToolbarStyle function(GtkToolItem* toolItem) c_gtk_tool_item_get_toolbar_style;
	int function(GtkToolItem* toolItem) c_gtk_tool_item_get_use_drag_window;
	int function(GtkToolItem* toolItem) c_gtk_tool_item_get_visible_horizontal;
	int function(GtkToolItem* toolItem) c_gtk_tool_item_get_visible_vertical;
	void function(GtkToolItem* toolItem) c_gtk_tool_item_rebuild_menu;
	GtkWidget* function(GtkToolItem* toolItem) c_gtk_tool_item_retrieve_proxy_menu_item;
	void function(GtkToolItem* toolItem, int expand) c_gtk_tool_item_set_expand;
	void function(GtkToolItem* toolItem, int homogeneous) c_gtk_tool_item_set_homogeneous;
	void function(GtkToolItem* toolItem, int isImportant) c_gtk_tool_item_set_is_important;
	void function(GtkToolItem* toolItem, const(char)* menuItemId, GtkWidget* menuItem) c_gtk_tool_item_set_proxy_menu_item;
	void function(GtkToolItem* toolItem, const(char)* markup) c_gtk_tool_item_set_tooltip_markup;
	void function(GtkToolItem* toolItem, const(char)* text) c_gtk_tool_item_set_tooltip_text;
	void function(GtkToolItem* toolItem, int useDragWindow) c_gtk_tool_item_set_use_drag_window;
	void function(GtkToolItem* toolItem, int visibleHorizontal) c_gtk_tool_item_set_visible_horizontal;
	void function(GtkToolItem* toolItem, int visibleVertical) c_gtk_tool_item_set_visible_vertical;
	void function(GtkToolItem* toolItem) c_gtk_tool_item_toolbar_reconfigured;

	// gtk.ToolItemGroup

	GType function() c_gtk_tool_item_group_get_type;
	GtkWidget* function(const(char)* label) c_gtk_tool_item_group_new;
	int function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_collapsed;
	GtkToolItem* function(GtkToolItemGroup* group, int x, int y) c_gtk_tool_item_group_get_drop_item;
	PangoEllipsizeMode function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_ellipsize;
	GtkReliefStyle function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_header_relief;
	int function(GtkToolItemGroup* group, GtkToolItem* item) c_gtk_tool_item_group_get_item_position;
	const(char)* function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_label;
	GtkWidget* function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_label_widget;
	uint function(GtkToolItemGroup* group) c_gtk_tool_item_group_get_n_items;
	GtkToolItem* function(GtkToolItemGroup* group, uint index) c_gtk_tool_item_group_get_nth_item;
	void function(GtkToolItemGroup* group, GtkToolItem* item, int position) c_gtk_tool_item_group_insert;
	void function(GtkToolItemGroup* group, int collapsed) c_gtk_tool_item_group_set_collapsed;
	void function(GtkToolItemGroup* group, PangoEllipsizeMode ellipsize) c_gtk_tool_item_group_set_ellipsize;
	void function(GtkToolItemGroup* group, GtkReliefStyle style) c_gtk_tool_item_group_set_header_relief;
	void function(GtkToolItemGroup* group, GtkToolItem* item, int position) c_gtk_tool_item_group_set_item_position;
	void function(GtkToolItemGroup* group, const(char)* label) c_gtk_tool_item_group_set_label;
	void function(GtkToolItemGroup* group, GtkWidget* labelWidget) c_gtk_tool_item_group_set_label_widget;

	// gtk.ToolPalette

	GType function() c_gtk_tool_palette_get_type;
	GtkWidget* function() c_gtk_tool_palette_new;
	GtkTargetEntry* function() c_gtk_tool_palette_get_drag_target_group;
	GtkTargetEntry* function() c_gtk_tool_palette_get_drag_target_item;
	void function(GtkToolPalette* palette, GtkWidget* widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions) c_gtk_tool_palette_add_drag_dest;
	GtkWidget* function(GtkToolPalette* palette, GtkSelectionData* selection) c_gtk_tool_palette_get_drag_item;
	GtkToolItemGroup* function(GtkToolPalette* palette, int x, int y) c_gtk_tool_palette_get_drop_group;
	GtkToolItem* function(GtkToolPalette* palette, int x, int y) c_gtk_tool_palette_get_drop_item;
	int function(GtkToolPalette* palette, GtkToolItemGroup* group) c_gtk_tool_palette_get_exclusive;
	int function(GtkToolPalette* palette, GtkToolItemGroup* group) c_gtk_tool_palette_get_expand;
	int function(GtkToolPalette* palette, GtkToolItemGroup* group) c_gtk_tool_palette_get_group_position;
	GtkAdjustment* function(GtkToolPalette* palette) c_gtk_tool_palette_get_hadjustment;
	GtkIconSize function(GtkToolPalette* palette) c_gtk_tool_palette_get_icon_size;
	GtkToolbarStyle function(GtkToolPalette* palette) c_gtk_tool_palette_get_style;
	GtkAdjustment* function(GtkToolPalette* palette) c_gtk_tool_palette_get_vadjustment;
	void function(GtkToolPalette* palette, GtkToolPaletteDragTargets targets) c_gtk_tool_palette_set_drag_source;
	void function(GtkToolPalette* palette, GtkToolItemGroup* group, int exclusive) c_gtk_tool_palette_set_exclusive;
	void function(GtkToolPalette* palette, GtkToolItemGroup* group, int expand) c_gtk_tool_palette_set_expand;
	void function(GtkToolPalette* palette, GtkToolItemGroup* group, int position) c_gtk_tool_palette_set_group_position;
	void function(GtkToolPalette* palette, GtkIconSize iconSize) c_gtk_tool_palette_set_icon_size;
	void function(GtkToolPalette* palette, GtkToolbarStyle style) c_gtk_tool_palette_set_style;
	void function(GtkToolPalette* palette) c_gtk_tool_palette_unset_icon_size;
	void function(GtkToolPalette* palette) c_gtk_tool_palette_unset_style;

	// gtk.ToolShell

	GType function() c_gtk_tool_shell_get_type;
	PangoEllipsizeMode function(GtkToolShell* shell) c_gtk_tool_shell_get_ellipsize_mode;
	GtkIconSize function(GtkToolShell* shell) c_gtk_tool_shell_get_icon_size;
	GtkOrientation function(GtkToolShell* shell) c_gtk_tool_shell_get_orientation;
	GtkReliefStyle function(GtkToolShell* shell) c_gtk_tool_shell_get_relief_style;
	GtkToolbarStyle function(GtkToolShell* shell) c_gtk_tool_shell_get_style;
	float function(GtkToolShell* shell) c_gtk_tool_shell_get_text_alignment;
	GtkOrientation function(GtkToolShell* shell) c_gtk_tool_shell_get_text_orientation;
	GtkSizeGroup* function(GtkToolShell* shell) c_gtk_tool_shell_get_text_size_group;
	void function(GtkToolShell* shell) c_gtk_tool_shell_rebuild_menu;

	// gtk.Toolbar

	GType function() c_gtk_toolbar_get_type;
	GtkWidget* function() c_gtk_toolbar_new;
	int function(GtkToolbar* toolbar, int x, int y) c_gtk_toolbar_get_drop_index;
	GtkIconSize function(GtkToolbar* toolbar) c_gtk_toolbar_get_icon_size;
	int function(GtkToolbar* toolbar, GtkToolItem* item) c_gtk_toolbar_get_item_index;
	int function(GtkToolbar* toolbar) c_gtk_toolbar_get_n_items;
	GtkToolItem* function(GtkToolbar* toolbar, int n) c_gtk_toolbar_get_nth_item;
	GtkReliefStyle function(GtkToolbar* toolbar) c_gtk_toolbar_get_relief_style;
	int function(GtkToolbar* toolbar) c_gtk_toolbar_get_show_arrow;
	GtkToolbarStyle function(GtkToolbar* toolbar) c_gtk_toolbar_get_style;
	void function(GtkToolbar* toolbar, GtkToolItem* item, int pos) c_gtk_toolbar_insert;
	void function(GtkToolbar* toolbar, GtkToolItem* toolItem, int index) c_gtk_toolbar_set_drop_highlight_item;
	void function(GtkToolbar* toolbar, GtkIconSize iconSize) c_gtk_toolbar_set_icon_size;
	void function(GtkToolbar* toolbar, int showArrow) c_gtk_toolbar_set_show_arrow;
	void function(GtkToolbar* toolbar, GtkToolbarStyle style) c_gtk_toolbar_set_style;
	void function(GtkToolbar* toolbar) c_gtk_toolbar_unset_icon_size;
	void function(GtkToolbar* toolbar) c_gtk_toolbar_unset_style;

	// gtk.Tooltip

	GType function() c_gtk_tooltip_get_type;
	void function(GdkDisplay* display) c_gtk_tooltip_trigger_tooltip_query;
	void function(GtkTooltip* tooltip, GtkWidget* customWidget) c_gtk_tooltip_set_custom;
	void function(GtkTooltip* tooltip, GdkPixbuf* pixbuf) c_gtk_tooltip_set_icon;
	void function(GtkTooltip* tooltip, GIcon* gicon, GtkIconSize size) c_gtk_tooltip_set_icon_from_gicon;
	void function(GtkTooltip* tooltip, const(char)* iconName, GtkIconSize size) c_gtk_tooltip_set_icon_from_icon_name;
	void function(GtkTooltip* tooltip, const(char)* stockId, GtkIconSize size) c_gtk_tooltip_set_icon_from_stock;
	void function(GtkTooltip* tooltip, const(char)* markup) c_gtk_tooltip_set_markup;
	void function(GtkTooltip* tooltip, const(char)* text) c_gtk_tooltip_set_text;
	void function(GtkTooltip* tooltip, GdkRectangle* rect) c_gtk_tooltip_set_tip_area;

	// gtk.ToplevelAccessible

	GType function() c_gtk_toplevel_accessible_get_type;
	GList* function(GtkToplevelAccessible* accessible) c_gtk_toplevel_accessible_get_children;

	// gtk.TreeDragDest

	GType function() c_gtk_tree_drag_dest_get_type;
	int function(GtkTreeDragDest* dragDest, GtkTreePath* dest, GtkSelectionData* selectionData) c_gtk_tree_drag_dest_drag_data_received;
	int function(GtkTreeDragDest* dragDest, GtkTreePath* destPath, GtkSelectionData* selectionData) c_gtk_tree_drag_dest_row_drop_possible;

	// gtk.TreeDragSource

	GType function() c_gtk_tree_drag_source_get_type;
	int function(GtkTreeDragSource* dragSource, GtkTreePath* path) c_gtk_tree_drag_source_drag_data_delete;
	int function(GtkTreeDragSource* dragSource, GtkTreePath* path, GtkSelectionData* selectionData) c_gtk_tree_drag_source_drag_data_get;
	int function(GtkTreeDragSource* dragSource, GtkTreePath* path) c_gtk_tree_drag_source_row_draggable;
	int function(GtkSelectionData* selectionData, GtkTreeModel** treeModel, GtkTreePath** path) c_gtk_tree_get_row_drag_data;
	int function(GtkSelectionData* selectionData, GtkTreeModel* treeModel, GtkTreePath* path) c_gtk_tree_set_row_drag_data;

	// gtk.TreeIter

	GType function() c_gtk_tree_iter_get_type;
	GtkTreeIter* function(GtkTreeIter* iter) c_gtk_tree_iter_copy;
	void function(GtkTreeIter* iter) c_gtk_tree_iter_free;

	// gtk.TreeModel

	GType function() c_gtk_tree_model_get_type;
	GtkTreeModel* function(GtkTreeModel* childModel, GtkTreePath* root) c_gtk_tree_model_filter_new;
	void function(GtkTreeModel* model, GtkTreeModelForeachFunc func, void* userData) c_gtk_tree_model_foreach;
	void function(GtkTreeModel* treeModel, GtkTreeIter* iter, ... ) c_gtk_tree_model_get;
	GType function(GtkTreeModel* treeModel, int index) c_gtk_tree_model_get_column_type;
	GtkTreeModelFlags function(GtkTreeModel* treeModel) c_gtk_tree_model_get_flags;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreePath* path) c_gtk_tree_model_get_iter;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_get_iter_first;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter, const(char)* pathString) c_gtk_tree_model_get_iter_from_string;
	int function(GtkTreeModel* treeModel) c_gtk_tree_model_get_n_columns;
	GtkTreePath* function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_get_path;
	char* function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_get_string_from_iter;
	void function(GtkTreeModel* treeModel, GtkTreeIter* iter, void* varArgs) c_gtk_tree_model_get_valist;
	void function(GtkTreeModel* treeModel, GtkTreeIter* iter, int column, GValue* value) c_gtk_tree_model_get_value;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreeIter* parent) c_gtk_tree_model_iter_children;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_has_child;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_n_children;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_next;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreeIter* parent, int n) c_gtk_tree_model_iter_nth_child;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter, GtkTreeIter* child) c_gtk_tree_model_iter_parent;
	int function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_iter_previous;
	void function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_ref_node;
	void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter) c_gtk_tree_model_row_changed;
	void function(GtkTreeModel* treeModel, GtkTreePath* path) c_gtk_tree_model_row_deleted;
	void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter) c_gtk_tree_model_row_has_child_toggled;
	void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter) c_gtk_tree_model_row_inserted;
	void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter, int* newOrder) c_gtk_tree_model_rows_reordered;
	void function(GtkTreeModel* treeModel, GtkTreePath* path, GtkTreeIter* iter, int* newOrder, int length) c_gtk_tree_model_rows_reordered_with_length;
	GtkTreeModel* function(GtkTreeModel* childModel) c_gtk_tree_model_sort_new_with_model;
	void function(GtkTreeModel* treeModel, GtkTreeIter* iter) c_gtk_tree_model_unref_node;

	// gtk.TreeModelFilter

	GType function() c_gtk_tree_model_filter_get_type;
	void function(GtkTreeModelFilter* filter) c_gtk_tree_model_filter_clear_cache;
	int function(GtkTreeModelFilter* filter, GtkTreeIter* filterIter, GtkTreeIter* childIter) c_gtk_tree_model_filter_convert_child_iter_to_iter;
	GtkTreePath* function(GtkTreeModelFilter* filter, GtkTreePath* childPath) c_gtk_tree_model_filter_convert_child_path_to_path;
	void function(GtkTreeModelFilter* filter, GtkTreeIter* childIter, GtkTreeIter* filterIter) c_gtk_tree_model_filter_convert_iter_to_child_iter;
	GtkTreePath* function(GtkTreeModelFilter* filter, GtkTreePath* filterPath) c_gtk_tree_model_filter_convert_path_to_child_path;
	GtkTreeModel* function(GtkTreeModelFilter* filter) c_gtk_tree_model_filter_get_model;
	void function(GtkTreeModelFilter* filter) c_gtk_tree_model_filter_refilter;
	void function(GtkTreeModelFilter* filter, int nColumns, GType* types, GtkTreeModelFilterModifyFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_model_filter_set_modify_func;
	void function(GtkTreeModelFilter* filter, int column) c_gtk_tree_model_filter_set_visible_column;
	void function(GtkTreeModelFilter* filter, GtkTreeModelFilterVisibleFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_model_filter_set_visible_func;

	// gtk.TreeModelSort

	GType function() c_gtk_tree_model_sort_get_type;
	void function(GtkTreeModelSort* treeModelSort) c_gtk_tree_model_sort_clear_cache;
	int function(GtkTreeModelSort* treeModelSort, GtkTreeIter* sortIter, GtkTreeIter* childIter) c_gtk_tree_model_sort_convert_child_iter_to_iter;
	GtkTreePath* function(GtkTreeModelSort* treeModelSort, GtkTreePath* childPath) c_gtk_tree_model_sort_convert_child_path_to_path;
	void function(GtkTreeModelSort* treeModelSort, GtkTreeIter* childIter, GtkTreeIter* sortedIter) c_gtk_tree_model_sort_convert_iter_to_child_iter;
	GtkTreePath* function(GtkTreeModelSort* treeModelSort, GtkTreePath* sortedPath) c_gtk_tree_model_sort_convert_path_to_child_path;
	GtkTreeModel* function(GtkTreeModelSort* treeModel) c_gtk_tree_model_sort_get_model;
	int function(GtkTreeModelSort* treeModelSort, GtkTreeIter* iter) c_gtk_tree_model_sort_iter_is_valid;
	void function(GtkTreeModelSort* treeModelSort) c_gtk_tree_model_sort_reset_default_sort_func;

	// gtk.TreePath

	GType function() c_gtk_tree_path_get_type;
	GtkTreePath* function() c_gtk_tree_path_new;
	GtkTreePath* function() c_gtk_tree_path_new_first;
	GtkTreePath* function(int firstIndex, ... ) c_gtk_tree_path_new_from_indices;
	GtkTreePath* function(int* indices, size_t length) c_gtk_tree_path_new_from_indicesv;
	GtkTreePath* function(const(char)* path) c_gtk_tree_path_new_from_string;
	void function(GtkTreePath* path, int index) c_gtk_tree_path_append_index;
	int function(GtkTreePath* a, GtkTreePath* b) c_gtk_tree_path_compare;
	GtkTreePath* function(GtkTreePath* path) c_gtk_tree_path_copy;
	void function(GtkTreePath* path) c_gtk_tree_path_down;
	void function(GtkTreePath* path) c_gtk_tree_path_free;
	int function(GtkTreePath* path) c_gtk_tree_path_get_depth;
	int* function(GtkTreePath* path) c_gtk_tree_path_get_indices;
	int* function(GtkTreePath* path, int* depth) c_gtk_tree_path_get_indices_with_depth;
	int function(GtkTreePath* path, GtkTreePath* descendant) c_gtk_tree_path_is_ancestor;
	int function(GtkTreePath* path, GtkTreePath* ancestor) c_gtk_tree_path_is_descendant;
	void function(GtkTreePath* path) c_gtk_tree_path_next;
	void function(GtkTreePath* path, int index) c_gtk_tree_path_prepend_index;
	int function(GtkTreePath* path) c_gtk_tree_path_prev;
	char* function(GtkTreePath* path) c_gtk_tree_path_to_string;
	int function(GtkTreePath* path) c_gtk_tree_path_up;

	// gtk.TreeRowReference

	GType function() c_gtk_tree_row_reference_get_type;
	GtkTreeRowReference* function(GtkTreeModel* model, GtkTreePath* path) c_gtk_tree_row_reference_new;
	GtkTreeRowReference* function(GObject* proxy, GtkTreeModel* model, GtkTreePath* path) c_gtk_tree_row_reference_new_proxy;
	GtkTreeRowReference* function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_copy;
	void function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_free;
	GtkTreeModel* function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_get_model;
	GtkTreePath* function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_get_path;
	int function(GtkTreeRowReference* reference) c_gtk_tree_row_reference_valid;
	void function(GObject* proxy, GtkTreePath* path) c_gtk_tree_row_reference_deleted;
	void function(GObject* proxy, GtkTreePath* path) c_gtk_tree_row_reference_inserted;
	void function(GObject* proxy, GtkTreePath* path, GtkTreeIter* iter, int* newOrder) c_gtk_tree_row_reference_reordered;

	// gtk.TreeSelection

	GType function() c_gtk_tree_selection_get_type;
	int function(GtkTreeSelection* selection) c_gtk_tree_selection_count_selected_rows;
	GtkSelectionMode function(GtkTreeSelection* selection) c_gtk_tree_selection_get_mode;
	GtkTreeSelectionFunc function(GtkTreeSelection* selection) c_gtk_tree_selection_get_select_function;
	int function(GtkTreeSelection* selection, GtkTreeModel** model, GtkTreeIter* iter) c_gtk_tree_selection_get_selected;
	GList* function(GtkTreeSelection* selection, GtkTreeModel** model) c_gtk_tree_selection_get_selected_rows;
	GtkTreeView* function(GtkTreeSelection* selection) c_gtk_tree_selection_get_tree_view;
	void* function(GtkTreeSelection* selection) c_gtk_tree_selection_get_user_data;
	int function(GtkTreeSelection* selection, GtkTreeIter* iter) c_gtk_tree_selection_iter_is_selected;
	int function(GtkTreeSelection* selection, GtkTreePath* path) c_gtk_tree_selection_path_is_selected;
	void function(GtkTreeSelection* selection) c_gtk_tree_selection_select_all;
	void function(GtkTreeSelection* selection, GtkTreeIter* iter) c_gtk_tree_selection_select_iter;
	void function(GtkTreeSelection* selection, GtkTreePath* path) c_gtk_tree_selection_select_path;
	void function(GtkTreeSelection* selection, GtkTreePath* startPath, GtkTreePath* endPath) c_gtk_tree_selection_select_range;
	void function(GtkTreeSelection* selection, GtkTreeSelectionForeachFunc func, void* data) c_gtk_tree_selection_selected_foreach;
	void function(GtkTreeSelection* selection, GtkSelectionMode type) c_gtk_tree_selection_set_mode;
	void function(GtkTreeSelection* selection, GtkTreeSelectionFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_selection_set_select_function;
	void function(GtkTreeSelection* selection) c_gtk_tree_selection_unselect_all;
	void function(GtkTreeSelection* selection, GtkTreeIter* iter) c_gtk_tree_selection_unselect_iter;
	void function(GtkTreeSelection* selection, GtkTreePath* path) c_gtk_tree_selection_unselect_path;
	void function(GtkTreeSelection* selection, GtkTreePath* startPath, GtkTreePath* endPath) c_gtk_tree_selection_unselect_range;

	// gtk.TreeSortable

	GType function() c_gtk_tree_sortable_get_type;
	int function(GtkTreeSortable* sortable, int* sortColumnId, GtkSortType* order) c_gtk_tree_sortable_get_sort_column_id;
	int function(GtkTreeSortable* sortable) c_gtk_tree_sortable_has_default_sort_func;
	void function(GtkTreeSortable* sortable, GtkTreeIterCompareFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_tree_sortable_set_default_sort_func;
	void function(GtkTreeSortable* sortable, int sortColumnId, GtkSortType order) c_gtk_tree_sortable_set_sort_column_id;
	void function(GtkTreeSortable* sortable, int sortColumnId, GtkTreeIterCompareFunc sortFunc, void* userData, GDestroyNotify destroy) c_gtk_tree_sortable_set_sort_func;
	void function(GtkTreeSortable* sortable) c_gtk_tree_sortable_sort_column_changed;

	// gtk.TreeStore

	GType function() c_gtk_tree_store_get_type;
	GtkTreeStore* function(int nColumns, ... ) c_gtk_tree_store_new;
	GtkTreeStore* function(int nColumns, GType* types) c_gtk_tree_store_newv;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent) c_gtk_tree_store_append;
	void function(GtkTreeStore* treeStore) c_gtk_tree_store_clear;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, int position) c_gtk_tree_store_insert;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) c_gtk_tree_store_insert_after;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) c_gtk_tree_store_insert_before;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, int position, ... ) c_gtk_tree_store_insert_with_values;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent, int position, int* columns, GValue* values, int nValues) c_gtk_tree_store_insert_with_valuesv;
	int function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* descendant) c_gtk_tree_store_is_ancestor;
	int function(GtkTreeStore* treeStore, GtkTreeIter* iter) c_gtk_tree_store_iter_depth;
	int function(GtkTreeStore* treeStore, GtkTreeIter* iter) c_gtk_tree_store_iter_is_valid;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_tree_store_move_after;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* position) c_gtk_tree_store_move_before;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, GtkTreeIter* parent) c_gtk_tree_store_prepend;
	int function(GtkTreeStore* treeStore, GtkTreeIter* iter) c_gtk_tree_store_remove;
	void function(GtkTreeStore* treeStore, GtkTreeIter* parent, int* newOrder) c_gtk_tree_store_reorder;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, ... ) c_gtk_tree_store_set;
	void function(GtkTreeStore* treeStore, int nColumns, GType* types) c_gtk_tree_store_set_column_types;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, void* varArgs) c_gtk_tree_store_set_valist;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, int column, GValue* value) c_gtk_tree_store_set_value;
	void function(GtkTreeStore* treeStore, GtkTreeIter* iter, int* columns, GValue* values, int nValues) c_gtk_tree_store_set_valuesv;
	void function(GtkTreeStore* treeStore, GtkTreeIter* a, GtkTreeIter* b) c_gtk_tree_store_swap;

	// gtk.TreeView

	GType function() c_gtk_tree_view_get_type;
	GtkWidget* function() c_gtk_tree_view_new;
	GtkWidget* function(GtkTreeModel* model) c_gtk_tree_view_new_with_model;
	int function(GtkTreeView* treeView, GtkTreeViewColumn* column) c_gtk_tree_view_append_column;
	void function(GtkTreeView* treeView) c_gtk_tree_view_collapse_all;
	int function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_collapse_row;
	void function(GtkTreeView* treeView) c_gtk_tree_view_columns_autosize;
	void function(GtkTreeView* treeView, int bx, int by, int* tx, int* ty) c_gtk_tree_view_convert_bin_window_to_tree_coords;
	void function(GtkTreeView* treeView, int bx, int by, int* wx, int* wy) c_gtk_tree_view_convert_bin_window_to_widget_coords;
	void function(GtkTreeView* treeView, int tx, int ty, int* bx, int* by) c_gtk_tree_view_convert_tree_to_bin_window_coords;
	void function(GtkTreeView* treeView, int tx, int ty, int* wx, int* wy) c_gtk_tree_view_convert_tree_to_widget_coords;
	void function(GtkTreeView* treeView, int wx, int wy, int* bx, int* by) c_gtk_tree_view_convert_widget_to_bin_window_coords;
	void function(GtkTreeView* treeView, int wx, int wy, int* tx, int* ty) c_gtk_tree_view_convert_widget_to_tree_coords;
	cairo_surface_t* function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_create_row_drag_icon;
	void function(GtkTreeView* treeView, GtkTargetEntry* targets, int nTargets, GdkDragAction actions) c_gtk_tree_view_enable_model_drag_dest;
	void function(GtkTreeView* treeView, GdkModifierType startButtonMask, GtkTargetEntry* targets, int nTargets, GdkDragAction actions) c_gtk_tree_view_enable_model_drag_source;
	void function(GtkTreeView* treeView) c_gtk_tree_view_expand_all;
	int function(GtkTreeView* treeView, GtkTreePath* path, int openAll) c_gtk_tree_view_expand_row;
	void function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_expand_to_path;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_activate_on_single_click;
	void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) c_gtk_tree_view_get_background_area;
	GdkWindow* function(GtkTreeView* treeView) c_gtk_tree_view_get_bin_window;
	void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) c_gtk_tree_view_get_cell_area;
	GtkTreeViewColumn* function(GtkTreeView* treeView, int n) c_gtk_tree_view_get_column;
	GList* function(GtkTreeView* treeView) c_gtk_tree_view_get_columns;
	void function(GtkTreeView* treeView, GtkTreePath** path, GtkTreeViewColumn** focusColumn) c_gtk_tree_view_get_cursor;
	int function(GtkTreeView* treeView, int dragX, int dragY, GtkTreePath** path, GtkTreeViewDropPosition* pos) c_gtk_tree_view_get_dest_row_at_pos;
	void function(GtkTreeView* treeView, GtkTreePath** path, GtkTreeViewDropPosition* pos) c_gtk_tree_view_get_drag_dest_row;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_enable_search;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_enable_tree_lines;
	GtkTreeViewColumn* function(GtkTreeView* treeView) c_gtk_tree_view_get_expander_column;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_fixed_height_mode;
	GtkTreeViewGridLines function(GtkTreeView* treeView) c_gtk_tree_view_get_grid_lines;
	GtkAdjustment* function(GtkTreeView* treeView) c_gtk_tree_view_get_hadjustment;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_headers_clickable;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_headers_visible;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_hover_expand;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_hover_selection;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_level_indentation;
	GtkTreeModel* function(GtkTreeView* treeView) c_gtk_tree_view_get_model;
	uint function(GtkTreeView* treeView) c_gtk_tree_view_get_n_columns;
	int function(GtkTreeView* treeView, int x, int y, GtkTreePath** path, GtkTreeViewColumn** column, int* cellX, int* cellY) c_gtk_tree_view_get_path_at_pos;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_reorderable;
	GtkTreeViewRowSeparatorFunc function(GtkTreeView* treeView) c_gtk_tree_view_get_row_separator_func;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_rubber_banding;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_rules_hint;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_search_column;
	GtkEntry* function(GtkTreeView* treeView) c_gtk_tree_view_get_search_entry;
	GtkTreeViewSearchEqualFunc function(GtkTreeView* treeView) c_gtk_tree_view_get_search_equal_func;
	GtkTreeViewSearchPositionFunc function(GtkTreeView* treeView) c_gtk_tree_view_get_search_position_func;
	GtkTreeSelection* function(GtkTreeView* treeView) c_gtk_tree_view_get_selection;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_show_expanders;
	int function(GtkTreeView* treeView) c_gtk_tree_view_get_tooltip_column;
	int function(GtkTreeView* treeView, int* x, int* y, int keyboardTip, GtkTreeModel** model, GtkTreePath** path, GtkTreeIter* iter) c_gtk_tree_view_get_tooltip_context;
	GtkAdjustment* function(GtkTreeView* treeView) c_gtk_tree_view_get_vadjustment;
	int function(GtkTreeView* treeView, GtkTreePath** startPath, GtkTreePath** endPath) c_gtk_tree_view_get_visible_range;
	void function(GtkTreeView* treeView, GdkRectangle* visibleRect) c_gtk_tree_view_get_visible_rect;
	int function(GtkTreeView* treeView, GtkTreeViewColumn* column, int position) c_gtk_tree_view_insert_column;
	int function(GtkTreeView* treeView, int position, const(char)* title, GtkCellRenderer* cell, ... ) c_gtk_tree_view_insert_column_with_attributes;
	int function(GtkTreeView* treeView, int position, const(char)* title, GtkCellRenderer* cell, GtkTreeCellDataFunc func, void* data, GDestroyNotify dnotify) c_gtk_tree_view_insert_column_with_data_func;
	int function(GtkTreeView* treeView, int x, int y, GtkTreePath** path, GtkTreeViewColumn** column, int* cellX, int* cellY) c_gtk_tree_view_is_blank_at_pos;
	int function(GtkTreeView* treeView) c_gtk_tree_view_is_rubber_banding_active;
	void function(GtkTreeView* treeView, GtkTreeViewMappingFunc func, void* data) c_gtk_tree_view_map_expanded_rows;
	void function(GtkTreeView* treeView, GtkTreeViewColumn* column, GtkTreeViewColumn* baseColumn) c_gtk_tree_view_move_column_after;
	int function(GtkTreeView* treeView, GtkTreeViewColumn* column) c_gtk_tree_view_remove_column;
	void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column) c_gtk_tree_view_row_activated;
	int function(GtkTreeView* treeView, GtkTreePath* path) c_gtk_tree_view_row_expanded;
	void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* column, int useAlign, float rowAlign, float colAlign) c_gtk_tree_view_scroll_to_cell;
	void function(GtkTreeView* treeView, int treeX, int treeY) c_gtk_tree_view_scroll_to_point;
	void function(GtkTreeView* treeView, int single) c_gtk_tree_view_set_activate_on_single_click;
	void function(GtkTreeView* treeView, GtkTreeViewColumnDropFunc func, void* userData, GDestroyNotify destroy) c_gtk_tree_view_set_column_drag_function;
	void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* focusColumn, int startEditing) c_gtk_tree_view_set_cursor;
	void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewColumn* focusColumn, GtkCellRenderer* focusCell, int startEditing) c_gtk_tree_view_set_cursor_on_cell;
	void function(GtkTreeView* treeView, GtkTreeDestroyCountFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_view_set_destroy_count_func;
	void function(GtkTreeView* treeView, GtkTreePath* path, GtkTreeViewDropPosition pos) c_gtk_tree_view_set_drag_dest_row;
	void function(GtkTreeView* treeView, int enableSearch) c_gtk_tree_view_set_enable_search;
	void function(GtkTreeView* treeView, int enabled) c_gtk_tree_view_set_enable_tree_lines;
	void function(GtkTreeView* treeView, GtkTreeViewColumn* column) c_gtk_tree_view_set_expander_column;
	void function(GtkTreeView* treeView, int enable) c_gtk_tree_view_set_fixed_height_mode;
	void function(GtkTreeView* treeView, GtkTreeViewGridLines gridLines) c_gtk_tree_view_set_grid_lines;
	void function(GtkTreeView* treeView, GtkAdjustment* adjustment) c_gtk_tree_view_set_hadjustment;
	void function(GtkTreeView* treeView, int setting) c_gtk_tree_view_set_headers_clickable;
	void function(GtkTreeView* treeView, int headersVisible) c_gtk_tree_view_set_headers_visible;
	void function(GtkTreeView* treeView, int expand) c_gtk_tree_view_set_hover_expand;
	void function(GtkTreeView* treeView, int hover) c_gtk_tree_view_set_hover_selection;
	void function(GtkTreeView* treeView, int indentation) c_gtk_tree_view_set_level_indentation;
	void function(GtkTreeView* treeView, GtkTreeModel* model) c_gtk_tree_view_set_model;
	void function(GtkTreeView* treeView, int reorderable) c_gtk_tree_view_set_reorderable;
	void function(GtkTreeView* treeView, GtkTreeViewRowSeparatorFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_view_set_row_separator_func;
	void function(GtkTreeView* treeView, int enable) c_gtk_tree_view_set_rubber_banding;
	void function(GtkTreeView* treeView, int setting) c_gtk_tree_view_set_rules_hint;
	void function(GtkTreeView* treeView, int column) c_gtk_tree_view_set_search_column;
	void function(GtkTreeView* treeView, GtkEntry* entry) c_gtk_tree_view_set_search_entry;
	void function(GtkTreeView* treeView, GtkTreeViewSearchEqualFunc searchEqualFunc, void* searchUserData, GDestroyNotify searchDestroy) c_gtk_tree_view_set_search_equal_func;
	void function(GtkTreeView* treeView, GtkTreeViewSearchPositionFunc func, void* data, GDestroyNotify destroy) c_gtk_tree_view_set_search_position_func;
	void function(GtkTreeView* treeView, int enabled) c_gtk_tree_view_set_show_expanders;
	void function(GtkTreeView* treeView, GtkTooltip* tooltip, GtkTreePath* path, GtkTreeViewColumn* column, GtkCellRenderer* cell) c_gtk_tree_view_set_tooltip_cell;
	void function(GtkTreeView* treeView, int column) c_gtk_tree_view_set_tooltip_column;
	void function(GtkTreeView* treeView, GtkTooltip* tooltip, GtkTreePath* path) c_gtk_tree_view_set_tooltip_row;
	void function(GtkTreeView* treeView, GtkAdjustment* adjustment) c_gtk_tree_view_set_vadjustment;
	void function(GtkTreeView* treeView) c_gtk_tree_view_unset_rows_drag_dest;
	void function(GtkTreeView* treeView) c_gtk_tree_view_unset_rows_drag_source;

	// gtk.TreeViewAccessible

	GType function() c_gtk_tree_view_accessible_get_type;

	// gtk.TreeViewColumn

	GType function() c_gtk_tree_view_column_get_type;
	GtkTreeViewColumn* function() c_gtk_tree_view_column_new;
	GtkTreeViewColumn* function(GtkCellArea* area) c_gtk_tree_view_column_new_with_area;
	GtkTreeViewColumn* function(const(char)* title, GtkCellRenderer* cell, ... ) c_gtk_tree_view_column_new_with_attributes;
	void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer, const(char)* attribute, int column) c_gtk_tree_view_column_add_attribute;
	int function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer, int* xOffset, int* width) c_gtk_tree_view_column_cell_get_position;
	void function(GtkTreeViewColumn* treeColumn, GdkRectangle* cellArea, int* xOffset, int* yOffset, int* width, int* height) c_gtk_tree_view_column_cell_get_size;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_cell_is_visible;
	void function(GtkTreeViewColumn* treeColumn, GtkTreeModel* treeModel, GtkTreeIter* iter, int isExpander, int isExpanded) c_gtk_tree_view_column_cell_set_cell_data;
	void function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_clear;
	void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer) c_gtk_tree_view_column_clear_attributes;
	void function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_clicked;
	void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cell) c_gtk_tree_view_column_focus_cell;
	float function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_alignment;
	GtkWidget* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_button;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_clickable;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_expand;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_fixed_width;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_max_width;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_min_width;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_reorderable;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_resizable;
	GtkTreeViewColumnSizing function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sizing;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sort_column_id;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sort_indicator;
	GtkSortType function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_sort_order;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_spacing;
	const(char)* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_title;
	GtkWidget* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_tree_view;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_visible;
	GtkWidget* function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_widget;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_width;
	int function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_get_x_offset;
	void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cell, int expand) c_gtk_tree_view_column_pack_end;
	void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cell, int expand) c_gtk_tree_view_column_pack_start;
	void function(GtkTreeViewColumn* treeColumn) c_gtk_tree_view_column_queue_resize;
	void function(GtkTreeViewColumn* treeColumn, float xalign) c_gtk_tree_view_column_set_alignment;
	void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer, ... ) c_gtk_tree_view_column_set_attributes;
	void function(GtkTreeViewColumn* treeColumn, GtkCellRenderer* cellRenderer, GtkTreeCellDataFunc func, void* funcData, GDestroyNotify destroy) c_gtk_tree_view_column_set_cell_data_func;
	void function(GtkTreeViewColumn* treeColumn, int clickable) c_gtk_tree_view_column_set_clickable;
	void function(GtkTreeViewColumn* treeColumn, int expand) c_gtk_tree_view_column_set_expand;
	void function(GtkTreeViewColumn* treeColumn, int fixedWidth) c_gtk_tree_view_column_set_fixed_width;
	void function(GtkTreeViewColumn* treeColumn, int maxWidth) c_gtk_tree_view_column_set_max_width;
	void function(GtkTreeViewColumn* treeColumn, int minWidth) c_gtk_tree_view_column_set_min_width;
	void function(GtkTreeViewColumn* treeColumn, int reorderable) c_gtk_tree_view_column_set_reorderable;
	void function(GtkTreeViewColumn* treeColumn, int resizable) c_gtk_tree_view_column_set_resizable;
	void function(GtkTreeViewColumn* treeColumn, GtkTreeViewColumnSizing type) c_gtk_tree_view_column_set_sizing;
	void function(GtkTreeViewColumn* treeColumn, int sortColumnId) c_gtk_tree_view_column_set_sort_column_id;
	void function(GtkTreeViewColumn* treeColumn, int setting) c_gtk_tree_view_column_set_sort_indicator;
	void function(GtkTreeViewColumn* treeColumn, GtkSortType order) c_gtk_tree_view_column_set_sort_order;
	void function(GtkTreeViewColumn* treeColumn, int spacing) c_gtk_tree_view_column_set_spacing;
	void function(GtkTreeViewColumn* treeColumn, const(char)* title) c_gtk_tree_view_column_set_title;
	void function(GtkTreeViewColumn* treeColumn, int visible) c_gtk_tree_view_column_set_visible;
	void function(GtkTreeViewColumn* treeColumn, GtkWidget* widget) c_gtk_tree_view_column_set_widget;

	// gtk.UIManager

	GType function() c_gtk_ui_manager_get_type;
	GtkUIManager* function() c_gtk_ui_manager_new;
	void function(GtkUIManager* manager, uint mergeId, const(char)* path, const(char)* name, const(char)* action, GtkUIManagerItemType type, int top) c_gtk_ui_manager_add_ui;
	uint function(GtkUIManager* manager, char* filename, GError** err) c_gtk_ui_manager_add_ui_from_file;
	uint function(GtkUIManager* manager, const(char)* resourcePath, GError** err) c_gtk_ui_manager_add_ui_from_resource;
	uint function(GtkUIManager* manager, const(char)* buffer, ptrdiff_t length, GError** err) c_gtk_ui_manager_add_ui_from_string;
	void function(GtkUIManager* manager) c_gtk_ui_manager_ensure_update;
	GtkAccelGroup* function(GtkUIManager* manager) c_gtk_ui_manager_get_accel_group;
	GtkAction* function(GtkUIManager* manager, const(char)* path) c_gtk_ui_manager_get_action;
	GList* function(GtkUIManager* manager) c_gtk_ui_manager_get_action_groups;
	int function(GtkUIManager* manager) c_gtk_ui_manager_get_add_tearoffs;
	GSList* function(GtkUIManager* manager, GtkUIManagerItemType types) c_gtk_ui_manager_get_toplevels;
	char* function(GtkUIManager* manager) c_gtk_ui_manager_get_ui;
	GtkWidget* function(GtkUIManager* manager, const(char)* path) c_gtk_ui_manager_get_widget;
	void function(GtkUIManager* manager, GtkActionGroup* actionGroup, int pos) c_gtk_ui_manager_insert_action_group;
	uint function(GtkUIManager* manager) c_gtk_ui_manager_new_merge_id;
	void function(GtkUIManager* manager, GtkActionGroup* actionGroup) c_gtk_ui_manager_remove_action_group;
	void function(GtkUIManager* manager, uint mergeId) c_gtk_ui_manager_remove_ui;
	void function(GtkUIManager* manager, int addTearoffs) c_gtk_ui_manager_set_add_tearoffs;

	// gtk.VBox

	GType function() c_gtk_vbox_get_type;
	GtkWidget* function(int homogeneous, int spacing) c_gtk_vbox_new;

	// gtk.VButtonBox

	GType function() c_gtk_vbutton_box_get_type;
	GtkWidget* function() c_gtk_vbutton_box_new;

	// gtk.VPaned

	GType function() c_gtk_vpaned_get_type;
	GtkWidget* function() c_gtk_vpaned_new;

	// gtk.VScale

	GType function() c_gtk_vscale_get_type;
	GtkWidget* function(GtkAdjustment* adjustment) c_gtk_vscale_new;
	GtkWidget* function(double min, double max, double step) c_gtk_vscale_new_with_range;

	// gtk.VScrollbar

	GType function() c_gtk_vscrollbar_get_type;
	GtkWidget* function(GtkAdjustment* adjustment) c_gtk_vscrollbar_new;

	// gtk.VSeparator

	GType function() c_gtk_vseparator_get_type;
	GtkWidget* function() c_gtk_vseparator_new;

	// gtk.Viewport

	GType function() c_gtk_viewport_get_type;
	GtkWidget* function(GtkAdjustment* hadjustment, GtkAdjustment* vadjustment) c_gtk_viewport_new;
	GdkWindow* function(GtkViewport* viewport) c_gtk_viewport_get_bin_window;
	GtkAdjustment* function(GtkViewport* viewport) c_gtk_viewport_get_hadjustment;
	GtkShadowType function(GtkViewport* viewport) c_gtk_viewport_get_shadow_type;
	GtkAdjustment* function(GtkViewport* viewport) c_gtk_viewport_get_vadjustment;
	GdkWindow* function(GtkViewport* viewport) c_gtk_viewport_get_view_window;
	void function(GtkViewport* viewport, GtkAdjustment* adjustment) c_gtk_viewport_set_hadjustment;
	void function(GtkViewport* viewport, GtkShadowType type) c_gtk_viewport_set_shadow_type;
	void function(GtkViewport* viewport, GtkAdjustment* adjustment) c_gtk_viewport_set_vadjustment;

	// gtk.VolumeButton

	GType function() c_gtk_volume_button_get_type;
	GtkWidget* function() c_gtk_volume_button_new;

	// gtk.Widget

	GType function() c_gtk_widget_get_type;
	GtkWidget* function(GType type, const(char)* firstPropertyName, ... ) c_gtk_widget_new;
	GtkTextDirection function() c_gtk_widget_get_default_direction;
	GtkStyle* function() c_gtk_widget_get_default_style;
	void function() c_gtk_widget_pop_composite_child;
	void function() c_gtk_widget_push_composite_child;
	void function(GtkTextDirection dir) c_gtk_widget_set_default_direction;
	int function(GtkWidget* widget) c_gtk_widget_activate;
	void function(GtkWidget* widget, const(char)* accelSignal, GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods, GtkAccelFlags accelFlags) c_gtk_widget_add_accelerator;
	void function(GtkWidget* widget, GdkDevice* device, GdkEventMask events) c_gtk_widget_add_device_events;
	void function(GtkWidget* widget, int events) c_gtk_widget_add_events;
	void function(GtkWidget* widget, GtkWidget* label) c_gtk_widget_add_mnemonic_label;
	uint function(GtkWidget* widget, GtkTickCallback callback, void* userData, GDestroyNotify notify) c_gtk_widget_add_tick_callback;
	int function(GtkWidget* widget, uint signalId) c_gtk_widget_can_activate_accel;
	int function(GtkWidget* widget, GtkDirectionType direction) c_gtk_widget_child_focus;
	void function(GtkWidget* widget, const(char)* childProperty) c_gtk_widget_child_notify;
	void function(GtkWidget* widget, uint* pathLength, char** path, char** pathReversed) c_gtk_widget_class_path;
	int function(GtkWidget* widget, GtkOrientation orientation) c_gtk_widget_compute_expand;
	PangoContext* function(GtkWidget* widget) c_gtk_widget_create_pango_context;
	PangoLayout* function(GtkWidget* widget, const(char)* text) c_gtk_widget_create_pango_layout;
	void function(GtkWidget* widget) c_gtk_widget_destroy;
	void function(GtkWidget* widget, GtkWidget** widgetPointer) c_gtk_widget_destroyed;
	int function(GtkWidget* widget, GdkDevice* device) c_gtk_widget_device_is_shadowed;
	GdkDragContext* function(GtkWidget* widget, GtkTargetList* targets, GdkDragAction actions, int button, GdkEvent* event) c_gtk_drag_begin;
	GdkDragContext* function(GtkWidget* widget, GtkTargetList* targets, GdkDragAction actions, int button, GdkEvent* event, int x, int y) c_gtk_drag_begin_with_coordinates;
	int function(GtkWidget* widget, int startX, int startY, int currentX, int currentY) c_gtk_drag_check_threshold;
	void function(GtkWidget* widget) c_gtk_drag_dest_add_image_targets;
	void function(GtkWidget* widget) c_gtk_drag_dest_add_text_targets;
	void function(GtkWidget* widget) c_gtk_drag_dest_add_uri_targets;
	GdkAtom function(GtkWidget* widget, GdkDragContext* context, GtkTargetList* targetList) c_gtk_drag_dest_find_target;
	GtkTargetList* function(GtkWidget* widget) c_gtk_drag_dest_get_target_list;
	int function(GtkWidget* widget) c_gtk_drag_dest_get_track_motion;
	void function(GtkWidget* widget, GtkDestDefaults flags, GtkTargetEntry* targets, int nTargets, GdkDragAction actions) c_gtk_drag_dest_set;
	void function(GtkWidget* widget, GdkWindow* proxyWindow, GdkDragProtocol protocol, int useCoordinates) c_gtk_drag_dest_set_proxy;
	void function(GtkWidget* widget, GtkTargetList* targetList) c_gtk_drag_dest_set_target_list;
	void function(GtkWidget* widget, int trackMotion) c_gtk_drag_dest_set_track_motion;
	void function(GtkWidget* widget) c_gtk_drag_dest_unset;
	void function(GtkWidget* widget, GdkDragContext* context, GdkAtom target, uint time) c_gtk_drag_get_data;
	void function(GtkWidget* widget) c_gtk_drag_highlight;
	void function(GtkWidget* widget) c_gtk_drag_source_add_image_targets;
	void function(GtkWidget* widget) c_gtk_drag_source_add_text_targets;
	void function(GtkWidget* widget) c_gtk_drag_source_add_uri_targets;
	GtkTargetList* function(GtkWidget* widget) c_gtk_drag_source_get_target_list;
	void function(GtkWidget* widget, GdkModifierType startButtonMask, GtkTargetEntry* targets, int nTargets, GdkDragAction actions) c_gtk_drag_source_set;
	void function(GtkWidget* widget, GIcon* icon) c_gtk_drag_source_set_icon_gicon;
	void function(GtkWidget* widget, const(char)* iconName) c_gtk_drag_source_set_icon_name;
	void function(GtkWidget* widget, GdkPixbuf* pixbuf) c_gtk_drag_source_set_icon_pixbuf;
	void function(GtkWidget* widget, const(char)* stockId) c_gtk_drag_source_set_icon_stock;
	void function(GtkWidget* widget, GtkTargetList* targetList) c_gtk_drag_source_set_target_list;
	void function(GtkWidget* widget) c_gtk_drag_source_unset;
	void function(GtkWidget* widget) c_gtk_drag_unhighlight;
	void function(GtkWidget* widget, cairo_t* cr) c_gtk_widget_draw;
	void function(GtkWidget* widget) c_gtk_widget_ensure_style;
	void function(GtkWidget* widget) c_gtk_widget_error_bell;
	int function(GtkWidget* widget, GdkEvent* event) c_gtk_widget_event;
	void function(GtkWidget* widget) c_gtk_widget_freeze_child_notify;
	AtkObject* function(GtkWidget* widget) c_gtk_widget_get_accessible;
	GActionGroup* function(GtkWidget* widget, const(char)* prefix) c_gtk_widget_get_action_group;
	int function(GtkWidget* widget) c_gtk_widget_get_allocated_baseline;
	int function(GtkWidget* widget) c_gtk_widget_get_allocated_height;
	void function(GtkWidget* widget, GtkAllocation* allocation, int* baseline) c_gtk_widget_get_allocated_size;
	int function(GtkWidget* widget) c_gtk_widget_get_allocated_width;
	void function(GtkWidget* widget, GtkAllocation* allocation) c_gtk_widget_get_allocation;
	GtkWidget* function(GtkWidget* widget, GType widgetType) c_gtk_widget_get_ancestor;
	int function(GtkWidget* widget) c_gtk_widget_get_app_paintable;
	int function(GtkWidget* widget) c_gtk_widget_get_can_default;
	int function(GtkWidget* widget) c_gtk_widget_get_can_focus;
	void function(GtkWidget* widget, GtkRequisition* requisition) c_gtk_widget_get_child_requisition;
	int function(GtkWidget* widget) c_gtk_widget_get_child_visible;
	void function(GtkWidget* widget, GtkAllocation* clip) c_gtk_widget_get_clip;
	GtkClipboard* function(GtkWidget* widget, GdkAtom selection) c_gtk_widget_get_clipboard;
	char* function(GtkWidget* widget) c_gtk_widget_get_composite_name;
	int function(GtkWidget* widget, GdkDevice* device) c_gtk_widget_get_device_enabled;
	GdkEventMask function(GtkWidget* widget, GdkDevice* device) c_gtk_widget_get_device_events;
	GtkTextDirection function(GtkWidget* widget) c_gtk_widget_get_direction;
	GdkDisplay* function(GtkWidget* widget) c_gtk_widget_get_display;
	int function(GtkWidget* widget) c_gtk_widget_get_double_buffered;
	int function(GtkWidget* widget) c_gtk_widget_get_events;
	int function(GtkWidget* widget) c_gtk_widget_get_focus_on_click;
	PangoFontMap* function(GtkWidget* widget) c_gtk_widget_get_font_map;
	cairo_font_options_t* function(GtkWidget* widget) c_gtk_widget_get_font_options;
	GdkFrameClock* function(GtkWidget* widget) c_gtk_widget_get_frame_clock;
	GtkAlign function(GtkWidget* widget) c_gtk_widget_get_halign;
	int function(GtkWidget* widget) c_gtk_widget_get_has_tooltip;
	int function(GtkWidget* widget) c_gtk_widget_get_has_window;
	int function(GtkWidget* widget) c_gtk_widget_get_hexpand;
	int function(GtkWidget* widget) c_gtk_widget_get_hexpand_set;
	int function(GtkWidget* widget) c_gtk_widget_get_mapped;
	int function(GtkWidget* widget) c_gtk_widget_get_margin_bottom;
	int function(GtkWidget* widget) c_gtk_widget_get_margin_end;
	int function(GtkWidget* widget) c_gtk_widget_get_margin_left;
	int function(GtkWidget* widget) c_gtk_widget_get_margin_right;
	int function(GtkWidget* widget) c_gtk_widget_get_margin_start;
	int function(GtkWidget* widget) c_gtk_widget_get_margin_top;
	GdkModifierType function(GtkWidget* widget, GdkModifierIntent intent) c_gtk_widget_get_modifier_mask;
	GtkRcStyle* function(GtkWidget* widget) c_gtk_widget_get_modifier_style;
	const(char)* function(GtkWidget* widget) c_gtk_widget_get_name;
	int function(GtkWidget* widget) c_gtk_widget_get_no_show_all;
	double function(GtkWidget* widget) c_gtk_widget_get_opacity;
	PangoContext* function(GtkWidget* widget) c_gtk_widget_get_pango_context;
	GtkWidget* function(GtkWidget* widget) c_gtk_widget_get_parent;
	GdkWindow* function(GtkWidget* widget) c_gtk_widget_get_parent_window;
	GtkWidgetPath* function(GtkWidget* widget) c_gtk_widget_get_path;
	void function(GtkWidget* widget, int* x, int* y) c_gtk_widget_get_pointer;
	void function(GtkWidget* widget, int* minimumHeight, int* naturalHeight) c_gtk_widget_get_preferred_height;
	void function(GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight, int* minimumBaseline, int* naturalBaseline) c_gtk_widget_get_preferred_height_and_baseline_for_width;
	void function(GtkWidget* widget, int width, int* minimumHeight, int* naturalHeight) c_gtk_widget_get_preferred_height_for_width;
	void function(GtkWidget* widget, GtkRequisition* minimumSize, GtkRequisition* naturalSize) c_gtk_widget_get_preferred_size;
	void function(GtkWidget* widget, int* minimumWidth, int* naturalWidth) c_gtk_widget_get_preferred_width;
	void function(GtkWidget* widget, int height, int* minimumWidth, int* naturalWidth) c_gtk_widget_get_preferred_width_for_height;
	int function(GtkWidget* widget) c_gtk_widget_get_realized;
	int function(GtkWidget* widget) c_gtk_widget_get_receives_default;
	GtkSizeRequestMode function(GtkWidget* widget) c_gtk_widget_get_request_mode;
	void function(GtkWidget* widget, GtkRequisition* requisition) c_gtk_widget_get_requisition;
	GdkWindow* function(GtkWidget* widget) c_gtk_widget_get_root_window;
	int function(GtkWidget* widget) c_gtk_widget_get_scale_factor;
	GdkScreen* function(GtkWidget* widget) c_gtk_widget_get_screen;
	int function(GtkWidget* widget) c_gtk_widget_get_sensitive;
	GtkSettings* function(GtkWidget* widget) c_gtk_widget_get_settings;
	void function(GtkWidget* widget, int* width, int* height) c_gtk_widget_get_size_request;
	GtkStateType function(GtkWidget* widget) c_gtk_widget_get_state;
	GtkStateFlags function(GtkWidget* widget) c_gtk_widget_get_state_flags;
	GtkStyle* function(GtkWidget* widget) c_gtk_widget_get_style;
	GtkStyleContext* function(GtkWidget* widget) c_gtk_widget_get_style_context;
	int function(GtkWidget* widget) c_gtk_widget_get_support_multidevice;
	GObject* function(GtkWidget* widget, GType widgetType, const(char)* name) c_gtk_widget_get_template_child;
	char* function(GtkWidget* widget) c_gtk_widget_get_tooltip_markup;
	char* function(GtkWidget* widget) c_gtk_widget_get_tooltip_text;
	GtkWindow* function(GtkWidget* widget) c_gtk_widget_get_tooltip_window;
	GtkWidget* function(GtkWidget* widget) c_gtk_widget_get_toplevel;
	GtkAlign function(GtkWidget* widget) c_gtk_widget_get_valign;
	GtkAlign function(GtkWidget* widget) c_gtk_widget_get_valign_with_baseline;
	int function(GtkWidget* widget) c_gtk_widget_get_vexpand;
	int function(GtkWidget* widget) c_gtk_widget_get_vexpand_set;
	int function(GtkWidget* widget) c_gtk_widget_get_visible;
	GdkVisual* function(GtkWidget* widget) c_gtk_widget_get_visual;
	GdkWindow* function(GtkWidget* widget) c_gtk_widget_get_window;
	void function(GtkWidget* widget) c_gtk_grab_add;
	void function(GtkWidget* widget) c_gtk_widget_grab_default;
	void function(GtkWidget* widget) c_gtk_widget_grab_focus;
	void function(GtkWidget* widget) c_gtk_grab_remove;
	int function(GtkWidget* widget) c_gtk_widget_has_default;
	int function(GtkWidget* widget) c_gtk_widget_has_focus;
	int function(GtkWidget* widget) c_gtk_widget_has_grab;
	int function(GtkWidget* widget) c_gtk_widget_has_rc_style;
	int function(GtkWidget* widget) c_gtk_widget_has_screen;
	int function(GtkWidget* widget) c_gtk_widget_has_visible_focus;
	void function(GtkWidget* widget) c_gtk_widget_hide;
	int function(GtkWidget* widget) c_gtk_widget_hide_on_delete;
	int function(GtkWidget* widget) c_gtk_widget_in_destruction;
	void function(GtkWidget* widget) c_gtk_widget_init_template;
	void function(GtkWidget* widget, cairo_region_t* region) c_gtk_widget_input_shape_combine_region;
	void function(GtkWidget* widget, const(char)* name, GActionGroup* group) c_gtk_widget_insert_action_group;
	int function(GtkWidget* widget, GdkRectangle* area, GdkRectangle* intersection) c_gtk_widget_intersect;
	int function(GtkWidget* widget, GtkWidget* ancestor) c_gtk_widget_is_ancestor;
	int function(GtkWidget* widget) c_gtk_widget_is_composited;
	int function(GtkWidget* widget) c_gtk_widget_is_drawable;
	int function(GtkWidget* widget) c_gtk_widget_is_focus;
	int function(GtkWidget* widget) c_gtk_widget_is_sensitive;
	int function(GtkWidget* widget) c_gtk_widget_is_toplevel;
	int function(GtkWidget* widget) c_gtk_widget_is_visible;
	int function(GtkWidget* widget, GtkDirectionType direction) c_gtk_widget_keynav_failed;
	GList* function(GtkWidget* widget) c_gtk_widget_list_accel_closures;
	char** function(GtkWidget* widget) c_gtk_widget_list_action_prefixes;
	GList* function(GtkWidget* widget) c_gtk_widget_list_mnemonic_labels;
	void function(GtkWidget* widget) c_gtk_widget_map;
	int function(GtkWidget* widget, int groupCycling) c_gtk_widget_mnemonic_activate;
	void function(GtkWidget* widget, GtkStateType state, GdkColor* color) c_gtk_widget_modify_base;
	void function(GtkWidget* widget, GtkStateType state, GdkColor* color) c_gtk_widget_modify_bg;
	void function(GtkWidget* widget, GdkColor* primary, GdkColor* secondary) c_gtk_widget_modify_cursor;
	void function(GtkWidget* widget, GtkStateType state, GdkColor* color) c_gtk_widget_modify_fg;
	void function(GtkWidget* widget, PangoFontDescription* fontDesc) c_gtk_widget_modify_font;
	void function(GtkWidget* widget, GtkRcStyle* style) c_gtk_widget_modify_style;
	void function(GtkWidget* widget, GtkStateType state, GdkColor* color) c_gtk_widget_modify_text;
	void function(GtkWidget* widget, GtkStateFlags state, GdkRGBA* color) c_gtk_widget_override_background_color;
	void function(GtkWidget* widget, GtkStateFlags state, GdkRGBA* color) c_gtk_widget_override_color;
	void function(GtkWidget* widget, GdkRGBA* cursor, GdkRGBA* secondaryCursor) c_gtk_widget_override_cursor;
	void function(GtkWidget* widget, PangoFontDescription* fontDesc) c_gtk_widget_override_font;
	void function(GtkWidget* widget, const(char)* name, GdkRGBA* color) c_gtk_widget_override_symbolic_color;
	void function(GtkWidget* widget, uint* pathLength, char** path, char** pathReversed) c_gtk_widget_path;
	void function(GtkWidget* widget) c_gtk_widget_queue_allocate;
	void function(GtkWidget* widget) c_gtk_widget_queue_compute_expand;
	void function(GtkWidget* widget) c_gtk_widget_queue_draw;
	void function(GtkWidget* widget, int x, int y, int width, int height) c_gtk_widget_queue_draw_area;
	void function(GtkWidget* widget, cairo_region_t* region) c_gtk_widget_queue_draw_region;
	void function(GtkWidget* widget) c_gtk_widget_queue_resize;
	void function(GtkWidget* widget) c_gtk_widget_queue_resize_no_redraw;
	void function(GtkWidget* widget) c_gtk_widget_realize;
	cairo_region_t* function(GtkWidget* widget, cairo_region_t* region) c_gtk_widget_region_intersect;
	void function(GtkWidget* widget, GdkWindow* window) c_gtk_widget_register_window;
	int function(GtkWidget* widget, GtkAccelGroup* accelGroup, uint accelKey, GdkModifierType accelMods) c_gtk_widget_remove_accelerator;
	void function(GtkWidget* widget, GtkWidget* label) c_gtk_widget_remove_mnemonic_label;
	void function(GtkWidget* widget, uint id) c_gtk_widget_remove_tick_callback;
	GdkPixbuf* function(GtkWidget* widget, const(char)* stockId, GtkIconSize size, const(char)* detail) c_gtk_widget_render_icon;
	GdkPixbuf* function(GtkWidget* widget, const(char)* stockId, GtkIconSize size) c_gtk_widget_render_icon_pixbuf;
	void function(GtkWidget* widget, GtkWidget* newParent) c_gtk_widget_reparent;
	void function(GtkWidget* widget) c_gtk_widget_reset_rc_styles;
	void function(GtkWidget* widget) c_gtk_widget_reset_style;
	int function(GtkWidget* widget, GdkEvent* event) c_gtk_widget_send_expose;
	int function(GtkWidget* widget, GdkEvent* event) c_gtk_widget_send_focus_change;
	void function(GtkWidget* widget, const(char)* accelPath, GtkAccelGroup* accelGroup) c_gtk_widget_set_accel_path;
	void function(GtkWidget* widget, GtkAllocation* allocation) c_gtk_widget_set_allocation;
	void function(GtkWidget* widget, int appPaintable) c_gtk_widget_set_app_paintable;
	void function(GtkWidget* widget, int canDefault) c_gtk_widget_set_can_default;
	void function(GtkWidget* widget, int canFocus) c_gtk_widget_set_can_focus;
	void function(GtkWidget* widget, int isVisible) c_gtk_widget_set_child_visible;
	void function(GtkWidget* widget, GtkAllocation* clip) c_gtk_widget_set_clip;
	void function(GtkWidget* widget, const(char)* name) c_gtk_widget_set_composite_name;
	void function(GtkWidget* widget, GdkDevice* device, int enabled) c_gtk_widget_set_device_enabled;
	void function(GtkWidget* widget, GdkDevice* device, GdkEventMask events) c_gtk_widget_set_device_events;
	void function(GtkWidget* widget, GtkTextDirection dir) c_gtk_widget_set_direction;
	void function(GtkWidget* widget, int doubleBuffered) c_gtk_widget_set_double_buffered;
	void function(GtkWidget* widget, int events) c_gtk_widget_set_events;
	void function(GtkWidget* widget, int focusOnClick) c_gtk_widget_set_focus_on_click;
	void function(GtkWidget* widget, PangoFontMap* fontMap) c_gtk_widget_set_font_map;
	void function(GtkWidget* widget, cairo_font_options_t* options) c_gtk_widget_set_font_options;
	void function(GtkWidget* widget, GtkAlign alig) c_gtk_widget_set_halign;
	void function(GtkWidget* widget, int hasTooltip) c_gtk_widget_set_has_tooltip;
	void function(GtkWidget* widget, int hasWindow) c_gtk_widget_set_has_window;
	void function(GtkWidget* widget, int expand) c_gtk_widget_set_hexpand;
	void function(GtkWidget* widget, int set) c_gtk_widget_set_hexpand_set;
	void function(GtkWidget* widget, int mapped) c_gtk_widget_set_mapped;
	void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_bottom;
	void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_end;
	void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_left;
	void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_right;
	void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_start;
	void function(GtkWidget* widget, int margin) c_gtk_widget_set_margin_top;
	void function(GtkWidget* widget, const(char)* name) c_gtk_widget_set_name;
	void function(GtkWidget* widget, int noShowAll) c_gtk_widget_set_no_show_all;
	void function(GtkWidget* widget, double opacity) c_gtk_widget_set_opacity;
	void function(GtkWidget* widget, GtkWidget* parent) c_gtk_widget_set_parent;
	void function(GtkWidget* widget, GdkWindow* parentWindow) c_gtk_widget_set_parent_window;
	void function(GtkWidget* widget, int realized) c_gtk_widget_set_realized;
	void function(GtkWidget* widget, int receivesDefault) c_gtk_widget_set_receives_default;
	void function(GtkWidget* widget, int redrawOnAllocate) c_gtk_widget_set_redraw_on_allocate;
	void function(GtkWidget* widget, int sensitive) c_gtk_widget_set_sensitive;
	void function(GtkWidget* widget, int width, int height) c_gtk_widget_set_size_request;
	void function(GtkWidget* widget, GtkStateType state) c_gtk_widget_set_state;
	void function(GtkWidget* widget, GtkStateFlags flags, int clear) c_gtk_widget_set_state_flags;
	void function(GtkWidget* widget, GtkStyle* style) c_gtk_widget_set_style;
	void function(GtkWidget* widget, int supportMultidevice) c_gtk_widget_set_support_multidevice;
	void function(GtkWidget* widget, const(char)* markup) c_gtk_widget_set_tooltip_markup;
	void function(GtkWidget* widget, const(char)* text) c_gtk_widget_set_tooltip_text;
	void function(GtkWidget* widget, GtkWindow* customWindow) c_gtk_widget_set_tooltip_window;
	void function(GtkWidget* widget, GtkAlign alig) c_gtk_widget_set_valign;
	void function(GtkWidget* widget, int expand) c_gtk_widget_set_vexpand;
	void function(GtkWidget* widget, int set) c_gtk_widget_set_vexpand_set;
	void function(GtkWidget* widget, int visible) c_gtk_widget_set_visible;
	void function(GtkWidget* widget, GdkVisual* visual) c_gtk_widget_set_visual;
	void function(GtkWidget* widget, GdkWindow* window) c_gtk_widget_set_window;
	void function(GtkWidget* widget, cairo_region_t* region) c_gtk_widget_shape_combine_region;
	void function(GtkWidget* widget) c_gtk_widget_show;
	void function(GtkWidget* widget) c_gtk_widget_show_all;
	void function(GtkWidget* widget) c_gtk_widget_show_now;
	void function(GtkWidget* widget, GtkAllocation* allocation) c_gtk_widget_size_allocate;
	void function(GtkWidget* widget, GtkAllocation* allocation, int baseline) c_gtk_widget_size_allocate_with_baseline;
	void function(GtkWidget* widget, GtkRequisition* requisition) c_gtk_widget_size_request;
	void function(GtkWidget* widget) c_gtk_widget_style_attach;
	void function(GtkWidget* widget, const(char)* firstPropertyName, ... ) c_gtk_widget_style_get;
	void function(GtkWidget* widget, const(char)* propertyName, GValue* value) c_gtk_widget_style_get_property;
	void function(GtkWidget* widget, const(char)* firstPropertyName, void* varArgs) c_gtk_widget_style_get_valist;
	void function(GtkWidget* widget) c_gtk_widget_thaw_child_notify;
	int function(GtkWidget* srcWidget, GtkWidget* destWidget, int srcX, int srcY, int* destX, int* destY) c_gtk_widget_translate_coordinates;
	void function(GtkWidget* widget) c_gtk_widget_trigger_tooltip_query;
	void function(GtkWidget* widget) c_gtk_widget_unmap;
	void function(GtkWidget* widget) c_gtk_widget_unparent;
	void function(GtkWidget* widget) c_gtk_widget_unrealize;
	void function(GtkWidget* widget, GdkWindow* window) c_gtk_widget_unregister_window;
	void function(GtkWidget* widget, GtkStateFlags flags) c_gtk_widget_unset_state_flags;
	int function(cairo_t* cr, GdkWindow* window) c_gtk_cairo_should_draw_window;
	void function(cairo_t* cr, GtkWidget* widget, GdkWindow* window) c_gtk_cairo_transform_to_window;
	int function(int extraSpace, uint nRequestedSizes, GtkRequestedSize* sizes) c_gtk_distribute_natural_allocation;

	// gtk.WidgetAccessible

	GType function() c_gtk_widget_accessible_get_type;

	// gtk.WidgetClass

	void function(GtkWidgetClass* widgetClass, const(char)* callbackName, GCallback callbackSymbol) c_gtk_widget_class_bind_template_callback_full;
	void function(GtkWidgetClass* widgetClass, const(char)* name, int internalChild, ptrdiff_t structOffset) c_gtk_widget_class_bind_template_child_full;
	GParamSpec* function(GtkWidgetClass* klass, const(char)* propertyName) c_gtk_widget_class_find_style_property;
	const(char)* function(GtkWidgetClass* widgetClass) c_gtk_widget_class_get_css_name;
	void function(GtkWidgetClass* klass, GParamSpec* pspec) c_gtk_widget_class_install_style_property;
	void function(GtkWidgetClass* klass, GParamSpec* pspec, GtkRcPropertyParser parser) c_gtk_widget_class_install_style_property_parser;
	GParamSpec** function(GtkWidgetClass* klass, uint* nProperties) c_gtk_widget_class_list_style_properties;
	void function(GtkWidgetClass* widgetClass, AtkRole role) c_gtk_widget_class_set_accessible_role;
	void function(GtkWidgetClass* widgetClass, GType type) c_gtk_widget_class_set_accessible_type;
	void function(GtkWidgetClass* widgetClass, GtkBuilderConnectFunc connectFunc, void* connectData, GDestroyNotify connectDataDestroy) c_gtk_widget_class_set_connect_func;
	void function(GtkWidgetClass* widgetClass, const(char)* name) c_gtk_widget_class_set_css_name;
	void function(GtkWidgetClass* widgetClass, GBytes* templateBytes) c_gtk_widget_class_set_template;
	void function(GtkWidgetClass* widgetClass, const(char)* resourceName) c_gtk_widget_class_set_template_from_resource;

	// gtk.WidgetPath

	GType function() c_gtk_widget_path_get_type;
	GtkWidgetPath* function() c_gtk_widget_path_new;
	int function(GtkWidgetPath* path, GtkWidget* widget) c_gtk_widget_path_append_for_widget;
	int function(GtkWidgetPath* path, GType type) c_gtk_widget_path_append_type;
	int function(GtkWidgetPath* path, GtkWidgetPath* siblings, uint siblingIndex) c_gtk_widget_path_append_with_siblings;
	GtkWidgetPath* function(GtkWidgetPath* path) c_gtk_widget_path_copy;
	void function(GtkWidgetPath* path) c_gtk_widget_path_free;
	GType function(GtkWidgetPath* path) c_gtk_widget_path_get_object_type;
	int function(GtkWidgetPath* path, GType type) c_gtk_widget_path_has_parent;
	int function(GtkWidgetPath* path, GType type) c_gtk_widget_path_is_type;
	void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_add_class;
	void function(GtkWidgetPath* path, int pos, const(char)* name, GtkRegionFlags flags) c_gtk_widget_path_iter_add_region;
	void function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_clear_classes;
	void function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_clear_regions;
	const(char)* function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_get_name;
	const(char)* function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_get_object_name;
	GType function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_get_object_type;
	uint function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_get_sibling_index;
	GtkWidgetPath* function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_get_siblings;
	GtkStateFlags function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_get_state;
	int function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_has_class;
	int function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_has_name;
	int function(GtkWidgetPath* path, int pos, GQuark qname) c_gtk_widget_path_iter_has_qclass;
	int function(GtkWidgetPath* path, int pos, GQuark qname) c_gtk_widget_path_iter_has_qname;
	int function(GtkWidgetPath* path, int pos, GQuark qname, GtkRegionFlags* flags) c_gtk_widget_path_iter_has_qregion;
	int function(GtkWidgetPath* path, int pos, const(char)* name, GtkRegionFlags* flags) c_gtk_widget_path_iter_has_region;
	GSList* function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_list_classes;
	GSList* function(GtkWidgetPath* path, int pos) c_gtk_widget_path_iter_list_regions;
	void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_remove_class;
	void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_remove_region;
	void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_set_name;
	void function(GtkWidgetPath* path, int pos, const(char)* name) c_gtk_widget_path_iter_set_object_name;
	void function(GtkWidgetPath* path, int pos, GType type) c_gtk_widget_path_iter_set_object_type;
	void function(GtkWidgetPath* path, int pos, GtkStateFlags state) c_gtk_widget_path_iter_set_state;
	int function(GtkWidgetPath* path) c_gtk_widget_path_length;
	void function(GtkWidgetPath* path, GType type) c_gtk_widget_path_prepend_type;
	GtkWidgetPath* function(GtkWidgetPath* path) c_gtk_widget_path_ref;
	char* function(GtkWidgetPath* path) c_gtk_widget_path_to_string;
	void function(GtkWidgetPath* path) c_gtk_widget_path_unref;

	// gtk.Window

	GType function() c_gtk_window_get_type;
	GtkWidget* function(GtkWindowType type) c_gtk_window_new;
	GList* function() c_gtk_window_get_default_icon_list;
	const(char)* function() c_gtk_window_get_default_icon_name;
	GList* function() c_gtk_window_list_toplevels;
	void function(int setting) c_gtk_window_set_auto_startup_notification;
	void function(GdkPixbuf* icon) c_gtk_window_set_default_icon;
	int function(char* filename, GError** err) c_gtk_window_set_default_icon_from_file;
	void function(GList* list) c_gtk_window_set_default_icon_list;
	void function(const(char)* name) c_gtk_window_set_default_icon_name;
	void function(int enable) c_gtk_window_set_interactive_debugging;
	int function(GtkWindow* window) c_gtk_window_activate_default;
	int function(GtkWindow* window) c_gtk_window_activate_focus;
	int function(GtkWindow* window, GdkEventKey* event) c_gtk_window_activate_key;
	void function(GtkWindow* window, GtkAccelGroup* accelGroup) c_gtk_window_add_accel_group;
	void function(GtkWindow* window, uint keyval, GtkWidget* target) c_gtk_window_add_mnemonic;
	void function(GtkWindow* window, int button, int rootX, int rootY, uint timestamp) c_gtk_window_begin_move_drag;
	void function(GtkWindow* window, GdkWindowEdge edge, int button, int rootX, int rootY, uint timestamp) c_gtk_window_begin_resize_drag;
	void function(GtkWindow* window) c_gtk_window_close;
	void function(GtkWindow* window) c_gtk_window_deiconify;
	void function(GtkWindow* window) c_gtk_window_fullscreen;
	void function(GtkWindow* window, GdkScreen* screen, int monitor) c_gtk_window_fullscreen_on_monitor;
	int function(GtkWindow* window) c_gtk_window_get_accept_focus;
	GtkApplication* function(GtkWindow* window) c_gtk_window_get_application;
	GtkWidget* function(GtkWindow* window) c_gtk_window_get_attached_to;
	int function(GtkWindow* window) c_gtk_window_get_decorated;
	void function(GtkWindow* window, int* width, int* height) c_gtk_window_get_default_size;
	GtkWidget* function(GtkWindow* window) c_gtk_window_get_default_widget;
	int function(GtkWindow* window) c_gtk_window_get_deletable;
	int function(GtkWindow* window) c_gtk_window_get_destroy_with_parent;
	GtkWidget* function(GtkWindow* window) c_gtk_window_get_focus;
	int function(GtkWindow* window) c_gtk_window_get_focus_on_map;
	int function(GtkWindow* window) c_gtk_window_get_focus_visible;
	GdkGravity function(GtkWindow* window) c_gtk_window_get_gravity;
	GtkWindowGroup* function(GtkWindow* window) c_gtk_window_get_group;
	int function(GtkWindow* window) c_gtk_window_get_has_resize_grip;
	int function(GtkWindow* window) c_gtk_window_get_hide_titlebar_when_maximized;
	GdkPixbuf* function(GtkWindow* window) c_gtk_window_get_icon;
	GList* function(GtkWindow* window) c_gtk_window_get_icon_list;
	const(char)* function(GtkWindow* window) c_gtk_window_get_icon_name;
	GdkModifierType function(GtkWindow* window) c_gtk_window_get_mnemonic_modifier;
	int function(GtkWindow* window) c_gtk_window_get_mnemonics_visible;
	int function(GtkWindow* window) c_gtk_window_get_modal;
	double function(GtkWindow* window) c_gtk_window_get_opacity;
	void function(GtkWindow* window, int* rootX, int* rootY) c_gtk_window_get_position;
	int function(GtkWindow* window) c_gtk_window_get_resizable;
	int function(GtkWindow* window, GdkRectangle* rect) c_gtk_window_get_resize_grip_area;
	const(char)* function(GtkWindow* window) c_gtk_window_get_role;
	GdkScreen* function(GtkWindow* window) c_gtk_window_get_screen;
	void function(GtkWindow* window, int* width, int* height) c_gtk_window_get_size;
	int function(GtkWindow* window) c_gtk_window_get_skip_pager_hint;
	int function(GtkWindow* window) c_gtk_window_get_skip_taskbar_hint;
	const(char)* function(GtkWindow* window) c_gtk_window_get_title;
	GtkWidget* function(GtkWindow* window) c_gtk_window_get_titlebar;
	GtkWindow* function(GtkWindow* window) c_gtk_window_get_transient_for;
	GdkWindowTypeHint function(GtkWindow* window) c_gtk_window_get_type_hint;
	int function(GtkWindow* window) c_gtk_window_get_urgency_hint;
	GtkWindowType function(GtkWindow* window) c_gtk_window_get_window_type;
	int function(GtkWindow* window) c_gtk_window_has_group;
	int function(GtkWindow* window) c_gtk_window_has_toplevel_focus;
	void function(GtkWindow* window) c_gtk_window_iconify;
	int function(GtkWindow* window) c_gtk_window_is_active;
	int function(GtkWindow* window) c_gtk_window_is_maximized;
	void function(GtkWindow* window) c_gtk_window_maximize;
	int function(GtkWindow* window, uint keyval, GdkModifierType modifier) c_gtk_window_mnemonic_activate;
	void function(GtkWindow* window, int x, int y) c_gtk_window_move;
	int function(GtkWindow* window, const(char)* geometry) c_gtk_window_parse_geometry;
	void function(GtkWindow* window) c_gtk_window_present;
	void function(GtkWindow* window, uint timestamp) c_gtk_window_present_with_time;
	int function(GtkWindow* window, GdkEventKey* event) c_gtk_window_propagate_key_event;
	void function(GtkWindow* window, GtkAccelGroup* accelGroup) c_gtk_window_remove_accel_group;
	void function(GtkWindow* window, uint keyval, GtkWidget* target) c_gtk_window_remove_mnemonic;
	void function(GtkWindow* window) c_gtk_window_reshow_with_initial_size;
	void function(GtkWindow* window, int width, int height) c_gtk_window_resize;
	int function(GtkWindow* window) c_gtk_window_resize_grip_is_visible;
	void function(GtkWindow* window, int width, int height) c_gtk_window_resize_to_geometry;
	void function(GtkWindow* window, int setting) c_gtk_window_set_accept_focus;
	void function(GtkWindow* window, GtkApplication* application) c_gtk_window_set_application;
	void function(GtkWindow* window, GtkWidget* attachWidget) c_gtk_window_set_attached_to;
	void function(GtkWindow* window, int setting) c_gtk_window_set_decorated;
	void function(GtkWindow* window, GtkWidget* defaultWidget) c_gtk_window_set_default;
	void function(GtkWindow* window, int width, int height) c_gtk_window_set_default_geometry;
	void function(GtkWindow* window, int width, int height) c_gtk_window_set_default_size;
	void function(GtkWindow* window, int setting) c_gtk_window_set_deletable;
	void function(GtkWindow* window, int setting) c_gtk_window_set_destroy_with_parent;
	void function(GtkWindow* window, GtkWidget* focus) c_gtk_window_set_focus;
	void function(GtkWindow* window, int setting) c_gtk_window_set_focus_on_map;
	void function(GtkWindow* window, int setting) c_gtk_window_set_focus_visible;
	void function(GtkWindow* window, GtkWidget* geometryWidget, GdkGeometry* geometry, GdkWindowHints geomMask) c_gtk_window_set_geometry_hints;
	void function(GtkWindow* window, GdkGravity gravity) c_gtk_window_set_gravity;
	void function(GtkWindow* window, int value) c_gtk_window_set_has_resize_grip;
	void function(GtkWindow* window, int setting) c_gtk_window_set_has_user_ref_count;
	void function(GtkWindow* window, int setting) c_gtk_window_set_hide_titlebar_when_maximized;
	void function(GtkWindow* window, GdkPixbuf* icon) c_gtk_window_set_icon;
	int function(GtkWindow* window, char* filename, GError** err) c_gtk_window_set_icon_from_file;
	void function(GtkWindow* window, GList* list) c_gtk_window_set_icon_list;
	void function(GtkWindow* window, const(char)* name) c_gtk_window_set_icon_name;
	void function(GtkWindow* window, int setting) c_gtk_window_set_keep_above;
	void function(GtkWindow* window, int setting) c_gtk_window_set_keep_below;
	void function(GtkWindow* window, GdkModifierType modifier) c_gtk_window_set_mnemonic_modifier;
	void function(GtkWindow* window, int setting) c_gtk_window_set_mnemonics_visible;
	void function(GtkWindow* window, int modal) c_gtk_window_set_modal;
	void function(GtkWindow* window, double opacity) c_gtk_window_set_opacity;
	void function(GtkWindow* window, GtkWindowPosition position) c_gtk_window_set_position;
	void function(GtkWindow* window, int resizable) c_gtk_window_set_resizable;
	void function(GtkWindow* window, const(char)* role) c_gtk_window_set_role;
	void function(GtkWindow* window, GdkScreen* screen) c_gtk_window_set_screen;
	void function(GtkWindow* window, int setting) c_gtk_window_set_skip_pager_hint;
	void function(GtkWindow* window, int setting) c_gtk_window_set_skip_taskbar_hint;
	void function(GtkWindow* window, const(char)* startupId) c_gtk_window_set_startup_id;
	void function(GtkWindow* window, const(char)* title) c_gtk_window_set_title;
	void function(GtkWindow* window, GtkWidget* titlebar) c_gtk_window_set_titlebar;
	void function(GtkWindow* window, GtkWindow* parent) c_gtk_window_set_transient_for;
	void function(GtkWindow* window, GdkWindowTypeHint hint) c_gtk_window_set_type_hint;
	void function(GtkWindow* window, int setting) c_gtk_window_set_urgency_hint;
	void function(GtkWindow* window, const(char)* wmclassName, const(char)* wmclassClass) c_gtk_window_set_wmclass;
	void function(GtkWindow* window) c_gtk_window_stick;
	void function(GtkWindow* window) c_gtk_window_unfullscreen;
	void function(GtkWindow* window) c_gtk_window_unmaximize;
	void function(GtkWindow* window) c_gtk_window_unstick;
	int function(GtkWindow* parent, const(char)* uri, uint timestamp, GError** err) c_gtk_show_uri_on_window;

	// gtk.WindowAccessible

	GType function() c_gtk_window_accessible_get_type;

	// gtk.WindowGroup

	GType function() c_gtk_window_group_get_type;
	GtkWindowGroup* function() c_gtk_window_group_new;
	void function(GtkWindowGroup* windowGroup, GtkWindow* window) c_gtk_window_group_add_window;
	GtkWidget* function(GtkWindowGroup* windowGroup, GdkDevice* device) c_gtk_window_group_get_current_device_grab;
	GtkWidget* function(GtkWindowGroup* windowGroup) c_gtk_window_group_get_current_grab;
	GList* function(GtkWindowGroup* windowGroup) c_gtk_window_group_list_windows;
	void function(GtkWindowGroup* windowGroup, GtkWindow* window) c_gtk_window_group_remove_window;

	// gtk.Main

	void function(GtkWidget* widget, GdkDevice* device, int blockOthers) c_gtk_device_grab_add;
	void function(GtkWidget* widget, GdkDevice* device) c_gtk_device_grab_remove;
	void function() c_gtk_disable_setlocale;
	int function() c_gtk_events_pending;
	GdkEvent* function() c_gtk_get_current_event;
	GdkDevice* function() c_gtk_get_current_event_device;
	int function(GdkModifierType* state) c_gtk_get_current_event_state;
	uint function() c_gtk_get_current_event_time;
	uint function() c_gtk_get_debug_flags;
	PangoLanguage* function() c_gtk_get_default_language;
	GtkWidget* function(GdkEvent* event) c_gtk_get_event_widget;
	GtkTextDirection function() c_gtk_get_locale_direction;
	GOptionGroup* function(int openDefaultDisplay) c_gtk_get_option_group;
	GtkWidget* function() c_gtk_grab_get_current;
	void function(int* argc, char*** argv) c_gtk_init;
	int function(int* argc, char*** argv) c_gtk_init_check;
	int function(int* argc, char*** argv, const(char)* parameterString, GOptionEntry* entries, const(char)* translationDomain, GError** err) c_gtk_init_with_args;
	uint function(GtkKeySnoopFunc snooper, void* funcData) c_gtk_key_snooper_install;
	void function(uint snooperHandlerId) c_gtk_key_snooper_remove;
	void function() c_gtk_main;
	void function(GdkEvent* event) c_gtk_main_do_event;
	int function() c_gtk_main_iteration;
	int function(int blocking) c_gtk_main_iteration_do;
	uint function() c_gtk_main_level;
	void function() c_gtk_main_quit;
	int function(int* argc, char*** argv) c_gtk_parse_args;
	void function(GtkWidget* widget, GdkEvent* event) c_gtk_propagate_event;
	void function(uint flags) c_gtk_set_debug_flags;

	// gtk.Testing

	GtkWidget* function(const(char)* windowTitle, const(char)* dialogText) c_gtk_test_create_simple_window;
	GtkWidget* function(GType widgetType, const(char)* firstPropertyName, ... ) c_gtk_test_create_widget;
	GtkWidget* function(const(char)* windowTitle, const(char)* dialogText, ... ) c_gtk_test_display_button_window;
	GtkWidget* function(GtkWidget* widget, const(char)* labelPattern) c_gtk_test_find_label;
	GtkWidget* function(GtkWidget* baseWidget, GType widgetType) c_gtk_test_find_sibling;
	GtkWidget* function(GtkWidget* widget, const(char)* labelPattern, GType widgetType) c_gtk_test_find_widget;
	void function(int* argcp, char*** argvp, ... ) c_gtk_test_init;
	GType* function(uint* nTypes) c_gtk_test_list_all_types;
	void function() c_gtk_test_register_all_types;
	double function(GtkWidget* widget) c_gtk_test_slider_get_value;
	void function(GtkWidget* widget, double percentage) c_gtk_test_slider_set_perc;
	int function(GtkSpinButton* spinner, uint button, int upwards) c_gtk_test_spin_button_click;
	char* function(GtkWidget* widget) c_gtk_test_text_get;
	void function(GtkWidget* widget, const(char)* str) c_gtk_test_text_set;
	int function(GtkWidget* widget, uint button, GdkModifierType modifiers) c_gtk_test_widget_click;
	int function(GtkWidget* widget, uint keyval, GdkModifierType modifiers) c_gtk_test_widget_send_key;
	void function(GtkWidget* widget) c_gtk_test_widget_wait_for_draw;

	// gtk.DragAndDrop

	void function(GdkDragContext* context) c_gtk_drag_cancel;
	void function(GdkDragContext* context, int success, int del, uint time) c_gtk_drag_finish;
	GtkWidget* function(GdkDragContext* context) c_gtk_drag_get_source_widget;
	void function(GdkDragContext* context) c_gtk_drag_set_icon_default;
	void function(GdkDragContext* context, GIcon* icon, int hotX, int hotY) c_gtk_drag_set_icon_gicon;
	void function(GdkDragContext* context, const(char)* iconName, int hotX, int hotY) c_gtk_drag_set_icon_name;
	void function(GdkDragContext* context, GdkPixbuf* pixbuf, int hotX, int hotY) c_gtk_drag_set_icon_pixbuf;
	void function(GdkDragContext* context, const(char)* stockId, int hotX, int hotY) c_gtk_drag_set_icon_stock;
	void function(GdkDragContext* context, cairo_surface_t* surface) c_gtk_drag_set_icon_surface;
	void function(GdkDragContext* context, GtkWidget* widget, int hotX, int hotY) c_gtk_drag_set_icon_widget;
	void function(GtkWidget* widget, cairo_t* cr, GdkRectangle* location, int isPrimary, GtkTextDirection direction, int drawArrow) c_gtk_draw_insertion_cursor;

	// gtk.IconSize

	GtkIconSize function(const(char)* name) c_gtk_icon_size_from_name;
	const(char)* function(GtkIconSize size) c_gtk_icon_size_get_name;
	int function(GtkIconSize size, int* width, int* height) c_gtk_icon_size_lookup;
	int function(GtkSettings* settings, GtkIconSize size, int* width, int* height) c_gtk_icon_size_lookup_for_settings;
	GtkIconSize function(const(char)* name, int width, int height) c_gtk_icon_size_register;
	void function(const(char)* alias_, GtkIconSize target) c_gtk_icon_size_register_alias;

	// gtk.Version

	const(char)* function(uint requiredMajor, uint requiredMinor, uint requiredMicro) c_gtk_check_version;
	uint function() c_gtk_get_binary_age;
	uint function() c_gtk_get_interface_age;
	uint function() c_gtk_get_major_version;
	uint function() c_gtk_get_micro_version;
	uint function() c_gtk_get_minor_version;
}


// gtk.AboutDialog

alias c_gtk_about_dialog_get_type gtk_about_dialog_get_type;
alias c_gtk_about_dialog_new gtk_about_dialog_new;
alias c_gtk_about_dialog_add_credit_section gtk_about_dialog_add_credit_section;
alias c_gtk_about_dialog_get_artists gtk_about_dialog_get_artists;
alias c_gtk_about_dialog_get_authors gtk_about_dialog_get_authors;
alias c_gtk_about_dialog_get_comments gtk_about_dialog_get_comments;
alias c_gtk_about_dialog_get_copyright gtk_about_dialog_get_copyright;
alias c_gtk_about_dialog_get_documenters gtk_about_dialog_get_documenters;
alias c_gtk_about_dialog_get_license gtk_about_dialog_get_license;
alias c_gtk_about_dialog_get_license_type gtk_about_dialog_get_license_type;
alias c_gtk_about_dialog_get_logo gtk_about_dialog_get_logo;
alias c_gtk_about_dialog_get_logo_icon_name gtk_about_dialog_get_logo_icon_name;
alias c_gtk_about_dialog_get_program_name gtk_about_dialog_get_program_name;
alias c_gtk_about_dialog_get_translator_credits gtk_about_dialog_get_translator_credits;
alias c_gtk_about_dialog_get_version gtk_about_dialog_get_version;
alias c_gtk_about_dialog_get_website gtk_about_dialog_get_website;
alias c_gtk_about_dialog_get_website_label gtk_about_dialog_get_website_label;
alias c_gtk_about_dialog_get_wrap_license gtk_about_dialog_get_wrap_license;
alias c_gtk_about_dialog_set_artists gtk_about_dialog_set_artists;
alias c_gtk_about_dialog_set_authors gtk_about_dialog_set_authors;
alias c_gtk_about_dialog_set_comments gtk_about_dialog_set_comments;
alias c_gtk_about_dialog_set_copyright gtk_about_dialog_set_copyright;
alias c_gtk_about_dialog_set_documenters gtk_about_dialog_set_documenters;
alias c_gtk_about_dialog_set_license gtk_about_dialog_set_license;
alias c_gtk_about_dialog_set_license_type gtk_about_dialog_set_license_type;
alias c_gtk_about_dialog_set_logo gtk_about_dialog_set_logo;
alias c_gtk_about_dialog_set_logo_icon_name gtk_about_dialog_set_logo_icon_name;
alias c_gtk_about_dialog_set_program_name gtk_about_dialog_set_program_name;
alias c_gtk_about_dialog_set_translator_credits gtk_about_dialog_set_translator_credits;
alias c_gtk_about_dialog_set_version gtk_about_dialog_set_version;
alias c_gtk_about_dialog_set_website gtk_about_dialog_set_website;
alias c_gtk_about_dialog_set_website_label gtk_about_dialog_set_website_label;
alias c_gtk_about_dialog_set_wrap_license gtk_about_dialog_set_wrap_license;
alias c_gtk_show_about_dialog gtk_show_about_dialog;

// gtk.AccelGroup

alias c_gtk_accel_group_get_type gtk_accel_group_get_type;
alias c_gtk_accel_group_new gtk_accel_group_new;
alias c_gtk_accel_group_from_accel_closure gtk_accel_group_from_accel_closure;
alias c_gtk_accel_group_activate gtk_accel_group_activate;
alias c_gtk_accel_group_connect gtk_accel_group_connect;
alias c_gtk_accel_group_connect_by_path gtk_accel_group_connect_by_path;
alias c_gtk_accel_group_disconnect gtk_accel_group_disconnect;
alias c_gtk_accel_group_disconnect_key gtk_accel_group_disconnect_key;
alias c_gtk_accel_group_find gtk_accel_group_find;
alias c_gtk_accel_group_get_is_locked gtk_accel_group_get_is_locked;
alias c_gtk_accel_group_get_modifier_mask gtk_accel_group_get_modifier_mask;
alias c_gtk_accel_group_lock gtk_accel_group_lock;
alias c_gtk_accel_group_query gtk_accel_group_query;
alias c_gtk_accel_group_unlock gtk_accel_group_unlock;
alias c_gtk_accel_groups_activate gtk_accel_groups_activate;
alias c_gtk_accel_groups_from_object gtk_accel_groups_from_object;
alias c_gtk_accelerator_get_default_mod_mask gtk_accelerator_get_default_mod_mask;
alias c_gtk_accelerator_get_label gtk_accelerator_get_label;
alias c_gtk_accelerator_get_label_with_keycode gtk_accelerator_get_label_with_keycode;
alias c_gtk_accelerator_name gtk_accelerator_name;
alias c_gtk_accelerator_name_with_keycode gtk_accelerator_name_with_keycode;
alias c_gtk_accelerator_parse gtk_accelerator_parse;
alias c_gtk_accelerator_parse_with_keycode gtk_accelerator_parse_with_keycode;
alias c_gtk_accelerator_set_default_mod_mask gtk_accelerator_set_default_mod_mask;
alias c_gtk_accelerator_valid gtk_accelerator_valid;

// gtk.AccelLabel

alias c_gtk_accel_label_get_type gtk_accel_label_get_type;
alias c_gtk_accel_label_new gtk_accel_label_new;
alias c_gtk_accel_label_get_accel gtk_accel_label_get_accel;
alias c_gtk_accel_label_get_accel_widget gtk_accel_label_get_accel_widget;
alias c_gtk_accel_label_get_accel_width gtk_accel_label_get_accel_width;
alias c_gtk_accel_label_refetch gtk_accel_label_refetch;
alias c_gtk_accel_label_set_accel gtk_accel_label_set_accel;
alias c_gtk_accel_label_set_accel_closure gtk_accel_label_set_accel_closure;
alias c_gtk_accel_label_set_accel_widget gtk_accel_label_set_accel_widget;

// gtk.AccelMap

alias c_gtk_accel_map_get_type gtk_accel_map_get_type;
alias c_gtk_accel_map_add_entry gtk_accel_map_add_entry;
alias c_gtk_accel_map_add_filter gtk_accel_map_add_filter;
alias c_gtk_accel_map_change_entry gtk_accel_map_change_entry;
alias c_gtk_accel_map_foreach gtk_accel_map_foreach;
alias c_gtk_accel_map_foreach_unfiltered gtk_accel_map_foreach_unfiltered;
alias c_gtk_accel_map_get gtk_accel_map_get;
alias c_gtk_accel_map_load gtk_accel_map_load;
alias c_gtk_accel_map_load_fd gtk_accel_map_load_fd;
alias c_gtk_accel_map_load_scanner gtk_accel_map_load_scanner;
alias c_gtk_accel_map_lock_path gtk_accel_map_lock_path;
alias c_gtk_accel_map_lookup_entry gtk_accel_map_lookup_entry;
alias c_gtk_accel_map_save gtk_accel_map_save;
alias c_gtk_accel_map_save_fd gtk_accel_map_save_fd;
alias c_gtk_accel_map_unlock_path gtk_accel_map_unlock_path;

// gtk.Accessible

alias c_gtk_accessible_get_type gtk_accessible_get_type;
alias c_gtk_accessible_connect_widget_destroyed gtk_accessible_connect_widget_destroyed;
alias c_gtk_accessible_get_widget gtk_accessible_get_widget;
alias c_gtk_accessible_set_widget gtk_accessible_set_widget;

// gtk.Action

alias c_gtk_action_get_type gtk_action_get_type;
alias c_gtk_action_new gtk_action_new;
alias c_gtk_action_activate gtk_action_activate;
alias c_gtk_action_block_activate gtk_action_block_activate;
alias c_gtk_action_connect_accelerator gtk_action_connect_accelerator;
alias c_gtk_action_create_icon gtk_action_create_icon;
alias c_gtk_action_create_menu gtk_action_create_menu;
alias c_gtk_action_create_menu_item gtk_action_create_menu_item;
alias c_gtk_action_create_tool_item gtk_action_create_tool_item;
alias c_gtk_action_disconnect_accelerator gtk_action_disconnect_accelerator;
alias c_gtk_action_get_accel_closure gtk_action_get_accel_closure;
alias c_gtk_action_get_accel_path gtk_action_get_accel_path;
alias c_gtk_action_get_always_show_image gtk_action_get_always_show_image;
alias c_gtk_action_get_gicon gtk_action_get_gicon;
alias c_gtk_action_get_icon_name gtk_action_get_icon_name;
alias c_gtk_action_get_is_important gtk_action_get_is_important;
alias c_gtk_action_get_label gtk_action_get_label;
alias c_gtk_action_get_name gtk_action_get_name;
alias c_gtk_action_get_proxies gtk_action_get_proxies;
alias c_gtk_action_get_sensitive gtk_action_get_sensitive;
alias c_gtk_action_get_short_label gtk_action_get_short_label;
alias c_gtk_action_get_stock_id gtk_action_get_stock_id;
alias c_gtk_action_get_tooltip gtk_action_get_tooltip;
alias c_gtk_action_get_visible gtk_action_get_visible;
alias c_gtk_action_get_visible_horizontal gtk_action_get_visible_horizontal;
alias c_gtk_action_get_visible_vertical gtk_action_get_visible_vertical;
alias c_gtk_action_is_sensitive gtk_action_is_sensitive;
alias c_gtk_action_is_visible gtk_action_is_visible;
alias c_gtk_action_set_accel_group gtk_action_set_accel_group;
alias c_gtk_action_set_accel_path gtk_action_set_accel_path;
alias c_gtk_action_set_always_show_image gtk_action_set_always_show_image;
alias c_gtk_action_set_gicon gtk_action_set_gicon;
alias c_gtk_action_set_icon_name gtk_action_set_icon_name;
alias c_gtk_action_set_is_important gtk_action_set_is_important;
alias c_gtk_action_set_label gtk_action_set_label;
alias c_gtk_action_set_sensitive gtk_action_set_sensitive;
alias c_gtk_action_set_short_label gtk_action_set_short_label;
alias c_gtk_action_set_stock_id gtk_action_set_stock_id;
alias c_gtk_action_set_tooltip gtk_action_set_tooltip;
alias c_gtk_action_set_visible gtk_action_set_visible;
alias c_gtk_action_set_visible_horizontal gtk_action_set_visible_horizontal;
alias c_gtk_action_set_visible_vertical gtk_action_set_visible_vertical;
alias c_gtk_action_unblock_activate gtk_action_unblock_activate;

// gtk.ActionBar

alias c_gtk_action_bar_get_type gtk_action_bar_get_type;
alias c_gtk_action_bar_new gtk_action_bar_new;
alias c_gtk_action_bar_get_center_widget gtk_action_bar_get_center_widget;
alias c_gtk_action_bar_pack_end gtk_action_bar_pack_end;
alias c_gtk_action_bar_pack_start gtk_action_bar_pack_start;
alias c_gtk_action_bar_set_center_widget gtk_action_bar_set_center_widget;

// gtk.ActionGroup

alias c_gtk_action_group_get_type gtk_action_group_get_type;
alias c_gtk_action_group_new gtk_action_group_new;
alias c_gtk_action_group_add_action gtk_action_group_add_action;
alias c_gtk_action_group_add_action_with_accel gtk_action_group_add_action_with_accel;
alias c_gtk_action_group_add_actions gtk_action_group_add_actions;
alias c_gtk_action_group_add_actions_full gtk_action_group_add_actions_full;
alias c_gtk_action_group_add_radio_actions gtk_action_group_add_radio_actions;
alias c_gtk_action_group_add_radio_actions_full gtk_action_group_add_radio_actions_full;
alias c_gtk_action_group_add_toggle_actions gtk_action_group_add_toggle_actions;
alias c_gtk_action_group_add_toggle_actions_full gtk_action_group_add_toggle_actions_full;
alias c_gtk_action_group_get_accel_group gtk_action_group_get_accel_group;
alias c_gtk_action_group_get_action gtk_action_group_get_action;
alias c_gtk_action_group_get_name gtk_action_group_get_name;
alias c_gtk_action_group_get_sensitive gtk_action_group_get_sensitive;
alias c_gtk_action_group_get_visible gtk_action_group_get_visible;
alias c_gtk_action_group_list_actions gtk_action_group_list_actions;
alias c_gtk_action_group_remove_action gtk_action_group_remove_action;
alias c_gtk_action_group_set_accel_group gtk_action_group_set_accel_group;
alias c_gtk_action_group_set_sensitive gtk_action_group_set_sensitive;
alias c_gtk_action_group_set_translate_func gtk_action_group_set_translate_func;
alias c_gtk_action_group_set_translation_domain gtk_action_group_set_translation_domain;
alias c_gtk_action_group_set_visible gtk_action_group_set_visible;
alias c_gtk_action_group_translate_string gtk_action_group_translate_string;

// gtk.Actionable

alias c_gtk_actionable_get_type gtk_actionable_get_type;
alias c_gtk_actionable_get_action_name gtk_actionable_get_action_name;
alias c_gtk_actionable_get_action_target_value gtk_actionable_get_action_target_value;
alias c_gtk_actionable_set_action_name gtk_actionable_set_action_name;
alias c_gtk_actionable_set_action_target gtk_actionable_set_action_target;
alias c_gtk_actionable_set_action_target_value gtk_actionable_set_action_target_value;
alias c_gtk_actionable_set_detailed_action_name gtk_actionable_set_detailed_action_name;

// gtk.Activatable

alias c_gtk_activatable_get_type gtk_activatable_get_type;
alias c_gtk_activatable_do_set_related_action gtk_activatable_do_set_related_action;
alias c_gtk_activatable_get_related_action gtk_activatable_get_related_action;
alias c_gtk_activatable_get_use_action_appearance gtk_activatable_get_use_action_appearance;
alias c_gtk_activatable_set_related_action gtk_activatable_set_related_action;
alias c_gtk_activatable_set_use_action_appearance gtk_activatable_set_use_action_appearance;
alias c_gtk_activatable_sync_action_properties gtk_activatable_sync_action_properties;

// gtk.Adjustment

alias c_gtk_adjustment_get_type gtk_adjustment_get_type;
alias c_gtk_adjustment_new gtk_adjustment_new;
alias c_gtk_adjustment_changed gtk_adjustment_changed;
alias c_gtk_adjustment_clamp_page gtk_adjustment_clamp_page;
alias c_gtk_adjustment_configure gtk_adjustment_configure;
alias c_gtk_adjustment_get_lower gtk_adjustment_get_lower;
alias c_gtk_adjustment_get_minimum_increment gtk_adjustment_get_minimum_increment;
alias c_gtk_adjustment_get_page_increment gtk_adjustment_get_page_increment;
alias c_gtk_adjustment_get_page_size gtk_adjustment_get_page_size;
alias c_gtk_adjustment_get_step_increment gtk_adjustment_get_step_increment;
alias c_gtk_adjustment_get_upper gtk_adjustment_get_upper;
alias c_gtk_adjustment_get_value gtk_adjustment_get_value;
alias c_gtk_adjustment_set_lower gtk_adjustment_set_lower;
alias c_gtk_adjustment_set_page_increment gtk_adjustment_set_page_increment;
alias c_gtk_adjustment_set_page_size gtk_adjustment_set_page_size;
alias c_gtk_adjustment_set_step_increment gtk_adjustment_set_step_increment;
alias c_gtk_adjustment_set_upper gtk_adjustment_set_upper;
alias c_gtk_adjustment_set_value gtk_adjustment_set_value;
alias c_gtk_adjustment_value_changed gtk_adjustment_value_changed;

// gtk.Alignment

alias c_gtk_alignment_get_type gtk_alignment_get_type;
alias c_gtk_alignment_new gtk_alignment_new;
alias c_gtk_alignment_get_padding gtk_alignment_get_padding;
alias c_gtk_alignment_set gtk_alignment_set;
alias c_gtk_alignment_set_padding gtk_alignment_set_padding;

// gtk.AppChooser

alias c_gtk_app_chooser_get_type gtk_app_chooser_get_type;
alias c_gtk_app_chooser_get_app_info gtk_app_chooser_get_app_info;
alias c_gtk_app_chooser_get_content_type gtk_app_chooser_get_content_type;
alias c_gtk_app_chooser_refresh gtk_app_chooser_refresh;

// gtk.AppChooserButton

alias c_gtk_app_chooser_button_get_type gtk_app_chooser_button_get_type;
alias c_gtk_app_chooser_button_new gtk_app_chooser_button_new;
alias c_gtk_app_chooser_button_append_custom_item gtk_app_chooser_button_append_custom_item;
alias c_gtk_app_chooser_button_append_separator gtk_app_chooser_button_append_separator;
alias c_gtk_app_chooser_button_get_heading gtk_app_chooser_button_get_heading;
alias c_gtk_app_chooser_button_get_show_default_item gtk_app_chooser_button_get_show_default_item;
alias c_gtk_app_chooser_button_get_show_dialog_item gtk_app_chooser_button_get_show_dialog_item;
alias c_gtk_app_chooser_button_set_active_custom_item gtk_app_chooser_button_set_active_custom_item;
alias c_gtk_app_chooser_button_set_heading gtk_app_chooser_button_set_heading;
alias c_gtk_app_chooser_button_set_show_default_item gtk_app_chooser_button_set_show_default_item;
alias c_gtk_app_chooser_button_set_show_dialog_item gtk_app_chooser_button_set_show_dialog_item;

// gtk.AppChooserDialog

alias c_gtk_app_chooser_dialog_get_type gtk_app_chooser_dialog_get_type;
alias c_gtk_app_chooser_dialog_new gtk_app_chooser_dialog_new;
alias c_gtk_app_chooser_dialog_new_for_content_type gtk_app_chooser_dialog_new_for_content_type;
alias c_gtk_app_chooser_dialog_get_heading gtk_app_chooser_dialog_get_heading;
alias c_gtk_app_chooser_dialog_get_widget gtk_app_chooser_dialog_get_widget;
alias c_gtk_app_chooser_dialog_set_heading gtk_app_chooser_dialog_set_heading;

// gtk.AppChooserWidget

alias c_gtk_app_chooser_widget_get_type gtk_app_chooser_widget_get_type;
alias c_gtk_app_chooser_widget_new gtk_app_chooser_widget_new;
alias c_gtk_app_chooser_widget_get_default_text gtk_app_chooser_widget_get_default_text;
alias c_gtk_app_chooser_widget_get_show_all gtk_app_chooser_widget_get_show_all;
alias c_gtk_app_chooser_widget_get_show_default gtk_app_chooser_widget_get_show_default;
alias c_gtk_app_chooser_widget_get_show_fallback gtk_app_chooser_widget_get_show_fallback;
alias c_gtk_app_chooser_widget_get_show_other gtk_app_chooser_widget_get_show_other;
alias c_gtk_app_chooser_widget_get_show_recommended gtk_app_chooser_widget_get_show_recommended;
alias c_gtk_app_chooser_widget_set_default_text gtk_app_chooser_widget_set_default_text;
alias c_gtk_app_chooser_widget_set_show_all gtk_app_chooser_widget_set_show_all;
alias c_gtk_app_chooser_widget_set_show_default gtk_app_chooser_widget_set_show_default;
alias c_gtk_app_chooser_widget_set_show_fallback gtk_app_chooser_widget_set_show_fallback;
alias c_gtk_app_chooser_widget_set_show_other gtk_app_chooser_widget_set_show_other;
alias c_gtk_app_chooser_widget_set_show_recommended gtk_app_chooser_widget_set_show_recommended;

// gtk.Application

alias c_gtk_application_get_type gtk_application_get_type;
alias c_gtk_application_new gtk_application_new;
alias c_gtk_application_add_accelerator gtk_application_add_accelerator;
alias c_gtk_application_add_window gtk_application_add_window;
alias c_gtk_application_get_accels_for_action gtk_application_get_accels_for_action;
alias c_gtk_application_get_actions_for_accel gtk_application_get_actions_for_accel;
alias c_gtk_application_get_active_window gtk_application_get_active_window;
alias c_gtk_application_get_app_menu gtk_application_get_app_menu;
alias c_gtk_application_get_menu_by_id gtk_application_get_menu_by_id;
alias c_gtk_application_get_menubar gtk_application_get_menubar;
alias c_gtk_application_get_window_by_id gtk_application_get_window_by_id;
alias c_gtk_application_get_windows gtk_application_get_windows;
alias c_gtk_application_inhibit gtk_application_inhibit;
alias c_gtk_application_is_inhibited gtk_application_is_inhibited;
alias c_gtk_application_list_action_descriptions gtk_application_list_action_descriptions;
alias c_gtk_application_prefers_app_menu gtk_application_prefers_app_menu;
alias c_gtk_application_remove_accelerator gtk_application_remove_accelerator;
alias c_gtk_application_remove_window gtk_application_remove_window;
alias c_gtk_application_set_accels_for_action gtk_application_set_accels_for_action;
alias c_gtk_application_set_app_menu gtk_application_set_app_menu;
alias c_gtk_application_set_menubar gtk_application_set_menubar;
alias c_gtk_application_uninhibit gtk_application_uninhibit;

// gtk.ApplicationWindow

alias c_gtk_application_window_get_type gtk_application_window_get_type;
alias c_gtk_application_window_new gtk_application_window_new;
alias c_gtk_application_window_get_help_overlay gtk_application_window_get_help_overlay;
alias c_gtk_application_window_get_id gtk_application_window_get_id;
alias c_gtk_application_window_get_show_menubar gtk_application_window_get_show_menubar;
alias c_gtk_application_window_set_help_overlay gtk_application_window_set_help_overlay;
alias c_gtk_application_window_set_show_menubar gtk_application_window_set_show_menubar;

// gtk.Arrow

alias c_gtk_arrow_get_type gtk_arrow_get_type;
alias c_gtk_arrow_new gtk_arrow_new;
alias c_gtk_arrow_set gtk_arrow_set;

// gtk.ArrowAccessible

alias c_gtk_arrow_accessible_get_type gtk_arrow_accessible_get_type;

// gtk.AspectFrame

alias c_gtk_aspect_frame_get_type gtk_aspect_frame_get_type;
alias c_gtk_aspect_frame_new gtk_aspect_frame_new;
alias c_gtk_aspect_frame_set gtk_aspect_frame_set;

// gtk.Assistant

alias c_gtk_assistant_get_type gtk_assistant_get_type;
alias c_gtk_assistant_new gtk_assistant_new;
alias c_gtk_assistant_add_action_widget gtk_assistant_add_action_widget;
alias c_gtk_assistant_append_page gtk_assistant_append_page;
alias c_gtk_assistant_commit gtk_assistant_commit;
alias c_gtk_assistant_get_current_page gtk_assistant_get_current_page;
alias c_gtk_assistant_get_n_pages gtk_assistant_get_n_pages;
alias c_gtk_assistant_get_nth_page gtk_assistant_get_nth_page;
alias c_gtk_assistant_get_page_complete gtk_assistant_get_page_complete;
alias c_gtk_assistant_get_page_has_padding gtk_assistant_get_page_has_padding;
alias c_gtk_assistant_get_page_header_image gtk_assistant_get_page_header_image;
alias c_gtk_assistant_get_page_side_image gtk_assistant_get_page_side_image;
alias c_gtk_assistant_get_page_title gtk_assistant_get_page_title;
alias c_gtk_assistant_get_page_type gtk_assistant_get_page_type;
alias c_gtk_assistant_insert_page gtk_assistant_insert_page;
alias c_gtk_assistant_next_page gtk_assistant_next_page;
alias c_gtk_assistant_prepend_page gtk_assistant_prepend_page;
alias c_gtk_assistant_previous_page gtk_assistant_previous_page;
alias c_gtk_assistant_remove_action_widget gtk_assistant_remove_action_widget;
alias c_gtk_assistant_remove_page gtk_assistant_remove_page;
alias c_gtk_assistant_set_current_page gtk_assistant_set_current_page;
alias c_gtk_assistant_set_forward_page_func gtk_assistant_set_forward_page_func;
alias c_gtk_assistant_set_page_complete gtk_assistant_set_page_complete;
alias c_gtk_assistant_set_page_has_padding gtk_assistant_set_page_has_padding;
alias c_gtk_assistant_set_page_header_image gtk_assistant_set_page_header_image;
alias c_gtk_assistant_set_page_side_image gtk_assistant_set_page_side_image;
alias c_gtk_assistant_set_page_title gtk_assistant_set_page_title;
alias c_gtk_assistant_set_page_type gtk_assistant_set_page_type;
alias c_gtk_assistant_update_buttons_state gtk_assistant_update_buttons_state;

// gtk.Bin

alias c_gtk_bin_get_type gtk_bin_get_type;
alias c_gtk_bin_get_child gtk_bin_get_child;

// gtk.BindingEntry

alias c_gtk_binding_entry_add_signal gtk_binding_entry_add_signal;
alias c_gtk_binding_entry_add_signal_from_string gtk_binding_entry_add_signal_from_string;
alias c_gtk_binding_entry_add_signall gtk_binding_entry_add_signall;
alias c_gtk_binding_entry_remove gtk_binding_entry_remove;
alias c_gtk_binding_entry_skip gtk_binding_entry_skip;

// gtk.BindingSet

alias c_gtk_binding_set_activate gtk_binding_set_activate;
alias c_gtk_binding_set_add_path gtk_binding_set_add_path;
alias c_gtk_binding_set_by_class gtk_binding_set_by_class;
alias c_gtk_binding_set_find gtk_binding_set_find;
alias c_gtk_binding_set_new gtk_binding_set_new;
alias c_gtk_bindings_activate gtk_bindings_activate;
alias c_gtk_bindings_activate_event gtk_bindings_activate_event;

// gtk.BooleanCellAccessible

alias c_gtk_boolean_cell_accessible_get_type gtk_boolean_cell_accessible_get_type;

// gtk.Border

alias c_gtk_border_get_type gtk_border_get_type;
alias c_gtk_border_new gtk_border_new;
alias c_gtk_border_copy gtk_border_copy;
alias c_gtk_border_free gtk_border_free;

// gtk.Box

alias c_gtk_box_get_type gtk_box_get_type;
alias c_gtk_box_new gtk_box_new;
alias c_gtk_box_get_baseline_position gtk_box_get_baseline_position;
alias c_gtk_box_get_center_widget gtk_box_get_center_widget;
alias c_gtk_box_get_homogeneous gtk_box_get_homogeneous;
alias c_gtk_box_get_spacing gtk_box_get_spacing;
alias c_gtk_box_pack_end gtk_box_pack_end;
alias c_gtk_box_pack_start gtk_box_pack_start;
alias c_gtk_box_query_child_packing gtk_box_query_child_packing;
alias c_gtk_box_reorder_child gtk_box_reorder_child;
alias c_gtk_box_set_baseline_position gtk_box_set_baseline_position;
alias c_gtk_box_set_center_widget gtk_box_set_center_widget;
alias c_gtk_box_set_child_packing gtk_box_set_child_packing;
alias c_gtk_box_set_homogeneous gtk_box_set_homogeneous;
alias c_gtk_box_set_spacing gtk_box_set_spacing;

// gtk.Buildable

alias c_gtk_buildable_get_type gtk_buildable_get_type;
alias c_gtk_buildable_add_child gtk_buildable_add_child;
alias c_gtk_buildable_construct_child gtk_buildable_construct_child;
alias c_gtk_buildable_custom_finished gtk_buildable_custom_finished;
alias c_gtk_buildable_custom_tag_end gtk_buildable_custom_tag_end;
alias c_gtk_buildable_custom_tag_start gtk_buildable_custom_tag_start;
alias c_gtk_buildable_get_internal_child gtk_buildable_get_internal_child;
alias c_gtk_buildable_get_name gtk_buildable_get_name;
alias c_gtk_buildable_parser_finished gtk_buildable_parser_finished;
alias c_gtk_buildable_set_buildable_property gtk_buildable_set_buildable_property;
alias c_gtk_buildable_set_name gtk_buildable_set_name;

// gtk.Builder

alias c_gtk_builder_get_type gtk_builder_get_type;
alias c_gtk_builder_new gtk_builder_new;
alias c_gtk_builder_new_from_file gtk_builder_new_from_file;
alias c_gtk_builder_new_from_resource gtk_builder_new_from_resource;
alias c_gtk_builder_new_from_string gtk_builder_new_from_string;
alias c_gtk_builder_add_callback_symbol gtk_builder_add_callback_symbol;
alias c_gtk_builder_add_callback_symbols gtk_builder_add_callback_symbols;
alias c_gtk_builder_add_from_file gtk_builder_add_from_file;
alias c_gtk_builder_add_from_resource gtk_builder_add_from_resource;
alias c_gtk_builder_add_from_string gtk_builder_add_from_string;
alias c_gtk_builder_add_objects_from_file gtk_builder_add_objects_from_file;
alias c_gtk_builder_add_objects_from_resource gtk_builder_add_objects_from_resource;
alias c_gtk_builder_add_objects_from_string gtk_builder_add_objects_from_string;
alias c_gtk_builder_connect_signals gtk_builder_connect_signals;
alias c_gtk_builder_connect_signals_full gtk_builder_connect_signals_full;
alias c_gtk_builder_expose_object gtk_builder_expose_object;
alias c_gtk_builder_extend_with_template gtk_builder_extend_with_template;
alias c_gtk_builder_get_application gtk_builder_get_application;
alias c_gtk_builder_get_object gtk_builder_get_object;
alias c_gtk_builder_get_objects gtk_builder_get_objects;
alias c_gtk_builder_get_translation_domain gtk_builder_get_translation_domain;
alias c_gtk_builder_get_type_from_name gtk_builder_get_type_from_name;
alias c_gtk_builder_lookup_callback_symbol gtk_builder_lookup_callback_symbol;
alias c_gtk_builder_set_application gtk_builder_set_application;
alias c_gtk_builder_set_translation_domain gtk_builder_set_translation_domain;
alias c_gtk_builder_value_from_string gtk_builder_value_from_string;
alias c_gtk_builder_value_from_string_type gtk_builder_value_from_string_type;

// gtk.Button

alias c_gtk_button_get_type gtk_button_get_type;
alias c_gtk_button_new gtk_button_new;
alias c_gtk_button_new_from_icon_name gtk_button_new_from_icon_name;
alias c_gtk_button_new_from_stock gtk_button_new_from_stock;
alias c_gtk_button_new_with_label gtk_button_new_with_label;
alias c_gtk_button_new_with_mnemonic gtk_button_new_with_mnemonic;
alias c_gtk_button_clicked gtk_button_clicked;
alias c_gtk_button_enter gtk_button_enter;
alias c_gtk_button_get_alignment gtk_button_get_alignment;
alias c_gtk_button_get_always_show_image gtk_button_get_always_show_image;
alias c_gtk_button_get_event_window gtk_button_get_event_window;
alias c_gtk_button_get_focus_on_click gtk_button_get_focus_on_click;
alias c_gtk_button_get_image gtk_button_get_image;
alias c_gtk_button_get_image_position gtk_button_get_image_position;
alias c_gtk_button_get_label gtk_button_get_label;
alias c_gtk_button_get_relief gtk_button_get_relief;
alias c_gtk_button_get_use_stock gtk_button_get_use_stock;
alias c_gtk_button_get_use_underline gtk_button_get_use_underline;
alias c_gtk_button_leave gtk_button_leave;
alias c_gtk_button_pressed gtk_button_pressed;
alias c_gtk_button_released gtk_button_released;
alias c_gtk_button_set_alignment gtk_button_set_alignment;
alias c_gtk_button_set_always_show_image gtk_button_set_always_show_image;
alias c_gtk_button_set_focus_on_click gtk_button_set_focus_on_click;
alias c_gtk_button_set_image gtk_button_set_image;
alias c_gtk_button_set_image_position gtk_button_set_image_position;
alias c_gtk_button_set_label gtk_button_set_label;
alias c_gtk_button_set_relief gtk_button_set_relief;
alias c_gtk_button_set_use_stock gtk_button_set_use_stock;
alias c_gtk_button_set_use_underline gtk_button_set_use_underline;

// gtk.ButtonAccessible

alias c_gtk_button_accessible_get_type gtk_button_accessible_get_type;

// gtk.ButtonBox

alias c_gtk_button_box_get_type gtk_button_box_get_type;
alias c_gtk_button_box_new gtk_button_box_new;
alias c_gtk_button_box_get_child_non_homogeneous gtk_button_box_get_child_non_homogeneous;
alias c_gtk_button_box_get_child_secondary gtk_button_box_get_child_secondary;
alias c_gtk_button_box_get_layout gtk_button_box_get_layout;
alias c_gtk_button_box_set_child_non_homogeneous gtk_button_box_set_child_non_homogeneous;
alias c_gtk_button_box_set_child_secondary gtk_button_box_set_child_secondary;
alias c_gtk_button_box_set_layout gtk_button_box_set_layout;

// gtk.Calendar

alias c_gtk_calendar_get_type gtk_calendar_get_type;
alias c_gtk_calendar_new gtk_calendar_new;
alias c_gtk_calendar_clear_marks gtk_calendar_clear_marks;
alias c_gtk_calendar_get_date gtk_calendar_get_date;
alias c_gtk_calendar_get_day_is_marked gtk_calendar_get_day_is_marked;
alias c_gtk_calendar_get_detail_height_rows gtk_calendar_get_detail_height_rows;
alias c_gtk_calendar_get_detail_width_chars gtk_calendar_get_detail_width_chars;
alias c_gtk_calendar_get_display_options gtk_calendar_get_display_options;
alias c_gtk_calendar_mark_day gtk_calendar_mark_day;
alias c_gtk_calendar_select_day gtk_calendar_select_day;
alias c_gtk_calendar_select_month gtk_calendar_select_month;
alias c_gtk_calendar_set_detail_func gtk_calendar_set_detail_func;
alias c_gtk_calendar_set_detail_height_rows gtk_calendar_set_detail_height_rows;
alias c_gtk_calendar_set_detail_width_chars gtk_calendar_set_detail_width_chars;
alias c_gtk_calendar_set_display_options gtk_calendar_set_display_options;
alias c_gtk_calendar_unmark_day gtk_calendar_unmark_day;

// gtk.CellAccessible

alias c_gtk_cell_accessible_get_type gtk_cell_accessible_get_type;

// gtk.CellAccessibleParent

alias c_gtk_cell_accessible_parent_get_type gtk_cell_accessible_parent_get_type;
alias c_gtk_cell_accessible_parent_activate gtk_cell_accessible_parent_activate;
alias c_gtk_cell_accessible_parent_edit gtk_cell_accessible_parent_edit;
alias c_gtk_cell_accessible_parent_expand_collapse gtk_cell_accessible_parent_expand_collapse;
alias c_gtk_cell_accessible_parent_get_cell_area gtk_cell_accessible_parent_get_cell_area;
alias c_gtk_cell_accessible_parent_get_cell_extents gtk_cell_accessible_parent_get_cell_extents;
alias c_gtk_cell_accessible_parent_get_child_index gtk_cell_accessible_parent_get_child_index;
alias c_gtk_cell_accessible_parent_get_renderer_state gtk_cell_accessible_parent_get_renderer_state;
alias c_gtk_cell_accessible_parent_grab_focus gtk_cell_accessible_parent_grab_focus;
alias c_gtk_cell_accessible_parent_update_relationset gtk_cell_accessible_parent_update_relationset;

// gtk.CellArea

alias c_gtk_cell_area_get_type gtk_cell_area_get_type;
alias c_gtk_cell_area_activate gtk_cell_area_activate;
alias c_gtk_cell_area_activate_cell gtk_cell_area_activate_cell;
alias c_gtk_cell_area_add gtk_cell_area_add;
alias c_gtk_cell_area_add_focus_sibling gtk_cell_area_add_focus_sibling;
alias c_gtk_cell_area_add_with_properties gtk_cell_area_add_with_properties;
alias c_gtk_cell_area_apply_attributes gtk_cell_area_apply_attributes;
alias c_gtk_cell_area_attribute_connect gtk_cell_area_attribute_connect;
alias c_gtk_cell_area_attribute_disconnect gtk_cell_area_attribute_disconnect;
alias c_gtk_cell_area_attribute_get_column gtk_cell_area_attribute_get_column;
alias c_gtk_cell_area_cell_get gtk_cell_area_cell_get;
alias c_gtk_cell_area_cell_get_property gtk_cell_area_cell_get_property;
alias c_gtk_cell_area_cell_get_valist gtk_cell_area_cell_get_valist;
alias c_gtk_cell_area_cell_set gtk_cell_area_cell_set;
alias c_gtk_cell_area_cell_set_property gtk_cell_area_cell_set_property;
alias c_gtk_cell_area_cell_set_valist gtk_cell_area_cell_set_valist;
alias c_gtk_cell_area_copy_context gtk_cell_area_copy_context;
alias c_gtk_cell_area_create_context gtk_cell_area_create_context;
alias c_gtk_cell_area_event gtk_cell_area_event;
alias c_gtk_cell_area_focus gtk_cell_area_focus;
alias c_gtk_cell_area_foreach gtk_cell_area_foreach;
alias c_gtk_cell_area_foreach_alloc gtk_cell_area_foreach_alloc;
alias c_gtk_cell_area_get_cell_allocation gtk_cell_area_get_cell_allocation;
alias c_gtk_cell_area_get_cell_at_position gtk_cell_area_get_cell_at_position;
alias c_gtk_cell_area_get_current_path_string gtk_cell_area_get_current_path_string;
alias c_gtk_cell_area_get_edit_widget gtk_cell_area_get_edit_widget;
alias c_gtk_cell_area_get_edited_cell gtk_cell_area_get_edited_cell;
alias c_gtk_cell_area_get_focus_cell gtk_cell_area_get_focus_cell;
alias c_gtk_cell_area_get_focus_from_sibling gtk_cell_area_get_focus_from_sibling;
alias c_gtk_cell_area_get_focus_siblings gtk_cell_area_get_focus_siblings;
alias c_gtk_cell_area_get_preferred_height gtk_cell_area_get_preferred_height;
alias c_gtk_cell_area_get_preferred_height_for_width gtk_cell_area_get_preferred_height_for_width;
alias c_gtk_cell_area_get_preferred_width gtk_cell_area_get_preferred_width;
alias c_gtk_cell_area_get_preferred_width_for_height gtk_cell_area_get_preferred_width_for_height;
alias c_gtk_cell_area_get_request_mode gtk_cell_area_get_request_mode;
alias c_gtk_cell_area_has_renderer gtk_cell_area_has_renderer;
alias c_gtk_cell_area_inner_cell_area gtk_cell_area_inner_cell_area;
alias c_gtk_cell_area_is_activatable gtk_cell_area_is_activatable;
alias c_gtk_cell_area_is_focus_sibling gtk_cell_area_is_focus_sibling;
alias c_gtk_cell_area_remove gtk_cell_area_remove;
alias c_gtk_cell_area_remove_focus_sibling gtk_cell_area_remove_focus_sibling;
alias c_gtk_cell_area_render gtk_cell_area_render;
alias c_gtk_cell_area_request_renderer gtk_cell_area_request_renderer;
alias c_gtk_cell_area_set_focus_cell gtk_cell_area_set_focus_cell;
alias c_gtk_cell_area_stop_editing gtk_cell_area_stop_editing;

// gtk.CellAreaBox

alias c_gtk_cell_area_box_get_type gtk_cell_area_box_get_type;
alias c_gtk_cell_area_box_new gtk_cell_area_box_new;
alias c_gtk_cell_area_box_get_spacing gtk_cell_area_box_get_spacing;
alias c_gtk_cell_area_box_pack_end gtk_cell_area_box_pack_end;
alias c_gtk_cell_area_box_pack_start gtk_cell_area_box_pack_start;
alias c_gtk_cell_area_box_set_spacing gtk_cell_area_box_set_spacing;

// gtk.CellAreaClass

alias c_gtk_cell_area_class_find_cell_property gtk_cell_area_class_find_cell_property;
alias c_gtk_cell_area_class_install_cell_property gtk_cell_area_class_install_cell_property;
alias c_gtk_cell_area_class_list_cell_properties gtk_cell_area_class_list_cell_properties;

// gtk.CellAreaContext

alias c_gtk_cell_area_context_get_type gtk_cell_area_context_get_type;
alias c_gtk_cell_area_context_allocate gtk_cell_area_context_allocate;
alias c_gtk_cell_area_context_get_allocation gtk_cell_area_context_get_allocation;
alias c_gtk_cell_area_context_get_area gtk_cell_area_context_get_area;
alias c_gtk_cell_area_context_get_preferred_height gtk_cell_area_context_get_preferred_height;
alias c_gtk_cell_area_context_get_preferred_height_for_width gtk_cell_area_context_get_preferred_height_for_width;
alias c_gtk_cell_area_context_get_preferred_width gtk_cell_area_context_get_preferred_width;
alias c_gtk_cell_area_context_get_preferred_width_for_height gtk_cell_area_context_get_preferred_width_for_height;
alias c_gtk_cell_area_context_push_preferred_height gtk_cell_area_context_push_preferred_height;
alias c_gtk_cell_area_context_push_preferred_width gtk_cell_area_context_push_preferred_width;
alias c_gtk_cell_area_context_reset gtk_cell_area_context_reset;

// gtk.CellEditable

alias c_gtk_cell_editable_get_type gtk_cell_editable_get_type;
alias c_gtk_cell_editable_editing_done gtk_cell_editable_editing_done;
alias c_gtk_cell_editable_remove_widget gtk_cell_editable_remove_widget;
alias c_gtk_cell_editable_start_editing gtk_cell_editable_start_editing;

// gtk.CellLayout

alias c_gtk_cell_layout_get_type gtk_cell_layout_get_type;
alias c_gtk_cell_layout_add_attribute gtk_cell_layout_add_attribute;
alias c_gtk_cell_layout_clear gtk_cell_layout_clear;
alias c_gtk_cell_layout_clear_attributes gtk_cell_layout_clear_attributes;
alias c_gtk_cell_layout_get_area gtk_cell_layout_get_area;
alias c_gtk_cell_layout_get_cells gtk_cell_layout_get_cells;
alias c_gtk_cell_layout_pack_end gtk_cell_layout_pack_end;
alias c_gtk_cell_layout_pack_start gtk_cell_layout_pack_start;
alias c_gtk_cell_layout_reorder gtk_cell_layout_reorder;
alias c_gtk_cell_layout_set_attributes gtk_cell_layout_set_attributes;
alias c_gtk_cell_layout_set_cell_data_func gtk_cell_layout_set_cell_data_func;

// gtk.CellRenderer

alias c_gtk_cell_renderer_get_type gtk_cell_renderer_get_type;
alias c_gtk_cell_renderer_activate gtk_cell_renderer_activate;
alias c_gtk_cell_renderer_get_aligned_area gtk_cell_renderer_get_aligned_area;
alias c_gtk_cell_renderer_get_alignment gtk_cell_renderer_get_alignment;
alias c_gtk_cell_renderer_get_fixed_size gtk_cell_renderer_get_fixed_size;
alias c_gtk_cell_renderer_get_padding gtk_cell_renderer_get_padding;
alias c_gtk_cell_renderer_get_preferred_height gtk_cell_renderer_get_preferred_height;
alias c_gtk_cell_renderer_get_preferred_height_for_width gtk_cell_renderer_get_preferred_height_for_width;
alias c_gtk_cell_renderer_get_preferred_size gtk_cell_renderer_get_preferred_size;
alias c_gtk_cell_renderer_get_preferred_width gtk_cell_renderer_get_preferred_width;
alias c_gtk_cell_renderer_get_preferred_width_for_height gtk_cell_renderer_get_preferred_width_for_height;
alias c_gtk_cell_renderer_get_request_mode gtk_cell_renderer_get_request_mode;
alias c_gtk_cell_renderer_get_sensitive gtk_cell_renderer_get_sensitive;
alias c_gtk_cell_renderer_get_size gtk_cell_renderer_get_size;
alias c_gtk_cell_renderer_get_state gtk_cell_renderer_get_state;
alias c_gtk_cell_renderer_get_visible gtk_cell_renderer_get_visible;
alias c_gtk_cell_renderer_is_activatable gtk_cell_renderer_is_activatable;
alias c_gtk_cell_renderer_render gtk_cell_renderer_render;
alias c_gtk_cell_renderer_set_alignment gtk_cell_renderer_set_alignment;
alias c_gtk_cell_renderer_set_fixed_size gtk_cell_renderer_set_fixed_size;
alias c_gtk_cell_renderer_set_padding gtk_cell_renderer_set_padding;
alias c_gtk_cell_renderer_set_sensitive gtk_cell_renderer_set_sensitive;
alias c_gtk_cell_renderer_set_visible gtk_cell_renderer_set_visible;
alias c_gtk_cell_renderer_start_editing gtk_cell_renderer_start_editing;
alias c_gtk_cell_renderer_stop_editing gtk_cell_renderer_stop_editing;

// gtk.CellRendererAccel

alias c_gtk_cell_renderer_accel_get_type gtk_cell_renderer_accel_get_type;
alias c_gtk_cell_renderer_accel_new gtk_cell_renderer_accel_new;

// gtk.CellRendererClass

alias c_gtk_cell_renderer_class_set_accessible_type gtk_cell_renderer_class_set_accessible_type;

// gtk.CellRendererCombo

alias c_gtk_cell_renderer_combo_get_type gtk_cell_renderer_combo_get_type;
alias c_gtk_cell_renderer_combo_new gtk_cell_renderer_combo_new;

// gtk.CellRendererPixbuf

alias c_gtk_cell_renderer_pixbuf_get_type gtk_cell_renderer_pixbuf_get_type;
alias c_gtk_cell_renderer_pixbuf_new gtk_cell_renderer_pixbuf_new;

// gtk.CellRendererProgress

alias c_gtk_cell_renderer_progress_get_type gtk_cell_renderer_progress_get_type;
alias c_gtk_cell_renderer_progress_new gtk_cell_renderer_progress_new;

// gtk.CellRendererSpin

alias c_gtk_cell_renderer_spin_get_type gtk_cell_renderer_spin_get_type;
alias c_gtk_cell_renderer_spin_new gtk_cell_renderer_spin_new;

// gtk.CellRendererSpinner

alias c_gtk_cell_renderer_spinner_get_type gtk_cell_renderer_spinner_get_type;
alias c_gtk_cell_renderer_spinner_new gtk_cell_renderer_spinner_new;

// gtk.CellRendererText

alias c_gtk_cell_renderer_text_get_type gtk_cell_renderer_text_get_type;
alias c_gtk_cell_renderer_text_new gtk_cell_renderer_text_new;
alias c_gtk_cell_renderer_text_set_fixed_height_from_font gtk_cell_renderer_text_set_fixed_height_from_font;

// gtk.CellRendererToggle

alias c_gtk_cell_renderer_toggle_get_type gtk_cell_renderer_toggle_get_type;
alias c_gtk_cell_renderer_toggle_new gtk_cell_renderer_toggle_new;
alias c_gtk_cell_renderer_toggle_get_activatable gtk_cell_renderer_toggle_get_activatable;
alias c_gtk_cell_renderer_toggle_get_active gtk_cell_renderer_toggle_get_active;
alias c_gtk_cell_renderer_toggle_get_radio gtk_cell_renderer_toggle_get_radio;
alias c_gtk_cell_renderer_toggle_set_activatable gtk_cell_renderer_toggle_set_activatable;
alias c_gtk_cell_renderer_toggle_set_active gtk_cell_renderer_toggle_set_active;
alias c_gtk_cell_renderer_toggle_set_radio gtk_cell_renderer_toggle_set_radio;

// gtk.CellView

alias c_gtk_cell_view_get_type gtk_cell_view_get_type;
alias c_gtk_cell_view_new gtk_cell_view_new;
alias c_gtk_cell_view_new_with_context gtk_cell_view_new_with_context;
alias c_gtk_cell_view_new_with_markup gtk_cell_view_new_with_markup;
alias c_gtk_cell_view_new_with_pixbuf gtk_cell_view_new_with_pixbuf;
alias c_gtk_cell_view_new_with_text gtk_cell_view_new_with_text;
alias c_gtk_cell_view_get_displayed_row gtk_cell_view_get_displayed_row;
alias c_gtk_cell_view_get_draw_sensitive gtk_cell_view_get_draw_sensitive;
alias c_gtk_cell_view_get_fit_model gtk_cell_view_get_fit_model;
alias c_gtk_cell_view_get_model gtk_cell_view_get_model;
alias c_gtk_cell_view_get_size_of_row gtk_cell_view_get_size_of_row;
alias c_gtk_cell_view_set_background_color gtk_cell_view_set_background_color;
alias c_gtk_cell_view_set_background_rgba gtk_cell_view_set_background_rgba;
alias c_gtk_cell_view_set_displayed_row gtk_cell_view_set_displayed_row;
alias c_gtk_cell_view_set_draw_sensitive gtk_cell_view_set_draw_sensitive;
alias c_gtk_cell_view_set_fit_model gtk_cell_view_set_fit_model;
alias c_gtk_cell_view_set_model gtk_cell_view_set_model;

// gtk.CheckButton

alias c_gtk_check_button_get_type gtk_check_button_get_type;
alias c_gtk_check_button_new gtk_check_button_new;
alias c_gtk_check_button_new_with_label gtk_check_button_new_with_label;
alias c_gtk_check_button_new_with_mnemonic gtk_check_button_new_with_mnemonic;

// gtk.CheckMenuItem

alias c_gtk_check_menu_item_get_type gtk_check_menu_item_get_type;
alias c_gtk_check_menu_item_new gtk_check_menu_item_new;
alias c_gtk_check_menu_item_new_with_label gtk_check_menu_item_new_with_label;
alias c_gtk_check_menu_item_new_with_mnemonic gtk_check_menu_item_new_with_mnemonic;
alias c_gtk_check_menu_item_get_active gtk_check_menu_item_get_active;
alias c_gtk_check_menu_item_get_draw_as_radio gtk_check_menu_item_get_draw_as_radio;
alias c_gtk_check_menu_item_get_inconsistent gtk_check_menu_item_get_inconsistent;
alias c_gtk_check_menu_item_set_active gtk_check_menu_item_set_active;
alias c_gtk_check_menu_item_set_draw_as_radio gtk_check_menu_item_set_draw_as_radio;
alias c_gtk_check_menu_item_set_inconsistent gtk_check_menu_item_set_inconsistent;
alias c_gtk_check_menu_item_toggled gtk_check_menu_item_toggled;

// gtk.CheckMenuItemAccessible

alias c_gtk_check_menu_item_accessible_get_type gtk_check_menu_item_accessible_get_type;

// gtk.Clipboard

alias c_gtk_clipboard_get_type gtk_clipboard_get_type;
alias c_gtk_clipboard_get gtk_clipboard_get;
alias c_gtk_clipboard_get_default gtk_clipboard_get_default;
alias c_gtk_clipboard_get_for_display gtk_clipboard_get_for_display;
alias c_gtk_clipboard_clear gtk_clipboard_clear;
alias c_gtk_clipboard_get_display gtk_clipboard_get_display;
alias c_gtk_clipboard_get_owner gtk_clipboard_get_owner;
alias c_gtk_clipboard_get_selection gtk_clipboard_get_selection;
alias c_gtk_clipboard_request_contents gtk_clipboard_request_contents;
alias c_gtk_clipboard_request_image gtk_clipboard_request_image;
alias c_gtk_clipboard_request_rich_text gtk_clipboard_request_rich_text;
alias c_gtk_clipboard_request_targets gtk_clipboard_request_targets;
alias c_gtk_clipboard_request_text gtk_clipboard_request_text;
alias c_gtk_clipboard_request_uris gtk_clipboard_request_uris;
alias c_gtk_clipboard_set_can_store gtk_clipboard_set_can_store;
alias c_gtk_clipboard_set_image gtk_clipboard_set_image;
alias c_gtk_clipboard_set_text gtk_clipboard_set_text;
alias c_gtk_clipboard_set_with_data gtk_clipboard_set_with_data;
alias c_gtk_clipboard_set_with_owner gtk_clipboard_set_with_owner;
alias c_gtk_clipboard_store gtk_clipboard_store;
alias c_gtk_clipboard_wait_for_contents gtk_clipboard_wait_for_contents;
alias c_gtk_clipboard_wait_for_image gtk_clipboard_wait_for_image;
alias c_gtk_clipboard_wait_for_rich_text gtk_clipboard_wait_for_rich_text;
alias c_gtk_clipboard_wait_for_targets gtk_clipboard_wait_for_targets;
alias c_gtk_clipboard_wait_for_text gtk_clipboard_wait_for_text;
alias c_gtk_clipboard_wait_for_uris gtk_clipboard_wait_for_uris;
alias c_gtk_clipboard_wait_is_image_available gtk_clipboard_wait_is_image_available;
alias c_gtk_clipboard_wait_is_rich_text_available gtk_clipboard_wait_is_rich_text_available;
alias c_gtk_clipboard_wait_is_target_available gtk_clipboard_wait_is_target_available;
alias c_gtk_clipboard_wait_is_text_available gtk_clipboard_wait_is_text_available;
alias c_gtk_clipboard_wait_is_uris_available gtk_clipboard_wait_is_uris_available;

// gtk.ColorButton

alias c_gtk_color_button_get_type gtk_color_button_get_type;
alias c_gtk_color_button_new gtk_color_button_new;
alias c_gtk_color_button_new_with_color gtk_color_button_new_with_color;
alias c_gtk_color_button_new_with_rgba gtk_color_button_new_with_rgba;
alias c_gtk_color_button_get_alpha gtk_color_button_get_alpha;
alias c_gtk_color_button_get_color gtk_color_button_get_color;
alias c_gtk_color_button_get_rgba gtk_color_button_get_rgba;
alias c_gtk_color_button_get_title gtk_color_button_get_title;
alias c_gtk_color_button_get_use_alpha gtk_color_button_get_use_alpha;
alias c_gtk_color_button_set_alpha gtk_color_button_set_alpha;
alias c_gtk_color_button_set_color gtk_color_button_set_color;
alias c_gtk_color_button_set_rgba gtk_color_button_set_rgba;
alias c_gtk_color_button_set_title gtk_color_button_set_title;
alias c_gtk_color_button_set_use_alpha gtk_color_button_set_use_alpha;

// gtk.ColorChooser

alias c_gtk_color_chooser_get_type gtk_color_chooser_get_type;
alias c_gtk_color_chooser_add_palette gtk_color_chooser_add_palette;
alias c_gtk_color_chooser_get_rgba gtk_color_chooser_get_rgba;
alias c_gtk_color_chooser_get_use_alpha gtk_color_chooser_get_use_alpha;
alias c_gtk_color_chooser_set_rgba gtk_color_chooser_set_rgba;
alias c_gtk_color_chooser_set_use_alpha gtk_color_chooser_set_use_alpha;

// gtk.ColorChooserDialog

alias c_gtk_color_chooser_dialog_get_type gtk_color_chooser_dialog_get_type;
alias c_gtk_color_chooser_dialog_new gtk_color_chooser_dialog_new;

// gtk.ColorChooserWidget

alias c_gtk_color_chooser_widget_get_type gtk_color_chooser_widget_get_type;
alias c_gtk_color_chooser_widget_new gtk_color_chooser_widget_new;

// gtk.ColorSelection

alias c_gtk_color_selection_get_type gtk_color_selection_get_type;
alias c_gtk_color_selection_new gtk_color_selection_new;
alias c_gtk_color_selection_palette_from_string gtk_color_selection_palette_from_string;
alias c_gtk_color_selection_palette_to_string gtk_color_selection_palette_to_string;
alias c_gtk_color_selection_set_change_palette_with_screen_hook gtk_color_selection_set_change_palette_with_screen_hook;
alias c_gtk_color_selection_get_current_alpha gtk_color_selection_get_current_alpha;
alias c_gtk_color_selection_get_current_color gtk_color_selection_get_current_color;
alias c_gtk_color_selection_get_current_rgba gtk_color_selection_get_current_rgba;
alias c_gtk_color_selection_get_has_opacity_control gtk_color_selection_get_has_opacity_control;
alias c_gtk_color_selection_get_has_palette gtk_color_selection_get_has_palette;
alias c_gtk_color_selection_get_previous_alpha gtk_color_selection_get_previous_alpha;
alias c_gtk_color_selection_get_previous_color gtk_color_selection_get_previous_color;
alias c_gtk_color_selection_get_previous_rgba gtk_color_selection_get_previous_rgba;
alias c_gtk_color_selection_is_adjusting gtk_color_selection_is_adjusting;
alias c_gtk_color_selection_set_current_alpha gtk_color_selection_set_current_alpha;
alias c_gtk_color_selection_set_current_color gtk_color_selection_set_current_color;
alias c_gtk_color_selection_set_current_rgba gtk_color_selection_set_current_rgba;
alias c_gtk_color_selection_set_has_opacity_control gtk_color_selection_set_has_opacity_control;
alias c_gtk_color_selection_set_has_palette gtk_color_selection_set_has_palette;
alias c_gtk_color_selection_set_previous_alpha gtk_color_selection_set_previous_alpha;
alias c_gtk_color_selection_set_previous_color gtk_color_selection_set_previous_color;
alias c_gtk_color_selection_set_previous_rgba gtk_color_selection_set_previous_rgba;

// gtk.ColorSelectionDialog

alias c_gtk_color_selection_dialog_get_type gtk_color_selection_dialog_get_type;
alias c_gtk_color_selection_dialog_new gtk_color_selection_dialog_new;
alias c_gtk_color_selection_dialog_get_color_selection gtk_color_selection_dialog_get_color_selection;

// gtk.ComboBox

alias c_gtk_combo_box_get_type gtk_combo_box_get_type;
alias c_gtk_combo_box_new gtk_combo_box_new;
alias c_gtk_combo_box_new_with_area gtk_combo_box_new_with_area;
alias c_gtk_combo_box_new_with_area_and_entry gtk_combo_box_new_with_area_and_entry;
alias c_gtk_combo_box_new_with_entry gtk_combo_box_new_with_entry;
alias c_gtk_combo_box_new_with_model gtk_combo_box_new_with_model;
alias c_gtk_combo_box_new_with_model_and_entry gtk_combo_box_new_with_model_and_entry;
alias c_gtk_combo_box_get_active gtk_combo_box_get_active;
alias c_gtk_combo_box_get_active_id gtk_combo_box_get_active_id;
alias c_gtk_combo_box_get_active_iter gtk_combo_box_get_active_iter;
alias c_gtk_combo_box_get_add_tearoffs gtk_combo_box_get_add_tearoffs;
alias c_gtk_combo_box_get_button_sensitivity gtk_combo_box_get_button_sensitivity;
alias c_gtk_combo_box_get_column_span_column gtk_combo_box_get_column_span_column;
alias c_gtk_combo_box_get_entry_text_column gtk_combo_box_get_entry_text_column;
alias c_gtk_combo_box_get_focus_on_click gtk_combo_box_get_focus_on_click;
alias c_gtk_combo_box_get_has_entry gtk_combo_box_get_has_entry;
alias c_gtk_combo_box_get_id_column gtk_combo_box_get_id_column;
alias c_gtk_combo_box_get_model gtk_combo_box_get_model;
alias c_gtk_combo_box_get_popup_accessible gtk_combo_box_get_popup_accessible;
alias c_gtk_combo_box_get_popup_fixed_width gtk_combo_box_get_popup_fixed_width;
alias c_gtk_combo_box_get_row_separator_func gtk_combo_box_get_row_separator_func;
alias c_gtk_combo_box_get_row_span_column gtk_combo_box_get_row_span_column;
alias c_gtk_combo_box_get_title gtk_combo_box_get_title;
alias c_gtk_combo_box_get_wrap_width gtk_combo_box_get_wrap_width;
alias c_gtk_combo_box_popdown gtk_combo_box_popdown;
alias c_gtk_combo_box_popup gtk_combo_box_popup;
alias c_gtk_combo_box_popup_for_device gtk_combo_box_popup_for_device;
alias c_gtk_combo_box_set_active gtk_combo_box_set_active;
alias c_gtk_combo_box_set_active_id gtk_combo_box_set_active_id;
alias c_gtk_combo_box_set_active_iter gtk_combo_box_set_active_iter;
alias c_gtk_combo_box_set_add_tearoffs gtk_combo_box_set_add_tearoffs;
alias c_gtk_combo_box_set_button_sensitivity gtk_combo_box_set_button_sensitivity;
alias c_gtk_combo_box_set_column_span_column gtk_combo_box_set_column_span_column;
alias c_gtk_combo_box_set_entry_text_column gtk_combo_box_set_entry_text_column;
alias c_gtk_combo_box_set_focus_on_click gtk_combo_box_set_focus_on_click;
alias c_gtk_combo_box_set_id_column gtk_combo_box_set_id_column;
alias c_gtk_combo_box_set_model gtk_combo_box_set_model;
alias c_gtk_combo_box_set_popup_fixed_width gtk_combo_box_set_popup_fixed_width;
alias c_gtk_combo_box_set_row_separator_func gtk_combo_box_set_row_separator_func;
alias c_gtk_combo_box_set_row_span_column gtk_combo_box_set_row_span_column;
alias c_gtk_combo_box_set_title gtk_combo_box_set_title;
alias c_gtk_combo_box_set_wrap_width gtk_combo_box_set_wrap_width;

// gtk.ComboBoxAccessible

alias c_gtk_combo_box_accessible_get_type gtk_combo_box_accessible_get_type;

// gtk.ComboBoxText

alias c_gtk_combo_box_text_get_type gtk_combo_box_text_get_type;
alias c_gtk_combo_box_text_new gtk_combo_box_text_new;
alias c_gtk_combo_box_text_new_with_entry gtk_combo_box_text_new_with_entry;
alias c_gtk_combo_box_text_append gtk_combo_box_text_append;
alias c_gtk_combo_box_text_append_text gtk_combo_box_text_append_text;
alias c_gtk_combo_box_text_get_active_text gtk_combo_box_text_get_active_text;
alias c_gtk_combo_box_text_insert gtk_combo_box_text_insert;
alias c_gtk_combo_box_text_insert_text gtk_combo_box_text_insert_text;
alias c_gtk_combo_box_text_prepend gtk_combo_box_text_prepend;
alias c_gtk_combo_box_text_prepend_text gtk_combo_box_text_prepend_text;
alias c_gtk_combo_box_text_remove gtk_combo_box_text_remove;
alias c_gtk_combo_box_text_remove_all gtk_combo_box_text_remove_all;

// gtk.Container

alias c_gtk_container_get_type gtk_container_get_type;
alias c_gtk_container_add gtk_container_add;
alias c_gtk_container_add_with_properties gtk_container_add_with_properties;
alias c_gtk_container_check_resize gtk_container_check_resize;
alias c_gtk_container_child_get gtk_container_child_get;
alias c_gtk_container_child_get_property gtk_container_child_get_property;
alias c_gtk_container_child_get_valist gtk_container_child_get_valist;
alias c_gtk_container_child_notify gtk_container_child_notify;
alias c_gtk_container_child_notify_by_pspec gtk_container_child_notify_by_pspec;
alias c_gtk_container_child_set gtk_container_child_set;
alias c_gtk_container_child_set_property gtk_container_child_set_property;
alias c_gtk_container_child_set_valist gtk_container_child_set_valist;
alias c_gtk_container_child_type gtk_container_child_type;
alias c_gtk_container_forall gtk_container_forall;
alias c_gtk_container_foreach gtk_container_foreach;
alias c_gtk_container_get_border_width gtk_container_get_border_width;
alias c_gtk_container_get_children gtk_container_get_children;
alias c_gtk_container_get_focus_chain gtk_container_get_focus_chain;
alias c_gtk_container_get_focus_child gtk_container_get_focus_child;
alias c_gtk_container_get_focus_hadjustment gtk_container_get_focus_hadjustment;
alias c_gtk_container_get_focus_vadjustment gtk_container_get_focus_vadjustment;
alias c_gtk_container_get_path_for_child gtk_container_get_path_for_child;
alias c_gtk_container_get_resize_mode gtk_container_get_resize_mode;
alias c_gtk_container_propagate_draw gtk_container_propagate_draw;
alias c_gtk_container_remove gtk_container_remove;
alias c_gtk_container_resize_children gtk_container_resize_children;
alias c_gtk_container_set_border_width gtk_container_set_border_width;
alias c_gtk_container_set_focus_chain gtk_container_set_focus_chain;
alias c_gtk_container_set_focus_child gtk_container_set_focus_child;
alias c_gtk_container_set_focus_hadjustment gtk_container_set_focus_hadjustment;
alias c_gtk_container_set_focus_vadjustment gtk_container_set_focus_vadjustment;
alias c_gtk_container_set_reallocate_redraws gtk_container_set_reallocate_redraws;
alias c_gtk_container_set_resize_mode gtk_container_set_resize_mode;
alias c_gtk_container_unset_focus_chain gtk_container_unset_focus_chain;

// gtk.ContainerAccessible

alias c_gtk_container_accessible_get_type gtk_container_accessible_get_type;

// gtk.ContainerCellAccessible

alias c_gtk_container_cell_accessible_get_type gtk_container_cell_accessible_get_type;
alias c_gtk_container_cell_accessible_new gtk_container_cell_accessible_new;
alias c_gtk_container_cell_accessible_add_child gtk_container_cell_accessible_add_child;
alias c_gtk_container_cell_accessible_get_children gtk_container_cell_accessible_get_children;
alias c_gtk_container_cell_accessible_remove_child gtk_container_cell_accessible_remove_child;

// gtk.ContainerClass

alias c_gtk_container_class_find_child_property gtk_container_class_find_child_property;
alias c_gtk_container_class_handle_border_width gtk_container_class_handle_border_width;
alias c_gtk_container_class_install_child_properties gtk_container_class_install_child_properties;
alias c_gtk_container_class_install_child_property gtk_container_class_install_child_property;
alias c_gtk_container_class_list_child_properties gtk_container_class_list_child_properties;

// gtk.CssProvider

alias c_gtk_css_provider_get_type gtk_css_provider_get_type;
alias c_gtk_css_provider_new gtk_css_provider_new;
alias c_gtk_css_provider_get_default gtk_css_provider_get_default;
alias c_gtk_css_provider_get_named gtk_css_provider_get_named;
alias c_gtk_css_provider_load_from_data gtk_css_provider_load_from_data;
alias c_gtk_css_provider_load_from_file gtk_css_provider_load_from_file;
alias c_gtk_css_provider_load_from_path gtk_css_provider_load_from_path;
alias c_gtk_css_provider_load_from_resource gtk_css_provider_load_from_resource;
alias c_gtk_css_provider_to_string gtk_css_provider_to_string;

// gtk.CssSection

alias c_gtk_css_section_get_type gtk_css_section_get_type;
alias c_gtk_css_section_get_end_line gtk_css_section_get_end_line;
alias c_gtk_css_section_get_end_position gtk_css_section_get_end_position;
alias c_gtk_css_section_get_file gtk_css_section_get_file;
alias c_gtk_css_section_get_parent gtk_css_section_get_parent;
alias c_gtk_css_section_get_section_type gtk_css_section_get_section_type;
alias c_gtk_css_section_get_start_line gtk_css_section_get_start_line;
alias c_gtk_css_section_get_start_position gtk_css_section_get_start_position;
alias c_gtk_css_section_ref gtk_css_section_ref;
alias c_gtk_css_section_unref gtk_css_section_unref;

// gtk.Dialog

alias c_gtk_dialog_get_type gtk_dialog_get_type;
alias c_gtk_dialog_new gtk_dialog_new;
alias c_gtk_dialog_new_with_buttons gtk_dialog_new_with_buttons;
alias c_gtk_dialog_add_action_widget gtk_dialog_add_action_widget;
alias c_gtk_dialog_add_button gtk_dialog_add_button;
alias c_gtk_dialog_add_buttons gtk_dialog_add_buttons;
alias c_gtk_dialog_get_action_area gtk_dialog_get_action_area;
alias c_gtk_dialog_get_content_area gtk_dialog_get_content_area;
alias c_gtk_dialog_get_header_bar gtk_dialog_get_header_bar;
alias c_gtk_dialog_get_response_for_widget gtk_dialog_get_response_for_widget;
alias c_gtk_dialog_get_widget_for_response gtk_dialog_get_widget_for_response;
alias c_gtk_dialog_response gtk_dialog_response;
alias c_gtk_dialog_run gtk_dialog_run;
alias c_gtk_dialog_set_alternative_button_order gtk_dialog_set_alternative_button_order;
alias c_gtk_dialog_set_alternative_button_order_from_array gtk_dialog_set_alternative_button_order_from_array;
alias c_gtk_dialog_set_default_response gtk_dialog_set_default_response;
alias c_gtk_dialog_set_response_sensitive gtk_dialog_set_response_sensitive;
alias c_gtk_alternative_dialog_button_order gtk_alternative_dialog_button_order;

// gtk.DrawingArea

alias c_gtk_drawing_area_get_type gtk_drawing_area_get_type;
alias c_gtk_drawing_area_new gtk_drawing_area_new;

// gtk.Editable

alias c_gtk_editable_get_type gtk_editable_get_type;
alias c_gtk_editable_copy_clipboard gtk_editable_copy_clipboard;
alias c_gtk_editable_cut_clipboard gtk_editable_cut_clipboard;
alias c_gtk_editable_delete_selection gtk_editable_delete_selection;
alias c_gtk_editable_delete_text gtk_editable_delete_text;
alias c_gtk_editable_get_chars gtk_editable_get_chars;
alias c_gtk_editable_get_editable gtk_editable_get_editable;
alias c_gtk_editable_get_position gtk_editable_get_position;
alias c_gtk_editable_get_selection_bounds gtk_editable_get_selection_bounds;
alias c_gtk_editable_insert_text gtk_editable_insert_text;
alias c_gtk_editable_paste_clipboard gtk_editable_paste_clipboard;
alias c_gtk_editable_select_region gtk_editable_select_region;
alias c_gtk_editable_set_editable gtk_editable_set_editable;
alias c_gtk_editable_set_position gtk_editable_set_position;

// gtk.Entry

alias c_gtk_entry_get_type gtk_entry_get_type;
alias c_gtk_entry_new gtk_entry_new;
alias c_gtk_entry_new_with_buffer gtk_entry_new_with_buffer;
alias c_gtk_entry_get_activates_default gtk_entry_get_activates_default;
alias c_gtk_entry_get_alignment gtk_entry_get_alignment;
alias c_gtk_entry_get_attributes gtk_entry_get_attributes;
alias c_gtk_entry_get_buffer gtk_entry_get_buffer;
alias c_gtk_entry_get_completion gtk_entry_get_completion;
alias c_gtk_entry_get_current_icon_drag_source gtk_entry_get_current_icon_drag_source;
alias c_gtk_entry_get_cursor_hadjustment gtk_entry_get_cursor_hadjustment;
alias c_gtk_entry_get_has_frame gtk_entry_get_has_frame;
alias c_gtk_entry_get_icon_activatable gtk_entry_get_icon_activatable;
alias c_gtk_entry_get_icon_area gtk_entry_get_icon_area;
alias c_gtk_entry_get_icon_at_pos gtk_entry_get_icon_at_pos;
alias c_gtk_entry_get_icon_gicon gtk_entry_get_icon_gicon;
alias c_gtk_entry_get_icon_name gtk_entry_get_icon_name;
alias c_gtk_entry_get_icon_pixbuf gtk_entry_get_icon_pixbuf;
alias c_gtk_entry_get_icon_sensitive gtk_entry_get_icon_sensitive;
alias c_gtk_entry_get_icon_stock gtk_entry_get_icon_stock;
alias c_gtk_entry_get_icon_storage_type gtk_entry_get_icon_storage_type;
alias c_gtk_entry_get_icon_tooltip_markup gtk_entry_get_icon_tooltip_markup;
alias c_gtk_entry_get_icon_tooltip_text gtk_entry_get_icon_tooltip_text;
alias c_gtk_entry_get_inner_border gtk_entry_get_inner_border;
alias c_gtk_entry_get_input_hints gtk_entry_get_input_hints;
alias c_gtk_entry_get_input_purpose gtk_entry_get_input_purpose;
alias c_gtk_entry_get_invisible_char gtk_entry_get_invisible_char;
alias c_gtk_entry_get_layout gtk_entry_get_layout;
alias c_gtk_entry_get_layout_offsets gtk_entry_get_layout_offsets;
alias c_gtk_entry_get_max_length gtk_entry_get_max_length;
alias c_gtk_entry_get_max_width_chars gtk_entry_get_max_width_chars;
alias c_gtk_entry_get_overwrite_mode gtk_entry_get_overwrite_mode;
alias c_gtk_entry_get_placeholder_text gtk_entry_get_placeholder_text;
alias c_gtk_entry_get_progress_fraction gtk_entry_get_progress_fraction;
alias c_gtk_entry_get_progress_pulse_step gtk_entry_get_progress_pulse_step;
alias c_gtk_entry_get_tabs gtk_entry_get_tabs;
alias c_gtk_entry_get_text gtk_entry_get_text;
alias c_gtk_entry_get_text_area gtk_entry_get_text_area;
alias c_gtk_entry_get_text_length gtk_entry_get_text_length;
alias c_gtk_entry_get_visibility gtk_entry_get_visibility;
alias c_gtk_entry_get_width_chars gtk_entry_get_width_chars;
alias c_gtk_entry_grab_focus_without_selecting gtk_entry_grab_focus_without_selecting;
alias c_gtk_entry_im_context_filter_keypress gtk_entry_im_context_filter_keypress;
alias c_gtk_entry_layout_index_to_text_index gtk_entry_layout_index_to_text_index;
alias c_gtk_entry_progress_pulse gtk_entry_progress_pulse;
alias c_gtk_entry_reset_im_context gtk_entry_reset_im_context;
alias c_gtk_entry_set_activates_default gtk_entry_set_activates_default;
alias c_gtk_entry_set_alignment gtk_entry_set_alignment;
alias c_gtk_entry_set_attributes gtk_entry_set_attributes;
alias c_gtk_entry_set_buffer gtk_entry_set_buffer;
alias c_gtk_entry_set_completion gtk_entry_set_completion;
alias c_gtk_entry_set_cursor_hadjustment gtk_entry_set_cursor_hadjustment;
alias c_gtk_entry_set_has_frame gtk_entry_set_has_frame;
alias c_gtk_entry_set_icon_activatable gtk_entry_set_icon_activatable;
alias c_gtk_entry_set_icon_drag_source gtk_entry_set_icon_drag_source;
alias c_gtk_entry_set_icon_from_gicon gtk_entry_set_icon_from_gicon;
alias c_gtk_entry_set_icon_from_icon_name gtk_entry_set_icon_from_icon_name;
alias c_gtk_entry_set_icon_from_pixbuf gtk_entry_set_icon_from_pixbuf;
alias c_gtk_entry_set_icon_from_stock gtk_entry_set_icon_from_stock;
alias c_gtk_entry_set_icon_sensitive gtk_entry_set_icon_sensitive;
alias c_gtk_entry_set_icon_tooltip_markup gtk_entry_set_icon_tooltip_markup;
alias c_gtk_entry_set_icon_tooltip_text gtk_entry_set_icon_tooltip_text;
alias c_gtk_entry_set_inner_border gtk_entry_set_inner_border;
alias c_gtk_entry_set_input_hints gtk_entry_set_input_hints;
alias c_gtk_entry_set_input_purpose gtk_entry_set_input_purpose;
alias c_gtk_entry_set_invisible_char gtk_entry_set_invisible_char;
alias c_gtk_entry_set_max_length gtk_entry_set_max_length;
alias c_gtk_entry_set_max_width_chars gtk_entry_set_max_width_chars;
alias c_gtk_entry_set_overwrite_mode gtk_entry_set_overwrite_mode;
alias c_gtk_entry_set_placeholder_text gtk_entry_set_placeholder_text;
alias c_gtk_entry_set_progress_fraction gtk_entry_set_progress_fraction;
alias c_gtk_entry_set_progress_pulse_step gtk_entry_set_progress_pulse_step;
alias c_gtk_entry_set_tabs gtk_entry_set_tabs;
alias c_gtk_entry_set_text gtk_entry_set_text;
alias c_gtk_entry_set_visibility gtk_entry_set_visibility;
alias c_gtk_entry_set_width_chars gtk_entry_set_width_chars;
alias c_gtk_entry_text_index_to_layout_index gtk_entry_text_index_to_layout_index;
alias c_gtk_entry_unset_invisible_char gtk_entry_unset_invisible_char;

// gtk.EntryAccessible

alias c_gtk_entry_accessible_get_type gtk_entry_accessible_get_type;

// gtk.EntryBuffer

alias c_gtk_entry_buffer_get_type gtk_entry_buffer_get_type;
alias c_gtk_entry_buffer_new gtk_entry_buffer_new;
alias c_gtk_entry_buffer_delete_text gtk_entry_buffer_delete_text;
alias c_gtk_entry_buffer_emit_deleted_text gtk_entry_buffer_emit_deleted_text;
alias c_gtk_entry_buffer_emit_inserted_text gtk_entry_buffer_emit_inserted_text;
alias c_gtk_entry_buffer_get_bytes gtk_entry_buffer_get_bytes;
alias c_gtk_entry_buffer_get_length gtk_entry_buffer_get_length;
alias c_gtk_entry_buffer_get_max_length gtk_entry_buffer_get_max_length;
alias c_gtk_entry_buffer_get_text gtk_entry_buffer_get_text;
alias c_gtk_entry_buffer_insert_text gtk_entry_buffer_insert_text;
alias c_gtk_entry_buffer_set_max_length gtk_entry_buffer_set_max_length;
alias c_gtk_entry_buffer_set_text gtk_entry_buffer_set_text;

// gtk.EntryCompletion

alias c_gtk_entry_completion_get_type gtk_entry_completion_get_type;
alias c_gtk_entry_completion_new gtk_entry_completion_new;
alias c_gtk_entry_completion_new_with_area gtk_entry_completion_new_with_area;
alias c_gtk_entry_completion_complete gtk_entry_completion_complete;
alias c_gtk_entry_completion_compute_prefix gtk_entry_completion_compute_prefix;
alias c_gtk_entry_completion_delete_action gtk_entry_completion_delete_action;
alias c_gtk_entry_completion_get_completion_prefix gtk_entry_completion_get_completion_prefix;
alias c_gtk_entry_completion_get_entry gtk_entry_completion_get_entry;
alias c_gtk_entry_completion_get_inline_completion gtk_entry_completion_get_inline_completion;
alias c_gtk_entry_completion_get_inline_selection gtk_entry_completion_get_inline_selection;
alias c_gtk_entry_completion_get_minimum_key_length gtk_entry_completion_get_minimum_key_length;
alias c_gtk_entry_completion_get_model gtk_entry_completion_get_model;
alias c_gtk_entry_completion_get_popup_completion gtk_entry_completion_get_popup_completion;
alias c_gtk_entry_completion_get_popup_set_width gtk_entry_completion_get_popup_set_width;
alias c_gtk_entry_completion_get_popup_single_match gtk_entry_completion_get_popup_single_match;
alias c_gtk_entry_completion_get_text_column gtk_entry_completion_get_text_column;
alias c_gtk_entry_completion_insert_action_markup gtk_entry_completion_insert_action_markup;
alias c_gtk_entry_completion_insert_action_text gtk_entry_completion_insert_action_text;
alias c_gtk_entry_completion_insert_prefix gtk_entry_completion_insert_prefix;
alias c_gtk_entry_completion_set_inline_completion gtk_entry_completion_set_inline_completion;
alias c_gtk_entry_completion_set_inline_selection gtk_entry_completion_set_inline_selection;
alias c_gtk_entry_completion_set_match_func gtk_entry_completion_set_match_func;
alias c_gtk_entry_completion_set_minimum_key_length gtk_entry_completion_set_minimum_key_length;
alias c_gtk_entry_completion_set_model gtk_entry_completion_set_model;
alias c_gtk_entry_completion_set_popup_completion gtk_entry_completion_set_popup_completion;
alias c_gtk_entry_completion_set_popup_set_width gtk_entry_completion_set_popup_set_width;
alias c_gtk_entry_completion_set_popup_single_match gtk_entry_completion_set_popup_single_match;
alias c_gtk_entry_completion_set_text_column gtk_entry_completion_set_text_column;

// gtk.EntryIconAccessible

alias c_gtk_entry_icon_accessible_get_type gtk_entry_icon_accessible_get_type;

// gtk.EventBox

alias c_gtk_event_box_get_type gtk_event_box_get_type;
alias c_gtk_event_box_new gtk_event_box_new;
alias c_gtk_event_box_get_above_child gtk_event_box_get_above_child;
alias c_gtk_event_box_get_visible_window gtk_event_box_get_visible_window;
alias c_gtk_event_box_set_above_child gtk_event_box_set_above_child;
alias c_gtk_event_box_set_visible_window gtk_event_box_set_visible_window;

// gtk.EventController

alias c_gtk_event_controller_get_type gtk_event_controller_get_type;
alias c_gtk_event_controller_get_propagation_phase gtk_event_controller_get_propagation_phase;
alias c_gtk_event_controller_get_widget gtk_event_controller_get_widget;
alias c_gtk_event_controller_handle_event gtk_event_controller_handle_event;
alias c_gtk_event_controller_reset gtk_event_controller_reset;
alias c_gtk_event_controller_set_propagation_phase gtk_event_controller_set_propagation_phase;

// gtk.Expander

alias c_gtk_expander_get_type gtk_expander_get_type;
alias c_gtk_expander_new gtk_expander_new;
alias c_gtk_expander_new_with_mnemonic gtk_expander_new_with_mnemonic;
alias c_gtk_expander_get_expanded gtk_expander_get_expanded;
alias c_gtk_expander_get_label gtk_expander_get_label;
alias c_gtk_expander_get_label_fill gtk_expander_get_label_fill;
alias c_gtk_expander_get_label_widget gtk_expander_get_label_widget;
alias c_gtk_expander_get_resize_toplevel gtk_expander_get_resize_toplevel;
alias c_gtk_expander_get_spacing gtk_expander_get_spacing;
alias c_gtk_expander_get_use_markup gtk_expander_get_use_markup;
alias c_gtk_expander_get_use_underline gtk_expander_get_use_underline;
alias c_gtk_expander_set_expanded gtk_expander_set_expanded;
alias c_gtk_expander_set_label gtk_expander_set_label;
alias c_gtk_expander_set_label_fill gtk_expander_set_label_fill;
alias c_gtk_expander_set_label_widget gtk_expander_set_label_widget;
alias c_gtk_expander_set_resize_toplevel gtk_expander_set_resize_toplevel;
alias c_gtk_expander_set_spacing gtk_expander_set_spacing;
alias c_gtk_expander_set_use_markup gtk_expander_set_use_markup;
alias c_gtk_expander_set_use_underline gtk_expander_set_use_underline;

// gtk.ExpanderAccessible

alias c_gtk_expander_accessible_get_type gtk_expander_accessible_get_type;

// gtk.FileChooser

alias c_gtk_file_chooser_get_type gtk_file_chooser_get_type;
alias c_gtk_file_chooser_add_choice gtk_file_chooser_add_choice;
alias c_gtk_file_chooser_add_filter gtk_file_chooser_add_filter;
alias c_gtk_file_chooser_add_shortcut_folder gtk_file_chooser_add_shortcut_folder;
alias c_gtk_file_chooser_add_shortcut_folder_uri gtk_file_chooser_add_shortcut_folder_uri;
alias c_gtk_file_chooser_get_action gtk_file_chooser_get_action;
alias c_gtk_file_chooser_get_choice gtk_file_chooser_get_choice;
alias c_gtk_file_chooser_get_create_folders gtk_file_chooser_get_create_folders;
alias c_gtk_file_chooser_get_current_folder gtk_file_chooser_get_current_folder;
alias c_gtk_file_chooser_get_current_folder_file gtk_file_chooser_get_current_folder_file;
alias c_gtk_file_chooser_get_current_folder_uri gtk_file_chooser_get_current_folder_uri;
alias c_gtk_file_chooser_get_current_name gtk_file_chooser_get_current_name;
alias c_gtk_file_chooser_get_do_overwrite_confirmation gtk_file_chooser_get_do_overwrite_confirmation;
alias c_gtk_file_chooser_get_extra_widget gtk_file_chooser_get_extra_widget;
alias c_gtk_file_chooser_get_file gtk_file_chooser_get_file;
alias c_gtk_file_chooser_get_filename gtk_file_chooser_get_filename;
alias c_gtk_file_chooser_get_filenames gtk_file_chooser_get_filenames;
alias c_gtk_file_chooser_get_files gtk_file_chooser_get_files;
alias c_gtk_file_chooser_get_filter gtk_file_chooser_get_filter;
alias c_gtk_file_chooser_get_local_only gtk_file_chooser_get_local_only;
alias c_gtk_file_chooser_get_preview_file gtk_file_chooser_get_preview_file;
alias c_gtk_file_chooser_get_preview_filename gtk_file_chooser_get_preview_filename;
alias c_gtk_file_chooser_get_preview_uri gtk_file_chooser_get_preview_uri;
alias c_gtk_file_chooser_get_preview_widget gtk_file_chooser_get_preview_widget;
alias c_gtk_file_chooser_get_preview_widget_active gtk_file_chooser_get_preview_widget_active;
alias c_gtk_file_chooser_get_select_multiple gtk_file_chooser_get_select_multiple;
alias c_gtk_file_chooser_get_show_hidden gtk_file_chooser_get_show_hidden;
alias c_gtk_file_chooser_get_uri gtk_file_chooser_get_uri;
alias c_gtk_file_chooser_get_uris gtk_file_chooser_get_uris;
alias c_gtk_file_chooser_get_use_preview_label gtk_file_chooser_get_use_preview_label;
alias c_gtk_file_chooser_list_filters gtk_file_chooser_list_filters;
alias c_gtk_file_chooser_list_shortcut_folder_uris gtk_file_chooser_list_shortcut_folder_uris;
alias c_gtk_file_chooser_list_shortcut_folders gtk_file_chooser_list_shortcut_folders;
alias c_gtk_file_chooser_remove_choice gtk_file_chooser_remove_choice;
alias c_gtk_file_chooser_remove_filter gtk_file_chooser_remove_filter;
alias c_gtk_file_chooser_remove_shortcut_folder gtk_file_chooser_remove_shortcut_folder;
alias c_gtk_file_chooser_remove_shortcut_folder_uri gtk_file_chooser_remove_shortcut_folder_uri;
alias c_gtk_file_chooser_select_all gtk_file_chooser_select_all;
alias c_gtk_file_chooser_select_file gtk_file_chooser_select_file;
alias c_gtk_file_chooser_select_filename gtk_file_chooser_select_filename;
alias c_gtk_file_chooser_select_uri gtk_file_chooser_select_uri;
alias c_gtk_file_chooser_set_action gtk_file_chooser_set_action;
alias c_gtk_file_chooser_set_choice gtk_file_chooser_set_choice;
alias c_gtk_file_chooser_set_create_folders gtk_file_chooser_set_create_folders;
alias c_gtk_file_chooser_set_current_folder gtk_file_chooser_set_current_folder;
alias c_gtk_file_chooser_set_current_folder_file gtk_file_chooser_set_current_folder_file;
alias c_gtk_file_chooser_set_current_folder_uri gtk_file_chooser_set_current_folder_uri;
alias c_gtk_file_chooser_set_current_name gtk_file_chooser_set_current_name;
alias c_gtk_file_chooser_set_do_overwrite_confirmation gtk_file_chooser_set_do_overwrite_confirmation;
alias c_gtk_file_chooser_set_extra_widget gtk_file_chooser_set_extra_widget;
alias c_gtk_file_chooser_set_file gtk_file_chooser_set_file;
alias c_gtk_file_chooser_set_filename gtk_file_chooser_set_filename;
alias c_gtk_file_chooser_set_filter gtk_file_chooser_set_filter;
alias c_gtk_file_chooser_set_local_only gtk_file_chooser_set_local_only;
alias c_gtk_file_chooser_set_preview_widget gtk_file_chooser_set_preview_widget;
alias c_gtk_file_chooser_set_preview_widget_active gtk_file_chooser_set_preview_widget_active;
alias c_gtk_file_chooser_set_select_multiple gtk_file_chooser_set_select_multiple;
alias c_gtk_file_chooser_set_show_hidden gtk_file_chooser_set_show_hidden;
alias c_gtk_file_chooser_set_uri gtk_file_chooser_set_uri;
alias c_gtk_file_chooser_set_use_preview_label gtk_file_chooser_set_use_preview_label;
alias c_gtk_file_chooser_unselect_all gtk_file_chooser_unselect_all;
alias c_gtk_file_chooser_unselect_file gtk_file_chooser_unselect_file;
alias c_gtk_file_chooser_unselect_filename gtk_file_chooser_unselect_filename;
alias c_gtk_file_chooser_unselect_uri gtk_file_chooser_unselect_uri;

// gtk.FileChooserButton

alias c_gtk_file_chooser_button_get_type gtk_file_chooser_button_get_type;
alias c_gtk_file_chooser_button_new gtk_file_chooser_button_new;
alias c_gtk_file_chooser_button_new_with_dialog gtk_file_chooser_button_new_with_dialog;
alias c_gtk_file_chooser_button_get_focus_on_click gtk_file_chooser_button_get_focus_on_click;
alias c_gtk_file_chooser_button_get_title gtk_file_chooser_button_get_title;
alias c_gtk_file_chooser_button_get_width_chars gtk_file_chooser_button_get_width_chars;
alias c_gtk_file_chooser_button_set_focus_on_click gtk_file_chooser_button_set_focus_on_click;
alias c_gtk_file_chooser_button_set_title gtk_file_chooser_button_set_title;
alias c_gtk_file_chooser_button_set_width_chars gtk_file_chooser_button_set_width_chars;

// gtk.FileChooserDialog

alias c_gtk_file_chooser_dialog_get_type gtk_file_chooser_dialog_get_type;
alias c_gtk_file_chooser_dialog_new gtk_file_chooser_dialog_new;

// gtk.FileChooserNative

alias c_gtk_file_chooser_native_get_type gtk_file_chooser_native_get_type;
alias c_gtk_file_chooser_native_new gtk_file_chooser_native_new;
alias c_gtk_file_chooser_native_get_accept_label gtk_file_chooser_native_get_accept_label;
alias c_gtk_file_chooser_native_get_cancel_label gtk_file_chooser_native_get_cancel_label;
alias c_gtk_file_chooser_native_set_accept_label gtk_file_chooser_native_set_accept_label;
alias c_gtk_file_chooser_native_set_cancel_label gtk_file_chooser_native_set_cancel_label;

// gtk.FileChooserWidget

alias c_gtk_file_chooser_widget_get_type gtk_file_chooser_widget_get_type;
alias c_gtk_file_chooser_widget_new gtk_file_chooser_widget_new;

// gtk.FileFilter

alias c_gtk_file_filter_get_type gtk_file_filter_get_type;
alias c_gtk_file_filter_new gtk_file_filter_new;
alias c_gtk_file_filter_new_from_gvariant gtk_file_filter_new_from_gvariant;
alias c_gtk_file_filter_add_custom gtk_file_filter_add_custom;
alias c_gtk_file_filter_add_mime_type gtk_file_filter_add_mime_type;
alias c_gtk_file_filter_add_pattern gtk_file_filter_add_pattern;
alias c_gtk_file_filter_add_pixbuf_formats gtk_file_filter_add_pixbuf_formats;
alias c_gtk_file_filter_filter gtk_file_filter_filter;
alias c_gtk_file_filter_get_name gtk_file_filter_get_name;
alias c_gtk_file_filter_get_needed gtk_file_filter_get_needed;
alias c_gtk_file_filter_set_name gtk_file_filter_set_name;
alias c_gtk_file_filter_to_gvariant gtk_file_filter_to_gvariant;

// gtk.Fixed

alias c_gtk_fixed_get_type gtk_fixed_get_type;
alias c_gtk_fixed_new gtk_fixed_new;
alias c_gtk_fixed_move gtk_fixed_move;
alias c_gtk_fixed_put gtk_fixed_put;

// gtk.FlowBox

alias c_gtk_flow_box_get_type gtk_flow_box_get_type;
alias c_gtk_flow_box_new gtk_flow_box_new;
alias c_gtk_flow_box_bind_model gtk_flow_box_bind_model;
alias c_gtk_flow_box_get_activate_on_single_click gtk_flow_box_get_activate_on_single_click;
alias c_gtk_flow_box_get_child_at_index gtk_flow_box_get_child_at_index;
alias c_gtk_flow_box_get_column_spacing gtk_flow_box_get_column_spacing;
alias c_gtk_flow_box_get_homogeneous gtk_flow_box_get_homogeneous;
alias c_gtk_flow_box_get_max_children_per_line gtk_flow_box_get_max_children_per_line;
alias c_gtk_flow_box_get_min_children_per_line gtk_flow_box_get_min_children_per_line;
alias c_gtk_flow_box_get_row_spacing gtk_flow_box_get_row_spacing;
alias c_gtk_flow_box_get_selected_children gtk_flow_box_get_selected_children;
alias c_gtk_flow_box_get_selection_mode gtk_flow_box_get_selection_mode;
alias c_gtk_flow_box_insert gtk_flow_box_insert;
alias c_gtk_flow_box_invalidate_filter gtk_flow_box_invalidate_filter;
alias c_gtk_flow_box_invalidate_sort gtk_flow_box_invalidate_sort;
alias c_gtk_flow_box_select_all gtk_flow_box_select_all;
alias c_gtk_flow_box_select_child gtk_flow_box_select_child;
alias c_gtk_flow_box_selected_foreach gtk_flow_box_selected_foreach;
alias c_gtk_flow_box_set_activate_on_single_click gtk_flow_box_set_activate_on_single_click;
alias c_gtk_flow_box_set_column_spacing gtk_flow_box_set_column_spacing;
alias c_gtk_flow_box_set_filter_func gtk_flow_box_set_filter_func;
alias c_gtk_flow_box_set_hadjustment gtk_flow_box_set_hadjustment;
alias c_gtk_flow_box_set_homogeneous gtk_flow_box_set_homogeneous;
alias c_gtk_flow_box_set_max_children_per_line gtk_flow_box_set_max_children_per_line;
alias c_gtk_flow_box_set_min_children_per_line gtk_flow_box_set_min_children_per_line;
alias c_gtk_flow_box_set_row_spacing gtk_flow_box_set_row_spacing;
alias c_gtk_flow_box_set_selection_mode gtk_flow_box_set_selection_mode;
alias c_gtk_flow_box_set_sort_func gtk_flow_box_set_sort_func;
alias c_gtk_flow_box_set_vadjustment gtk_flow_box_set_vadjustment;
alias c_gtk_flow_box_unselect_all gtk_flow_box_unselect_all;
alias c_gtk_flow_box_unselect_child gtk_flow_box_unselect_child;

// gtk.FlowBoxAccessible

alias c_gtk_flow_box_accessible_get_type gtk_flow_box_accessible_get_type;

// gtk.FlowBoxChild

alias c_gtk_flow_box_child_get_type gtk_flow_box_child_get_type;
alias c_gtk_flow_box_child_new gtk_flow_box_child_new;
alias c_gtk_flow_box_child_changed gtk_flow_box_child_changed;
alias c_gtk_flow_box_child_get_index gtk_flow_box_child_get_index;
alias c_gtk_flow_box_child_is_selected gtk_flow_box_child_is_selected;

// gtk.FlowBoxChildAccessible

alias c_gtk_flow_box_child_accessible_get_type gtk_flow_box_child_accessible_get_type;

// gtk.FontButton

alias c_gtk_font_button_get_type gtk_font_button_get_type;
alias c_gtk_font_button_new gtk_font_button_new;
alias c_gtk_font_button_new_with_font gtk_font_button_new_with_font;
alias c_gtk_font_button_get_font_name gtk_font_button_get_font_name;
alias c_gtk_font_button_get_show_size gtk_font_button_get_show_size;
alias c_gtk_font_button_get_show_style gtk_font_button_get_show_style;
alias c_gtk_font_button_get_title gtk_font_button_get_title;
alias c_gtk_font_button_get_use_font gtk_font_button_get_use_font;
alias c_gtk_font_button_get_use_size gtk_font_button_get_use_size;
alias c_gtk_font_button_set_font_name gtk_font_button_set_font_name;
alias c_gtk_font_button_set_show_size gtk_font_button_set_show_size;
alias c_gtk_font_button_set_show_style gtk_font_button_set_show_style;
alias c_gtk_font_button_set_title gtk_font_button_set_title;
alias c_gtk_font_button_set_use_font gtk_font_button_set_use_font;
alias c_gtk_font_button_set_use_size gtk_font_button_set_use_size;

// gtk.FontChooser

alias c_gtk_font_chooser_get_type gtk_font_chooser_get_type;
alias c_gtk_font_chooser_get_font gtk_font_chooser_get_font;
alias c_gtk_font_chooser_get_font_desc gtk_font_chooser_get_font_desc;
alias c_gtk_font_chooser_get_font_face gtk_font_chooser_get_font_face;
alias c_gtk_font_chooser_get_font_family gtk_font_chooser_get_font_family;
alias c_gtk_font_chooser_get_font_map gtk_font_chooser_get_font_map;
alias c_gtk_font_chooser_get_font_size gtk_font_chooser_get_font_size;
alias c_gtk_font_chooser_get_preview_text gtk_font_chooser_get_preview_text;
alias c_gtk_font_chooser_get_show_preview_entry gtk_font_chooser_get_show_preview_entry;
alias c_gtk_font_chooser_set_filter_func gtk_font_chooser_set_filter_func;
alias c_gtk_font_chooser_set_font gtk_font_chooser_set_font;
alias c_gtk_font_chooser_set_font_desc gtk_font_chooser_set_font_desc;
alias c_gtk_font_chooser_set_font_map gtk_font_chooser_set_font_map;
alias c_gtk_font_chooser_set_preview_text gtk_font_chooser_set_preview_text;
alias c_gtk_font_chooser_set_show_preview_entry gtk_font_chooser_set_show_preview_entry;

// gtk.FontChooserDialog

alias c_gtk_font_chooser_dialog_get_type gtk_font_chooser_dialog_get_type;
alias c_gtk_font_chooser_dialog_new gtk_font_chooser_dialog_new;

// gtk.FontChooserWidget

alias c_gtk_font_chooser_widget_get_type gtk_font_chooser_widget_get_type;
alias c_gtk_font_chooser_widget_new gtk_font_chooser_widget_new;

// gtk.FontSelection

alias c_gtk_font_selection_get_type gtk_font_selection_get_type;
alias c_gtk_font_selection_new gtk_font_selection_new;
alias c_gtk_font_selection_get_face gtk_font_selection_get_face;
alias c_gtk_font_selection_get_face_list gtk_font_selection_get_face_list;
alias c_gtk_font_selection_get_family gtk_font_selection_get_family;
alias c_gtk_font_selection_get_family_list gtk_font_selection_get_family_list;
alias c_gtk_font_selection_get_font_name gtk_font_selection_get_font_name;
alias c_gtk_font_selection_get_preview_entry gtk_font_selection_get_preview_entry;
alias c_gtk_font_selection_get_preview_text gtk_font_selection_get_preview_text;
alias c_gtk_font_selection_get_size gtk_font_selection_get_size;
alias c_gtk_font_selection_get_size_entry gtk_font_selection_get_size_entry;
alias c_gtk_font_selection_get_size_list gtk_font_selection_get_size_list;
alias c_gtk_font_selection_set_font_name gtk_font_selection_set_font_name;
alias c_gtk_font_selection_set_preview_text gtk_font_selection_set_preview_text;

// gtk.FontSelectionDialog

alias c_gtk_font_selection_dialog_get_type gtk_font_selection_dialog_get_type;
alias c_gtk_font_selection_dialog_new gtk_font_selection_dialog_new;
alias c_gtk_font_selection_dialog_get_cancel_button gtk_font_selection_dialog_get_cancel_button;
alias c_gtk_font_selection_dialog_get_font_name gtk_font_selection_dialog_get_font_name;
alias c_gtk_font_selection_dialog_get_font_selection gtk_font_selection_dialog_get_font_selection;
alias c_gtk_font_selection_dialog_get_ok_button gtk_font_selection_dialog_get_ok_button;
alias c_gtk_font_selection_dialog_get_preview_text gtk_font_selection_dialog_get_preview_text;
alias c_gtk_font_selection_dialog_set_font_name gtk_font_selection_dialog_set_font_name;
alias c_gtk_font_selection_dialog_set_preview_text gtk_font_selection_dialog_set_preview_text;

// gtk.Frame

alias c_gtk_frame_get_type gtk_frame_get_type;
alias c_gtk_frame_new gtk_frame_new;
alias c_gtk_frame_get_label gtk_frame_get_label;
alias c_gtk_frame_get_label_align gtk_frame_get_label_align;
alias c_gtk_frame_get_label_widget gtk_frame_get_label_widget;
alias c_gtk_frame_get_shadow_type gtk_frame_get_shadow_type;
alias c_gtk_frame_set_label gtk_frame_set_label;
alias c_gtk_frame_set_label_align gtk_frame_set_label_align;
alias c_gtk_frame_set_label_widget gtk_frame_set_label_widget;
alias c_gtk_frame_set_shadow_type gtk_frame_set_shadow_type;

// gtk.FrameAccessible

alias c_gtk_frame_accessible_get_type gtk_frame_accessible_get_type;

// gtk.GLArea

alias c_gtk_gl_area_get_type gtk_gl_area_get_type;
alias c_gtk_gl_area_new gtk_gl_area_new;
alias c_gtk_gl_area_attach_buffers gtk_gl_area_attach_buffers;
alias c_gtk_gl_area_get_auto_render gtk_gl_area_get_auto_render;
alias c_gtk_gl_area_get_context gtk_gl_area_get_context;
alias c_gtk_gl_area_get_error gtk_gl_area_get_error;
alias c_gtk_gl_area_get_has_alpha gtk_gl_area_get_has_alpha;
alias c_gtk_gl_area_get_has_depth_buffer gtk_gl_area_get_has_depth_buffer;
alias c_gtk_gl_area_get_has_stencil_buffer gtk_gl_area_get_has_stencil_buffer;
alias c_gtk_gl_area_get_required_version gtk_gl_area_get_required_version;
alias c_gtk_gl_area_get_use_es gtk_gl_area_get_use_es;
alias c_gtk_gl_area_make_current gtk_gl_area_make_current;
alias c_gtk_gl_area_queue_render gtk_gl_area_queue_render;
alias c_gtk_gl_area_set_auto_render gtk_gl_area_set_auto_render;
alias c_gtk_gl_area_set_error gtk_gl_area_set_error;
alias c_gtk_gl_area_set_has_alpha gtk_gl_area_set_has_alpha;
alias c_gtk_gl_area_set_has_depth_buffer gtk_gl_area_set_has_depth_buffer;
alias c_gtk_gl_area_set_has_stencil_buffer gtk_gl_area_set_has_stencil_buffer;
alias c_gtk_gl_area_set_required_version gtk_gl_area_set_required_version;
alias c_gtk_gl_area_set_use_es gtk_gl_area_set_use_es;

// gtk.Gesture

alias c_gtk_gesture_get_type gtk_gesture_get_type;
alias c_gtk_gesture_get_bounding_box gtk_gesture_get_bounding_box;
alias c_gtk_gesture_get_bounding_box_center gtk_gesture_get_bounding_box_center;
alias c_gtk_gesture_get_device gtk_gesture_get_device;
alias c_gtk_gesture_get_group gtk_gesture_get_group;
alias c_gtk_gesture_get_last_event gtk_gesture_get_last_event;
alias c_gtk_gesture_get_last_updated_sequence gtk_gesture_get_last_updated_sequence;
alias c_gtk_gesture_get_point gtk_gesture_get_point;
alias c_gtk_gesture_get_sequence_state gtk_gesture_get_sequence_state;
alias c_gtk_gesture_get_sequences gtk_gesture_get_sequences;
alias c_gtk_gesture_get_window gtk_gesture_get_window;
alias c_gtk_gesture_group gtk_gesture_group;
alias c_gtk_gesture_handles_sequence gtk_gesture_handles_sequence;
alias c_gtk_gesture_is_active gtk_gesture_is_active;
alias c_gtk_gesture_is_grouped_with gtk_gesture_is_grouped_with;
alias c_gtk_gesture_is_recognized gtk_gesture_is_recognized;
alias c_gtk_gesture_set_sequence_state gtk_gesture_set_sequence_state;
alias c_gtk_gesture_set_state gtk_gesture_set_state;
alias c_gtk_gesture_set_window gtk_gesture_set_window;
alias c_gtk_gesture_ungroup gtk_gesture_ungroup;

// gtk.GestureDrag

alias c_gtk_gesture_drag_get_type gtk_gesture_drag_get_type;
alias c_gtk_gesture_drag_new gtk_gesture_drag_new;
alias c_gtk_gesture_drag_get_offset gtk_gesture_drag_get_offset;
alias c_gtk_gesture_drag_get_start_point gtk_gesture_drag_get_start_point;

// gtk.GestureLongPress

alias c_gtk_gesture_long_press_get_type gtk_gesture_long_press_get_type;
alias c_gtk_gesture_long_press_new gtk_gesture_long_press_new;

// gtk.GestureMultiPress

alias c_gtk_gesture_multi_press_get_type gtk_gesture_multi_press_get_type;
alias c_gtk_gesture_multi_press_new gtk_gesture_multi_press_new;
alias c_gtk_gesture_multi_press_get_area gtk_gesture_multi_press_get_area;
alias c_gtk_gesture_multi_press_set_area gtk_gesture_multi_press_set_area;

// gtk.GesturePan

alias c_gtk_gesture_pan_get_type gtk_gesture_pan_get_type;
alias c_gtk_gesture_pan_new gtk_gesture_pan_new;
alias c_gtk_gesture_pan_get_orientation gtk_gesture_pan_get_orientation;
alias c_gtk_gesture_pan_set_orientation gtk_gesture_pan_set_orientation;

// gtk.GestureRotate

alias c_gtk_gesture_rotate_get_type gtk_gesture_rotate_get_type;
alias c_gtk_gesture_rotate_new gtk_gesture_rotate_new;
alias c_gtk_gesture_rotate_get_angle_delta gtk_gesture_rotate_get_angle_delta;

// gtk.GestureSingle

alias c_gtk_gesture_single_get_type gtk_gesture_single_get_type;
alias c_gtk_gesture_single_get_button gtk_gesture_single_get_button;
alias c_gtk_gesture_single_get_current_button gtk_gesture_single_get_current_button;
alias c_gtk_gesture_single_get_current_sequence gtk_gesture_single_get_current_sequence;
alias c_gtk_gesture_single_get_exclusive gtk_gesture_single_get_exclusive;
alias c_gtk_gesture_single_get_touch_only gtk_gesture_single_get_touch_only;
alias c_gtk_gesture_single_set_button gtk_gesture_single_set_button;
alias c_gtk_gesture_single_set_exclusive gtk_gesture_single_set_exclusive;
alias c_gtk_gesture_single_set_touch_only gtk_gesture_single_set_touch_only;

// gtk.GestureSwipe

alias c_gtk_gesture_swipe_get_type gtk_gesture_swipe_get_type;
alias c_gtk_gesture_swipe_new gtk_gesture_swipe_new;
alias c_gtk_gesture_swipe_get_velocity gtk_gesture_swipe_get_velocity;

// gtk.GestureZoom

alias c_gtk_gesture_zoom_get_type gtk_gesture_zoom_get_type;
alias c_gtk_gesture_zoom_new gtk_gesture_zoom_new;
alias c_gtk_gesture_zoom_get_scale_delta gtk_gesture_zoom_get_scale_delta;

// gtk.Gradient

alias c_gtk_gradient_get_type gtk_gradient_get_type;
alias c_gtk_gradient_new_linear gtk_gradient_new_linear;
alias c_gtk_gradient_new_radial gtk_gradient_new_radial;
alias c_gtk_gradient_add_color_stop gtk_gradient_add_color_stop;
alias c_gtk_gradient_ref gtk_gradient_ref;
alias c_gtk_gradient_resolve gtk_gradient_resolve;
alias c_gtk_gradient_resolve_for_context gtk_gradient_resolve_for_context;
alias c_gtk_gradient_to_string gtk_gradient_to_string;
alias c_gtk_gradient_unref gtk_gradient_unref;

// gtk.Grid

alias c_gtk_grid_get_type gtk_grid_get_type;
alias c_gtk_grid_new gtk_grid_new;
alias c_gtk_grid_attach gtk_grid_attach;
alias c_gtk_grid_attach_next_to gtk_grid_attach_next_to;
alias c_gtk_grid_get_baseline_row gtk_grid_get_baseline_row;
alias c_gtk_grid_get_child_at gtk_grid_get_child_at;
alias c_gtk_grid_get_column_homogeneous gtk_grid_get_column_homogeneous;
alias c_gtk_grid_get_column_spacing gtk_grid_get_column_spacing;
alias c_gtk_grid_get_row_baseline_position gtk_grid_get_row_baseline_position;
alias c_gtk_grid_get_row_homogeneous gtk_grid_get_row_homogeneous;
alias c_gtk_grid_get_row_spacing gtk_grid_get_row_spacing;
alias c_gtk_grid_insert_column gtk_grid_insert_column;
alias c_gtk_grid_insert_next_to gtk_grid_insert_next_to;
alias c_gtk_grid_insert_row gtk_grid_insert_row;
alias c_gtk_grid_remove_column gtk_grid_remove_column;
alias c_gtk_grid_remove_row gtk_grid_remove_row;
alias c_gtk_grid_set_baseline_row gtk_grid_set_baseline_row;
alias c_gtk_grid_set_column_homogeneous gtk_grid_set_column_homogeneous;
alias c_gtk_grid_set_column_spacing gtk_grid_set_column_spacing;
alias c_gtk_grid_set_row_baseline_position gtk_grid_set_row_baseline_position;
alias c_gtk_grid_set_row_homogeneous gtk_grid_set_row_homogeneous;
alias c_gtk_grid_set_row_spacing gtk_grid_set_row_spacing;

// gtk.HBox

alias c_gtk_hbox_get_type gtk_hbox_get_type;
alias c_gtk_hbox_new gtk_hbox_new;

// gtk.HButtonBox

alias c_gtk_hbutton_box_get_type gtk_hbutton_box_get_type;
alias c_gtk_hbutton_box_new gtk_hbutton_box_new;

// gtk.HPaned

alias c_gtk_hpaned_get_type gtk_hpaned_get_type;
alias c_gtk_hpaned_new gtk_hpaned_new;

// gtk.HSV

alias c_gtk_hsv_get_type gtk_hsv_get_type;
alias c_gtk_hsv_new gtk_hsv_new;
alias c_gtk_hsv_to_rgb gtk_hsv_to_rgb;
alias c_gtk_hsv_get_color gtk_hsv_get_color;
alias c_gtk_hsv_get_metrics gtk_hsv_get_metrics;
alias c_gtk_hsv_is_adjusting gtk_hsv_is_adjusting;
alias c_gtk_hsv_set_color gtk_hsv_set_color;
alias c_gtk_hsv_set_metrics gtk_hsv_set_metrics;
alias c_gtk_rgb_to_hsv gtk_rgb_to_hsv;

// gtk.HScale

alias c_gtk_hscale_get_type gtk_hscale_get_type;
alias c_gtk_hscale_new gtk_hscale_new;
alias c_gtk_hscale_new_with_range gtk_hscale_new_with_range;

// gtk.HScrollbar

alias c_gtk_hscrollbar_get_type gtk_hscrollbar_get_type;
alias c_gtk_hscrollbar_new gtk_hscrollbar_new;

// gtk.HSeparator

alias c_gtk_hseparator_get_type gtk_hseparator_get_type;
alias c_gtk_hseparator_new gtk_hseparator_new;

// gtk.HandleBox

alias c_gtk_handle_box_get_type gtk_handle_box_get_type;
alias c_gtk_handle_box_new gtk_handle_box_new;
alias c_gtk_handle_box_get_child_detached gtk_handle_box_get_child_detached;
alias c_gtk_handle_box_get_handle_position gtk_handle_box_get_handle_position;
alias c_gtk_handle_box_get_shadow_type gtk_handle_box_get_shadow_type;
alias c_gtk_handle_box_get_snap_edge gtk_handle_box_get_snap_edge;
alias c_gtk_handle_box_set_handle_position gtk_handle_box_set_handle_position;
alias c_gtk_handle_box_set_shadow_type gtk_handle_box_set_shadow_type;
alias c_gtk_handle_box_set_snap_edge gtk_handle_box_set_snap_edge;

// gtk.HeaderBar

alias c_gtk_header_bar_get_type gtk_header_bar_get_type;
alias c_gtk_header_bar_new gtk_header_bar_new;
alias c_gtk_header_bar_get_custom_title gtk_header_bar_get_custom_title;
alias c_gtk_header_bar_get_decoration_layout gtk_header_bar_get_decoration_layout;
alias c_gtk_header_bar_get_has_subtitle gtk_header_bar_get_has_subtitle;
alias c_gtk_header_bar_get_show_close_button gtk_header_bar_get_show_close_button;
alias c_gtk_header_bar_get_subtitle gtk_header_bar_get_subtitle;
alias c_gtk_header_bar_get_title gtk_header_bar_get_title;
alias c_gtk_header_bar_pack_end gtk_header_bar_pack_end;
alias c_gtk_header_bar_pack_start gtk_header_bar_pack_start;
alias c_gtk_header_bar_set_custom_title gtk_header_bar_set_custom_title;
alias c_gtk_header_bar_set_decoration_layout gtk_header_bar_set_decoration_layout;
alias c_gtk_header_bar_set_has_subtitle gtk_header_bar_set_has_subtitle;
alias c_gtk_header_bar_set_show_close_button gtk_header_bar_set_show_close_button;
alias c_gtk_header_bar_set_subtitle gtk_header_bar_set_subtitle;
alias c_gtk_header_bar_set_title gtk_header_bar_set_title;

// gtk.IMContext

alias c_gtk_im_context_get_type gtk_im_context_get_type;
alias c_gtk_im_context_delete_surrounding gtk_im_context_delete_surrounding;
alias c_gtk_im_context_filter_keypress gtk_im_context_filter_keypress;
alias c_gtk_im_context_focus_in gtk_im_context_focus_in;
alias c_gtk_im_context_focus_out gtk_im_context_focus_out;
alias c_gtk_im_context_get_preedit_string gtk_im_context_get_preedit_string;
alias c_gtk_im_context_get_surrounding gtk_im_context_get_surrounding;
alias c_gtk_im_context_reset gtk_im_context_reset;
alias c_gtk_im_context_set_client_window gtk_im_context_set_client_window;
alias c_gtk_im_context_set_cursor_location gtk_im_context_set_cursor_location;
alias c_gtk_im_context_set_surrounding gtk_im_context_set_surrounding;
alias c_gtk_im_context_set_use_preedit gtk_im_context_set_use_preedit;

// gtk.IMContextSimple

alias c_gtk_im_context_simple_get_type gtk_im_context_simple_get_type;
alias c_gtk_im_context_simple_new gtk_im_context_simple_new;
alias c_gtk_im_context_simple_add_compose_file gtk_im_context_simple_add_compose_file;
alias c_gtk_im_context_simple_add_table gtk_im_context_simple_add_table;

// gtk.IMMulticontext

alias c_gtk_im_multicontext_get_type gtk_im_multicontext_get_type;
alias c_gtk_im_multicontext_new gtk_im_multicontext_new;
alias c_gtk_im_multicontext_append_menuitems gtk_im_multicontext_append_menuitems;
alias c_gtk_im_multicontext_get_context_id gtk_im_multicontext_get_context_id;
alias c_gtk_im_multicontext_set_context_id gtk_im_multicontext_set_context_id;

// gtk.IconFactory

alias c_gtk_icon_factory_get_type gtk_icon_factory_get_type;
alias c_gtk_icon_factory_new gtk_icon_factory_new;
alias c_gtk_icon_factory_lookup_default gtk_icon_factory_lookup_default;
alias c_gtk_icon_factory_add gtk_icon_factory_add;
alias c_gtk_icon_factory_add_default gtk_icon_factory_add_default;
alias c_gtk_icon_factory_lookup gtk_icon_factory_lookup;
alias c_gtk_icon_factory_remove_default gtk_icon_factory_remove_default;

// gtk.IconInfo

alias c_gtk_icon_info_get_type gtk_icon_info_get_type;
alias c_gtk_icon_info_new_for_pixbuf gtk_icon_info_new_for_pixbuf;
alias c_gtk_icon_info_copy gtk_icon_info_copy;
alias c_gtk_icon_info_free gtk_icon_info_free;
alias c_gtk_icon_info_get_attach_points gtk_icon_info_get_attach_points;
alias c_gtk_icon_info_get_base_scale gtk_icon_info_get_base_scale;
alias c_gtk_icon_info_get_base_size gtk_icon_info_get_base_size;
alias c_gtk_icon_info_get_builtin_pixbuf gtk_icon_info_get_builtin_pixbuf;
alias c_gtk_icon_info_get_display_name gtk_icon_info_get_display_name;
alias c_gtk_icon_info_get_embedded_rect gtk_icon_info_get_embedded_rect;
alias c_gtk_icon_info_get_filename gtk_icon_info_get_filename;
alias c_gtk_icon_info_is_symbolic gtk_icon_info_is_symbolic;
alias c_gtk_icon_info_load_icon gtk_icon_info_load_icon;
alias c_gtk_icon_info_load_icon_async gtk_icon_info_load_icon_async;
alias c_gtk_icon_info_load_icon_finish gtk_icon_info_load_icon_finish;
alias c_gtk_icon_info_load_surface gtk_icon_info_load_surface;
alias c_gtk_icon_info_load_symbolic gtk_icon_info_load_symbolic;
alias c_gtk_icon_info_load_symbolic_async gtk_icon_info_load_symbolic_async;
alias c_gtk_icon_info_load_symbolic_finish gtk_icon_info_load_symbolic_finish;
alias c_gtk_icon_info_load_symbolic_for_context gtk_icon_info_load_symbolic_for_context;
alias c_gtk_icon_info_load_symbolic_for_context_async gtk_icon_info_load_symbolic_for_context_async;
alias c_gtk_icon_info_load_symbolic_for_context_finish gtk_icon_info_load_symbolic_for_context_finish;
alias c_gtk_icon_info_load_symbolic_for_style gtk_icon_info_load_symbolic_for_style;
alias c_gtk_icon_info_set_raw_coordinates gtk_icon_info_set_raw_coordinates;

// gtk.IconSet

alias c_gtk_icon_set_get_type gtk_icon_set_get_type;
alias c_gtk_icon_set_new gtk_icon_set_new;
alias c_gtk_icon_set_new_from_pixbuf gtk_icon_set_new_from_pixbuf;
alias c_gtk_icon_set_add_source gtk_icon_set_add_source;
alias c_gtk_icon_set_copy gtk_icon_set_copy;
alias c_gtk_icon_set_get_sizes gtk_icon_set_get_sizes;
alias c_gtk_icon_set_ref gtk_icon_set_ref;
alias c_gtk_icon_set_render_icon gtk_icon_set_render_icon;
alias c_gtk_icon_set_render_icon_pixbuf gtk_icon_set_render_icon_pixbuf;
alias c_gtk_icon_set_render_icon_surface gtk_icon_set_render_icon_surface;
alias c_gtk_icon_set_unref gtk_icon_set_unref;

// gtk.IconSource

alias c_gtk_icon_source_get_type gtk_icon_source_get_type;
alias c_gtk_icon_source_new gtk_icon_source_new;
alias c_gtk_icon_source_copy gtk_icon_source_copy;
alias c_gtk_icon_source_free gtk_icon_source_free;
alias c_gtk_icon_source_get_direction gtk_icon_source_get_direction;
alias c_gtk_icon_source_get_direction_wildcarded gtk_icon_source_get_direction_wildcarded;
alias c_gtk_icon_source_get_filename gtk_icon_source_get_filename;
alias c_gtk_icon_source_get_icon_name gtk_icon_source_get_icon_name;
alias c_gtk_icon_source_get_pixbuf gtk_icon_source_get_pixbuf;
alias c_gtk_icon_source_get_size gtk_icon_source_get_size;
alias c_gtk_icon_source_get_size_wildcarded gtk_icon_source_get_size_wildcarded;
alias c_gtk_icon_source_get_state gtk_icon_source_get_state;
alias c_gtk_icon_source_get_state_wildcarded gtk_icon_source_get_state_wildcarded;
alias c_gtk_icon_source_set_direction gtk_icon_source_set_direction;
alias c_gtk_icon_source_set_direction_wildcarded gtk_icon_source_set_direction_wildcarded;
alias c_gtk_icon_source_set_filename gtk_icon_source_set_filename;
alias c_gtk_icon_source_set_icon_name gtk_icon_source_set_icon_name;
alias c_gtk_icon_source_set_pixbuf gtk_icon_source_set_pixbuf;
alias c_gtk_icon_source_set_size gtk_icon_source_set_size;
alias c_gtk_icon_source_set_size_wildcarded gtk_icon_source_set_size_wildcarded;
alias c_gtk_icon_source_set_state gtk_icon_source_set_state;
alias c_gtk_icon_source_set_state_wildcarded gtk_icon_source_set_state_wildcarded;

// gtk.IconTheme

alias c_gtk_icon_theme_get_type gtk_icon_theme_get_type;
alias c_gtk_icon_theme_new gtk_icon_theme_new;
alias c_gtk_icon_theme_add_builtin_icon gtk_icon_theme_add_builtin_icon;
alias c_gtk_icon_theme_get_default gtk_icon_theme_get_default;
alias c_gtk_icon_theme_get_for_screen gtk_icon_theme_get_for_screen;
alias c_gtk_icon_theme_add_resource_path gtk_icon_theme_add_resource_path;
alias c_gtk_icon_theme_append_search_path gtk_icon_theme_append_search_path;
alias c_gtk_icon_theme_choose_icon gtk_icon_theme_choose_icon;
alias c_gtk_icon_theme_choose_icon_for_scale gtk_icon_theme_choose_icon_for_scale;
alias c_gtk_icon_theme_get_example_icon_name gtk_icon_theme_get_example_icon_name;
alias c_gtk_icon_theme_get_icon_sizes gtk_icon_theme_get_icon_sizes;
alias c_gtk_icon_theme_get_search_path gtk_icon_theme_get_search_path;
alias c_gtk_icon_theme_has_icon gtk_icon_theme_has_icon;
alias c_gtk_icon_theme_list_contexts gtk_icon_theme_list_contexts;
alias c_gtk_icon_theme_list_icons gtk_icon_theme_list_icons;
alias c_gtk_icon_theme_load_icon gtk_icon_theme_load_icon;
alias c_gtk_icon_theme_load_icon_for_scale gtk_icon_theme_load_icon_for_scale;
alias c_gtk_icon_theme_load_surface gtk_icon_theme_load_surface;
alias c_gtk_icon_theme_lookup_by_gicon gtk_icon_theme_lookup_by_gicon;
alias c_gtk_icon_theme_lookup_by_gicon_for_scale gtk_icon_theme_lookup_by_gicon_for_scale;
alias c_gtk_icon_theme_lookup_icon gtk_icon_theme_lookup_icon;
alias c_gtk_icon_theme_lookup_icon_for_scale gtk_icon_theme_lookup_icon_for_scale;
alias c_gtk_icon_theme_prepend_search_path gtk_icon_theme_prepend_search_path;
alias c_gtk_icon_theme_rescan_if_needed gtk_icon_theme_rescan_if_needed;
alias c_gtk_icon_theme_set_custom_theme gtk_icon_theme_set_custom_theme;
alias c_gtk_icon_theme_set_screen gtk_icon_theme_set_screen;
alias c_gtk_icon_theme_set_search_path gtk_icon_theme_set_search_path;

// gtk.IconView

alias c_gtk_icon_view_get_type gtk_icon_view_get_type;
alias c_gtk_icon_view_new gtk_icon_view_new;
alias c_gtk_icon_view_new_with_area gtk_icon_view_new_with_area;
alias c_gtk_icon_view_new_with_model gtk_icon_view_new_with_model;
alias c_gtk_icon_view_convert_widget_to_bin_window_coords gtk_icon_view_convert_widget_to_bin_window_coords;
alias c_gtk_icon_view_create_drag_icon gtk_icon_view_create_drag_icon;
alias c_gtk_icon_view_enable_model_drag_dest gtk_icon_view_enable_model_drag_dest;
alias c_gtk_icon_view_enable_model_drag_source gtk_icon_view_enable_model_drag_source;
alias c_gtk_icon_view_get_activate_on_single_click gtk_icon_view_get_activate_on_single_click;
alias c_gtk_icon_view_get_cell_rect gtk_icon_view_get_cell_rect;
alias c_gtk_icon_view_get_column_spacing gtk_icon_view_get_column_spacing;
alias c_gtk_icon_view_get_columns gtk_icon_view_get_columns;
alias c_gtk_icon_view_get_cursor gtk_icon_view_get_cursor;
alias c_gtk_icon_view_get_dest_item_at_pos gtk_icon_view_get_dest_item_at_pos;
alias c_gtk_icon_view_get_drag_dest_item gtk_icon_view_get_drag_dest_item;
alias c_gtk_icon_view_get_item_at_pos gtk_icon_view_get_item_at_pos;
alias c_gtk_icon_view_get_item_column gtk_icon_view_get_item_column;
alias c_gtk_icon_view_get_item_orientation gtk_icon_view_get_item_orientation;
alias c_gtk_icon_view_get_item_padding gtk_icon_view_get_item_padding;
alias c_gtk_icon_view_get_item_row gtk_icon_view_get_item_row;
alias c_gtk_icon_view_get_item_width gtk_icon_view_get_item_width;
alias c_gtk_icon_view_get_margin gtk_icon_view_get_margin;
alias c_gtk_icon_view_get_markup_column gtk_icon_view_get_markup_column;
alias c_gtk_icon_view_get_model gtk_icon_view_get_model;
alias c_gtk_icon_view_get_path_at_pos gtk_icon_view_get_path_at_pos;
alias c_gtk_icon_view_get_pixbuf_column gtk_icon_view_get_pixbuf_column;
alias c_gtk_icon_view_get_reorderable gtk_icon_view_get_reorderable;
alias c_gtk_icon_view_get_row_spacing gtk_icon_view_get_row_spacing;
alias c_gtk_icon_view_get_selected_items gtk_icon_view_get_selected_items;
alias c_gtk_icon_view_get_selection_mode gtk_icon_view_get_selection_mode;
alias c_gtk_icon_view_get_spacing gtk_icon_view_get_spacing;
alias c_gtk_icon_view_get_text_column gtk_icon_view_get_text_column;
alias c_gtk_icon_view_get_tooltip_column gtk_icon_view_get_tooltip_column;
alias c_gtk_icon_view_get_tooltip_context gtk_icon_view_get_tooltip_context;
alias c_gtk_icon_view_get_visible_range gtk_icon_view_get_visible_range;
alias c_gtk_icon_view_item_activated gtk_icon_view_item_activated;
alias c_gtk_icon_view_path_is_selected gtk_icon_view_path_is_selected;
alias c_gtk_icon_view_scroll_to_path gtk_icon_view_scroll_to_path;
alias c_gtk_icon_view_select_all gtk_icon_view_select_all;
alias c_gtk_icon_view_select_path gtk_icon_view_select_path;
alias c_gtk_icon_view_selected_foreach gtk_icon_view_selected_foreach;
alias c_gtk_icon_view_set_activate_on_single_click gtk_icon_view_set_activate_on_single_click;
alias c_gtk_icon_view_set_column_spacing gtk_icon_view_set_column_spacing;
alias c_gtk_icon_view_set_columns gtk_icon_view_set_columns;
alias c_gtk_icon_view_set_cursor gtk_icon_view_set_cursor;
alias c_gtk_icon_view_set_drag_dest_item gtk_icon_view_set_drag_dest_item;
alias c_gtk_icon_view_set_item_orientation gtk_icon_view_set_item_orientation;
alias c_gtk_icon_view_set_item_padding gtk_icon_view_set_item_padding;
alias c_gtk_icon_view_set_item_width gtk_icon_view_set_item_width;
alias c_gtk_icon_view_set_margin gtk_icon_view_set_margin;
alias c_gtk_icon_view_set_markup_column gtk_icon_view_set_markup_column;
alias c_gtk_icon_view_set_model gtk_icon_view_set_model;
alias c_gtk_icon_view_set_pixbuf_column gtk_icon_view_set_pixbuf_column;
alias c_gtk_icon_view_set_reorderable gtk_icon_view_set_reorderable;
alias c_gtk_icon_view_set_row_spacing gtk_icon_view_set_row_spacing;
alias c_gtk_icon_view_set_selection_mode gtk_icon_view_set_selection_mode;
alias c_gtk_icon_view_set_spacing gtk_icon_view_set_spacing;
alias c_gtk_icon_view_set_text_column gtk_icon_view_set_text_column;
alias c_gtk_icon_view_set_tooltip_cell gtk_icon_view_set_tooltip_cell;
alias c_gtk_icon_view_set_tooltip_column gtk_icon_view_set_tooltip_column;
alias c_gtk_icon_view_set_tooltip_item gtk_icon_view_set_tooltip_item;
alias c_gtk_icon_view_unselect_all gtk_icon_view_unselect_all;
alias c_gtk_icon_view_unselect_path gtk_icon_view_unselect_path;
alias c_gtk_icon_view_unset_model_drag_dest gtk_icon_view_unset_model_drag_dest;
alias c_gtk_icon_view_unset_model_drag_source gtk_icon_view_unset_model_drag_source;

// gtk.IconViewAccessible

alias c_gtk_icon_view_accessible_get_type gtk_icon_view_accessible_get_type;

// gtk.Image

alias c_gtk_image_get_type gtk_image_get_type;
alias c_gtk_image_new gtk_image_new;
alias c_gtk_image_new_from_animation gtk_image_new_from_animation;
alias c_gtk_image_new_from_file gtk_image_new_from_file;
alias c_gtk_image_new_from_gicon gtk_image_new_from_gicon;
alias c_gtk_image_new_from_icon_name gtk_image_new_from_icon_name;
alias c_gtk_image_new_from_icon_set gtk_image_new_from_icon_set;
alias c_gtk_image_new_from_pixbuf gtk_image_new_from_pixbuf;
alias c_gtk_image_new_from_resource gtk_image_new_from_resource;
alias c_gtk_image_new_from_stock gtk_image_new_from_stock;
alias c_gtk_image_new_from_surface gtk_image_new_from_surface;
alias c_gtk_image_clear gtk_image_clear;
alias c_gtk_image_get_animation gtk_image_get_animation;
alias c_gtk_image_get_gicon gtk_image_get_gicon;
alias c_gtk_image_get_icon_name gtk_image_get_icon_name;
alias c_gtk_image_get_icon_set gtk_image_get_icon_set;
alias c_gtk_image_get_pixbuf gtk_image_get_pixbuf;
alias c_gtk_image_get_pixel_size gtk_image_get_pixel_size;
alias c_gtk_image_get_stock gtk_image_get_stock;
alias c_gtk_image_get_storage_type gtk_image_get_storage_type;
alias c_gtk_image_set_from_animation gtk_image_set_from_animation;
alias c_gtk_image_set_from_file gtk_image_set_from_file;
alias c_gtk_image_set_from_gicon gtk_image_set_from_gicon;
alias c_gtk_image_set_from_icon_name gtk_image_set_from_icon_name;
alias c_gtk_image_set_from_icon_set gtk_image_set_from_icon_set;
alias c_gtk_image_set_from_pixbuf gtk_image_set_from_pixbuf;
alias c_gtk_image_set_from_resource gtk_image_set_from_resource;
alias c_gtk_image_set_from_stock gtk_image_set_from_stock;
alias c_gtk_image_set_from_surface gtk_image_set_from_surface;
alias c_gtk_image_set_pixel_size gtk_image_set_pixel_size;

// gtk.ImageAccessible

alias c_gtk_image_accessible_get_type gtk_image_accessible_get_type;

// gtk.ImageCellAccessible

alias c_gtk_image_cell_accessible_get_type gtk_image_cell_accessible_get_type;

// gtk.ImageMenuItem

alias c_gtk_image_menu_item_get_type gtk_image_menu_item_get_type;
alias c_gtk_image_menu_item_new gtk_image_menu_item_new;
alias c_gtk_image_menu_item_new_from_stock gtk_image_menu_item_new_from_stock;
alias c_gtk_image_menu_item_new_with_label gtk_image_menu_item_new_with_label;
alias c_gtk_image_menu_item_new_with_mnemonic gtk_image_menu_item_new_with_mnemonic;
alias c_gtk_image_menu_item_get_always_show_image gtk_image_menu_item_get_always_show_image;
alias c_gtk_image_menu_item_get_image gtk_image_menu_item_get_image;
alias c_gtk_image_menu_item_get_use_stock gtk_image_menu_item_get_use_stock;
alias c_gtk_image_menu_item_set_accel_group gtk_image_menu_item_set_accel_group;
alias c_gtk_image_menu_item_set_always_show_image gtk_image_menu_item_set_always_show_image;
alias c_gtk_image_menu_item_set_image gtk_image_menu_item_set_image;
alias c_gtk_image_menu_item_set_use_stock gtk_image_menu_item_set_use_stock;

// gtk.InfoBar

alias c_gtk_info_bar_get_type gtk_info_bar_get_type;
alias c_gtk_info_bar_new gtk_info_bar_new;
alias c_gtk_info_bar_new_with_buttons gtk_info_bar_new_with_buttons;
alias c_gtk_info_bar_add_action_widget gtk_info_bar_add_action_widget;
alias c_gtk_info_bar_add_button gtk_info_bar_add_button;
alias c_gtk_info_bar_add_buttons gtk_info_bar_add_buttons;
alias c_gtk_info_bar_get_action_area gtk_info_bar_get_action_area;
alias c_gtk_info_bar_get_content_area gtk_info_bar_get_content_area;
alias c_gtk_info_bar_get_message_type gtk_info_bar_get_message_type;
alias c_gtk_info_bar_get_show_close_button gtk_info_bar_get_show_close_button;
alias c_gtk_info_bar_response gtk_info_bar_response;
alias c_gtk_info_bar_set_default_response gtk_info_bar_set_default_response;
alias c_gtk_info_bar_set_message_type gtk_info_bar_set_message_type;
alias c_gtk_info_bar_set_response_sensitive gtk_info_bar_set_response_sensitive;
alias c_gtk_info_bar_set_show_close_button gtk_info_bar_set_show_close_button;

// gtk.Invisible

alias c_gtk_invisible_get_type gtk_invisible_get_type;
alias c_gtk_invisible_new gtk_invisible_new;
alias c_gtk_invisible_new_for_screen gtk_invisible_new_for_screen;
alias c_gtk_invisible_get_screen gtk_invisible_get_screen;
alias c_gtk_invisible_set_screen gtk_invisible_set_screen;

// gtk.Label

alias c_gtk_label_get_type gtk_label_get_type;
alias c_gtk_label_new gtk_label_new;
alias c_gtk_label_new_with_mnemonic gtk_label_new_with_mnemonic;
alias c_gtk_label_get_angle gtk_label_get_angle;
alias c_gtk_label_get_attributes gtk_label_get_attributes;
alias c_gtk_label_get_current_uri gtk_label_get_current_uri;
alias c_gtk_label_get_ellipsize gtk_label_get_ellipsize;
alias c_gtk_label_get_justify gtk_label_get_justify;
alias c_gtk_label_get_label gtk_label_get_label;
alias c_gtk_label_get_layout gtk_label_get_layout;
alias c_gtk_label_get_layout_offsets gtk_label_get_layout_offsets;
alias c_gtk_label_get_line_wrap gtk_label_get_line_wrap;
alias c_gtk_label_get_line_wrap_mode gtk_label_get_line_wrap_mode;
alias c_gtk_label_get_lines gtk_label_get_lines;
alias c_gtk_label_get_max_width_chars gtk_label_get_max_width_chars;
alias c_gtk_label_get_mnemonic_keyval gtk_label_get_mnemonic_keyval;
alias c_gtk_label_get_mnemonic_widget gtk_label_get_mnemonic_widget;
alias c_gtk_label_get_selectable gtk_label_get_selectable;
alias c_gtk_label_get_selection_bounds gtk_label_get_selection_bounds;
alias c_gtk_label_get_single_line_mode gtk_label_get_single_line_mode;
alias c_gtk_label_get_text gtk_label_get_text;
alias c_gtk_label_get_track_visited_links gtk_label_get_track_visited_links;
alias c_gtk_label_get_use_markup gtk_label_get_use_markup;
alias c_gtk_label_get_use_underline gtk_label_get_use_underline;
alias c_gtk_label_get_width_chars gtk_label_get_width_chars;
alias c_gtk_label_get_xalign gtk_label_get_xalign;
alias c_gtk_label_get_yalign gtk_label_get_yalign;
alias c_gtk_label_select_region gtk_label_select_region;
alias c_gtk_label_set_angle gtk_label_set_angle;
alias c_gtk_label_set_attributes gtk_label_set_attributes;
alias c_gtk_label_set_ellipsize gtk_label_set_ellipsize;
alias c_gtk_label_set_justify gtk_label_set_justify;
alias c_gtk_label_set_label gtk_label_set_label;
alias c_gtk_label_set_line_wrap gtk_label_set_line_wrap;
alias c_gtk_label_set_line_wrap_mode gtk_label_set_line_wrap_mode;
alias c_gtk_label_set_lines gtk_label_set_lines;
alias c_gtk_label_set_markup gtk_label_set_markup;
alias c_gtk_label_set_markup_with_mnemonic gtk_label_set_markup_with_mnemonic;
alias c_gtk_label_set_max_width_chars gtk_label_set_max_width_chars;
alias c_gtk_label_set_mnemonic_widget gtk_label_set_mnemonic_widget;
alias c_gtk_label_set_pattern gtk_label_set_pattern;
alias c_gtk_label_set_selectable gtk_label_set_selectable;
alias c_gtk_label_set_single_line_mode gtk_label_set_single_line_mode;
alias c_gtk_label_set_text gtk_label_set_text;
alias c_gtk_label_set_text_with_mnemonic gtk_label_set_text_with_mnemonic;
alias c_gtk_label_set_track_visited_links gtk_label_set_track_visited_links;
alias c_gtk_label_set_use_markup gtk_label_set_use_markup;
alias c_gtk_label_set_use_underline gtk_label_set_use_underline;
alias c_gtk_label_set_width_chars gtk_label_set_width_chars;
alias c_gtk_label_set_xalign gtk_label_set_xalign;
alias c_gtk_label_set_yalign gtk_label_set_yalign;

// gtk.LabelAccessible

alias c_gtk_label_accessible_get_type gtk_label_accessible_get_type;

// gtk.Layout

alias c_gtk_layout_get_type gtk_layout_get_type;
alias c_gtk_layout_new gtk_layout_new;
alias c_gtk_layout_get_bin_window gtk_layout_get_bin_window;
alias c_gtk_layout_get_hadjustment gtk_layout_get_hadjustment;
alias c_gtk_layout_get_size gtk_layout_get_size;
alias c_gtk_layout_get_vadjustment gtk_layout_get_vadjustment;
alias c_gtk_layout_move gtk_layout_move;
alias c_gtk_layout_put gtk_layout_put;
alias c_gtk_layout_set_hadjustment gtk_layout_set_hadjustment;
alias c_gtk_layout_set_size gtk_layout_set_size;
alias c_gtk_layout_set_vadjustment gtk_layout_set_vadjustment;

// gtk.LevelBar

alias c_gtk_level_bar_get_type gtk_level_bar_get_type;
alias c_gtk_level_bar_new gtk_level_bar_new;
alias c_gtk_level_bar_new_for_interval gtk_level_bar_new_for_interval;
alias c_gtk_level_bar_add_offset_value gtk_level_bar_add_offset_value;
alias c_gtk_level_bar_get_inverted gtk_level_bar_get_inverted;
alias c_gtk_level_bar_get_max_value gtk_level_bar_get_max_value;
alias c_gtk_level_bar_get_min_value gtk_level_bar_get_min_value;
alias c_gtk_level_bar_get_mode gtk_level_bar_get_mode;
alias c_gtk_level_bar_get_offset_value gtk_level_bar_get_offset_value;
alias c_gtk_level_bar_get_value gtk_level_bar_get_value;
alias c_gtk_level_bar_remove_offset_value gtk_level_bar_remove_offset_value;
alias c_gtk_level_bar_set_inverted gtk_level_bar_set_inverted;
alias c_gtk_level_bar_set_max_value gtk_level_bar_set_max_value;
alias c_gtk_level_bar_set_min_value gtk_level_bar_set_min_value;
alias c_gtk_level_bar_set_mode gtk_level_bar_set_mode;
alias c_gtk_level_bar_set_value gtk_level_bar_set_value;

// gtk.LevelBarAccessible

alias c_gtk_level_bar_accessible_get_type gtk_level_bar_accessible_get_type;

// gtk.LinkButton

alias c_gtk_link_button_get_type gtk_link_button_get_type;
alias c_gtk_link_button_new gtk_link_button_new;
alias c_gtk_link_button_new_with_label gtk_link_button_new_with_label;
alias c_gtk_link_button_get_uri gtk_link_button_get_uri;
alias c_gtk_link_button_get_visited gtk_link_button_get_visited;
alias c_gtk_link_button_set_uri gtk_link_button_set_uri;
alias c_gtk_link_button_set_visited gtk_link_button_set_visited;

// gtk.LinkButtonAccessible

alias c_gtk_link_button_accessible_get_type gtk_link_button_accessible_get_type;

// gtk.ListBox

alias c_gtk_list_box_get_type gtk_list_box_get_type;
alias c_gtk_list_box_new gtk_list_box_new;
alias c_gtk_list_box_bind_model gtk_list_box_bind_model;
alias c_gtk_list_box_drag_highlight_row gtk_list_box_drag_highlight_row;
alias c_gtk_list_box_drag_unhighlight_row gtk_list_box_drag_unhighlight_row;
alias c_gtk_list_box_get_activate_on_single_click gtk_list_box_get_activate_on_single_click;
alias c_gtk_list_box_get_adjustment gtk_list_box_get_adjustment;
alias c_gtk_list_box_get_row_at_index gtk_list_box_get_row_at_index;
alias c_gtk_list_box_get_row_at_y gtk_list_box_get_row_at_y;
alias c_gtk_list_box_get_selected_row gtk_list_box_get_selected_row;
alias c_gtk_list_box_get_selected_rows gtk_list_box_get_selected_rows;
alias c_gtk_list_box_get_selection_mode gtk_list_box_get_selection_mode;
alias c_gtk_list_box_insert gtk_list_box_insert;
alias c_gtk_list_box_invalidate_filter gtk_list_box_invalidate_filter;
alias c_gtk_list_box_invalidate_headers gtk_list_box_invalidate_headers;
alias c_gtk_list_box_invalidate_sort gtk_list_box_invalidate_sort;
alias c_gtk_list_box_prepend gtk_list_box_prepend;
alias c_gtk_list_box_select_all gtk_list_box_select_all;
alias c_gtk_list_box_select_row gtk_list_box_select_row;
alias c_gtk_list_box_selected_foreach gtk_list_box_selected_foreach;
alias c_gtk_list_box_set_activate_on_single_click gtk_list_box_set_activate_on_single_click;
alias c_gtk_list_box_set_adjustment gtk_list_box_set_adjustment;
alias c_gtk_list_box_set_filter_func gtk_list_box_set_filter_func;
alias c_gtk_list_box_set_header_func gtk_list_box_set_header_func;
alias c_gtk_list_box_set_placeholder gtk_list_box_set_placeholder;
alias c_gtk_list_box_set_selection_mode gtk_list_box_set_selection_mode;
alias c_gtk_list_box_set_sort_func gtk_list_box_set_sort_func;
alias c_gtk_list_box_unselect_all gtk_list_box_unselect_all;
alias c_gtk_list_box_unselect_row gtk_list_box_unselect_row;

// gtk.ListBoxAccessible

alias c_gtk_list_box_accessible_get_type gtk_list_box_accessible_get_type;

// gtk.ListBoxRow

alias c_gtk_list_box_row_get_type gtk_list_box_row_get_type;
alias c_gtk_list_box_row_new gtk_list_box_row_new;
alias c_gtk_list_box_row_changed gtk_list_box_row_changed;
alias c_gtk_list_box_row_get_activatable gtk_list_box_row_get_activatable;
alias c_gtk_list_box_row_get_header gtk_list_box_row_get_header;
alias c_gtk_list_box_row_get_index gtk_list_box_row_get_index;
alias c_gtk_list_box_row_get_selectable gtk_list_box_row_get_selectable;
alias c_gtk_list_box_row_is_selected gtk_list_box_row_is_selected;
alias c_gtk_list_box_row_set_activatable gtk_list_box_row_set_activatable;
alias c_gtk_list_box_row_set_header gtk_list_box_row_set_header;
alias c_gtk_list_box_row_set_selectable gtk_list_box_row_set_selectable;

// gtk.ListBoxRowAccessible

alias c_gtk_list_box_row_accessible_get_type gtk_list_box_row_accessible_get_type;

// gtk.ListStore

alias c_gtk_list_store_get_type gtk_list_store_get_type;
alias c_gtk_list_store_new gtk_list_store_new;
alias c_gtk_list_store_newv gtk_list_store_newv;
alias c_gtk_list_store_append gtk_list_store_append;
alias c_gtk_list_store_clear gtk_list_store_clear;
alias c_gtk_list_store_insert gtk_list_store_insert;
alias c_gtk_list_store_insert_after gtk_list_store_insert_after;
alias c_gtk_list_store_insert_before gtk_list_store_insert_before;
alias c_gtk_list_store_insert_with_values gtk_list_store_insert_with_values;
alias c_gtk_list_store_insert_with_valuesv gtk_list_store_insert_with_valuesv;
alias c_gtk_list_store_iter_is_valid gtk_list_store_iter_is_valid;
alias c_gtk_list_store_move_after gtk_list_store_move_after;
alias c_gtk_list_store_move_before gtk_list_store_move_before;
alias c_gtk_list_store_prepend gtk_list_store_prepend;
alias c_gtk_list_store_remove gtk_list_store_remove;
alias c_gtk_list_store_reorder gtk_list_store_reorder;
alias c_gtk_list_store_set gtk_list_store_set;
alias c_gtk_list_store_set_column_types gtk_list_store_set_column_types;
alias c_gtk_list_store_set_valist gtk_list_store_set_valist;
alias c_gtk_list_store_set_value gtk_list_store_set_value;
alias c_gtk_list_store_set_valuesv gtk_list_store_set_valuesv;
alias c_gtk_list_store_swap gtk_list_store_swap;

// gtk.LockButton

alias c_gtk_lock_button_get_type gtk_lock_button_get_type;
alias c_gtk_lock_button_new gtk_lock_button_new;
alias c_gtk_lock_button_get_permission gtk_lock_button_get_permission;
alias c_gtk_lock_button_set_permission gtk_lock_button_set_permission;

// gtk.LockButtonAccessible

alias c_gtk_lock_button_accessible_get_type gtk_lock_button_accessible_get_type;

// gtk.Menu

alias c_gtk_menu_get_type gtk_menu_get_type;
alias c_gtk_menu_new gtk_menu_new;
alias c_gtk_menu_new_from_model gtk_menu_new_from_model;
alias c_gtk_menu_get_for_attach_widget gtk_menu_get_for_attach_widget;
alias c_gtk_menu_attach gtk_menu_attach;
alias c_gtk_menu_attach_to_widget gtk_menu_attach_to_widget;
alias c_gtk_menu_detach gtk_menu_detach;
alias c_gtk_menu_get_accel_group gtk_menu_get_accel_group;
alias c_gtk_menu_get_accel_path gtk_menu_get_accel_path;
alias c_gtk_menu_get_active gtk_menu_get_active;
alias c_gtk_menu_get_attach_widget gtk_menu_get_attach_widget;
alias c_gtk_menu_get_monitor gtk_menu_get_monitor;
alias c_gtk_menu_get_reserve_toggle_size gtk_menu_get_reserve_toggle_size;
alias c_gtk_menu_get_tearoff_state gtk_menu_get_tearoff_state;
alias c_gtk_menu_get_title gtk_menu_get_title;
alias c_gtk_menu_place_on_monitor gtk_menu_place_on_monitor;
alias c_gtk_menu_popdown gtk_menu_popdown;
alias c_gtk_menu_popup gtk_menu_popup;
alias c_gtk_menu_popup_at_pointer gtk_menu_popup_at_pointer;
alias c_gtk_menu_popup_at_rect gtk_menu_popup_at_rect;
alias c_gtk_menu_popup_at_widget gtk_menu_popup_at_widget;
alias c_gtk_menu_popup_for_device gtk_menu_popup_for_device;
alias c_gtk_menu_reorder_child gtk_menu_reorder_child;
alias c_gtk_menu_reposition gtk_menu_reposition;
alias c_gtk_menu_set_accel_group gtk_menu_set_accel_group;
alias c_gtk_menu_set_accel_path gtk_menu_set_accel_path;
alias c_gtk_menu_set_active gtk_menu_set_active;
alias c_gtk_menu_set_monitor gtk_menu_set_monitor;
alias c_gtk_menu_set_reserve_toggle_size gtk_menu_set_reserve_toggle_size;
alias c_gtk_menu_set_screen gtk_menu_set_screen;
alias c_gtk_menu_set_tearoff_state gtk_menu_set_tearoff_state;
alias c_gtk_menu_set_title gtk_menu_set_title;

// gtk.MenuAccessible

alias c_gtk_menu_accessible_get_type gtk_menu_accessible_get_type;

// gtk.MenuBar

alias c_gtk_menu_bar_get_type gtk_menu_bar_get_type;
alias c_gtk_menu_bar_new gtk_menu_bar_new;
alias c_gtk_menu_bar_new_from_model gtk_menu_bar_new_from_model;
alias c_gtk_menu_bar_get_child_pack_direction gtk_menu_bar_get_child_pack_direction;
alias c_gtk_menu_bar_get_pack_direction gtk_menu_bar_get_pack_direction;
alias c_gtk_menu_bar_set_child_pack_direction gtk_menu_bar_set_child_pack_direction;
alias c_gtk_menu_bar_set_pack_direction gtk_menu_bar_set_pack_direction;

// gtk.MenuButton

alias c_gtk_menu_button_get_type gtk_menu_button_get_type;
alias c_gtk_menu_button_new gtk_menu_button_new;
alias c_gtk_menu_button_get_align_widget gtk_menu_button_get_align_widget;
alias c_gtk_menu_button_get_direction gtk_menu_button_get_direction;
alias c_gtk_menu_button_get_menu_model gtk_menu_button_get_menu_model;
alias c_gtk_menu_button_get_popover gtk_menu_button_get_popover;
alias c_gtk_menu_button_get_popup gtk_menu_button_get_popup;
alias c_gtk_menu_button_get_use_popover gtk_menu_button_get_use_popover;
alias c_gtk_menu_button_set_align_widget gtk_menu_button_set_align_widget;
alias c_gtk_menu_button_set_direction gtk_menu_button_set_direction;
alias c_gtk_menu_button_set_menu_model gtk_menu_button_set_menu_model;
alias c_gtk_menu_button_set_popover gtk_menu_button_set_popover;
alias c_gtk_menu_button_set_popup gtk_menu_button_set_popup;
alias c_gtk_menu_button_set_use_popover gtk_menu_button_set_use_popover;

// gtk.MenuButtonAccessible

alias c_gtk_menu_button_accessible_get_type gtk_menu_button_accessible_get_type;

// gtk.MenuItem

alias c_gtk_menu_item_get_type gtk_menu_item_get_type;
alias c_gtk_menu_item_new gtk_menu_item_new;
alias c_gtk_menu_item_new_with_label gtk_menu_item_new_with_label;
alias c_gtk_menu_item_new_with_mnemonic gtk_menu_item_new_with_mnemonic;
alias c_gtk_menu_item_activate gtk_menu_item_activate;
alias c_gtk_menu_item_deselect gtk_menu_item_deselect;
alias c_gtk_menu_item_get_accel_path gtk_menu_item_get_accel_path;
alias c_gtk_menu_item_get_label gtk_menu_item_get_label;
alias c_gtk_menu_item_get_reserve_indicator gtk_menu_item_get_reserve_indicator;
alias c_gtk_menu_item_get_right_justified gtk_menu_item_get_right_justified;
alias c_gtk_menu_item_get_submenu gtk_menu_item_get_submenu;
alias c_gtk_menu_item_get_use_underline gtk_menu_item_get_use_underline;
alias c_gtk_menu_item_select gtk_menu_item_select;
alias c_gtk_menu_item_set_accel_path gtk_menu_item_set_accel_path;
alias c_gtk_menu_item_set_label gtk_menu_item_set_label;
alias c_gtk_menu_item_set_reserve_indicator gtk_menu_item_set_reserve_indicator;
alias c_gtk_menu_item_set_right_justified gtk_menu_item_set_right_justified;
alias c_gtk_menu_item_set_submenu gtk_menu_item_set_submenu;
alias c_gtk_menu_item_set_use_underline gtk_menu_item_set_use_underline;
alias c_gtk_menu_item_toggle_size_allocate gtk_menu_item_toggle_size_allocate;
alias c_gtk_menu_item_toggle_size_request gtk_menu_item_toggle_size_request;

// gtk.MenuItemAccessible

alias c_gtk_menu_item_accessible_get_type gtk_menu_item_accessible_get_type;

// gtk.MenuShell

alias c_gtk_menu_shell_get_type gtk_menu_shell_get_type;
alias c_gtk_menu_shell_activate_item gtk_menu_shell_activate_item;
alias c_gtk_menu_shell_append gtk_menu_shell_append;
alias c_gtk_menu_shell_bind_model gtk_menu_shell_bind_model;
alias c_gtk_menu_shell_cancel gtk_menu_shell_cancel;
alias c_gtk_menu_shell_deactivate gtk_menu_shell_deactivate;
alias c_gtk_menu_shell_deselect gtk_menu_shell_deselect;
alias c_gtk_menu_shell_get_parent_shell gtk_menu_shell_get_parent_shell;
alias c_gtk_menu_shell_get_selected_item gtk_menu_shell_get_selected_item;
alias c_gtk_menu_shell_get_take_focus gtk_menu_shell_get_take_focus;
alias c_gtk_menu_shell_insert gtk_menu_shell_insert;
alias c_gtk_menu_shell_prepend gtk_menu_shell_prepend;
alias c_gtk_menu_shell_select_first gtk_menu_shell_select_first;
alias c_gtk_menu_shell_select_item gtk_menu_shell_select_item;
alias c_gtk_menu_shell_set_take_focus gtk_menu_shell_set_take_focus;

// gtk.MenuShellAccessible

alias c_gtk_menu_shell_accessible_get_type gtk_menu_shell_accessible_get_type;

// gtk.MenuToolButton

alias c_gtk_menu_tool_button_get_type gtk_menu_tool_button_get_type;
alias c_gtk_menu_tool_button_new gtk_menu_tool_button_new;
alias c_gtk_menu_tool_button_new_from_stock gtk_menu_tool_button_new_from_stock;
alias c_gtk_menu_tool_button_get_menu gtk_menu_tool_button_get_menu;
alias c_gtk_menu_tool_button_set_arrow_tooltip_markup gtk_menu_tool_button_set_arrow_tooltip_markup;
alias c_gtk_menu_tool_button_set_arrow_tooltip_text gtk_menu_tool_button_set_arrow_tooltip_text;
alias c_gtk_menu_tool_button_set_menu gtk_menu_tool_button_set_menu;

// gtk.MessageDialog

alias c_gtk_message_dialog_get_type gtk_message_dialog_get_type;
alias c_gtk_message_dialog_new gtk_message_dialog_new;
alias c_gtk_message_dialog_new_with_markup gtk_message_dialog_new_with_markup;
alias c_gtk_message_dialog_format_secondary_markup gtk_message_dialog_format_secondary_markup;
alias c_gtk_message_dialog_format_secondary_text gtk_message_dialog_format_secondary_text;
alias c_gtk_message_dialog_get_image gtk_message_dialog_get_image;
alias c_gtk_message_dialog_get_message_area gtk_message_dialog_get_message_area;
alias c_gtk_message_dialog_set_image gtk_message_dialog_set_image;
alias c_gtk_message_dialog_set_markup gtk_message_dialog_set_markup;

// gtk.Misc

alias c_gtk_misc_get_type gtk_misc_get_type;
alias c_gtk_misc_get_alignment gtk_misc_get_alignment;
alias c_gtk_misc_get_padding gtk_misc_get_padding;
alias c_gtk_misc_set_alignment gtk_misc_set_alignment;
alias c_gtk_misc_set_padding gtk_misc_set_padding;

// gtk.ModelButton

alias c_gtk_model_button_get_type gtk_model_button_get_type;
alias c_gtk_model_button_new gtk_model_button_new;

// gtk.MountOperation

alias c_gtk_mount_operation_get_type gtk_mount_operation_get_type;
alias c_gtk_mount_operation_new gtk_mount_operation_new;
alias c_gtk_mount_operation_get_parent gtk_mount_operation_get_parent;
alias c_gtk_mount_operation_get_screen gtk_mount_operation_get_screen;
alias c_gtk_mount_operation_is_showing gtk_mount_operation_is_showing;
alias c_gtk_mount_operation_set_parent gtk_mount_operation_set_parent;
alias c_gtk_mount_operation_set_screen gtk_mount_operation_set_screen;
alias c_gtk_show_uri gtk_show_uri;

// gtk.NativeDialog

alias c_gtk_native_dialog_get_type gtk_native_dialog_get_type;
alias c_gtk_native_dialog_destroy gtk_native_dialog_destroy;
alias c_gtk_native_dialog_get_modal gtk_native_dialog_get_modal;
alias c_gtk_native_dialog_get_title gtk_native_dialog_get_title;
alias c_gtk_native_dialog_get_transient_for gtk_native_dialog_get_transient_for;
alias c_gtk_native_dialog_get_visible gtk_native_dialog_get_visible;
alias c_gtk_native_dialog_hide gtk_native_dialog_hide;
alias c_gtk_native_dialog_run gtk_native_dialog_run;
alias c_gtk_native_dialog_set_modal gtk_native_dialog_set_modal;
alias c_gtk_native_dialog_set_title gtk_native_dialog_set_title;
alias c_gtk_native_dialog_set_transient_for gtk_native_dialog_set_transient_for;
alias c_gtk_native_dialog_show gtk_native_dialog_show;

// gtk.Notebook

alias c_gtk_notebook_get_type gtk_notebook_get_type;
alias c_gtk_notebook_new gtk_notebook_new;
alias c_gtk_notebook_append_page gtk_notebook_append_page;
alias c_gtk_notebook_append_page_menu gtk_notebook_append_page_menu;
alias c_gtk_notebook_detach_tab gtk_notebook_detach_tab;
alias c_gtk_notebook_get_action_widget gtk_notebook_get_action_widget;
alias c_gtk_notebook_get_current_page gtk_notebook_get_current_page;
alias c_gtk_notebook_get_group_name gtk_notebook_get_group_name;
alias c_gtk_notebook_get_menu_label gtk_notebook_get_menu_label;
alias c_gtk_notebook_get_menu_label_text gtk_notebook_get_menu_label_text;
alias c_gtk_notebook_get_n_pages gtk_notebook_get_n_pages;
alias c_gtk_notebook_get_nth_page gtk_notebook_get_nth_page;
alias c_gtk_notebook_get_scrollable gtk_notebook_get_scrollable;
alias c_gtk_notebook_get_show_border gtk_notebook_get_show_border;
alias c_gtk_notebook_get_show_tabs gtk_notebook_get_show_tabs;
alias c_gtk_notebook_get_tab_detachable gtk_notebook_get_tab_detachable;
alias c_gtk_notebook_get_tab_hborder gtk_notebook_get_tab_hborder;
alias c_gtk_notebook_get_tab_label gtk_notebook_get_tab_label;
alias c_gtk_notebook_get_tab_label_text gtk_notebook_get_tab_label_text;
alias c_gtk_notebook_get_tab_pos gtk_notebook_get_tab_pos;
alias c_gtk_notebook_get_tab_reorderable gtk_notebook_get_tab_reorderable;
alias c_gtk_notebook_get_tab_vborder gtk_notebook_get_tab_vborder;
alias c_gtk_notebook_insert_page gtk_notebook_insert_page;
alias c_gtk_notebook_insert_page_menu gtk_notebook_insert_page_menu;
alias c_gtk_notebook_next_page gtk_notebook_next_page;
alias c_gtk_notebook_page_num gtk_notebook_page_num;
alias c_gtk_notebook_popup_disable gtk_notebook_popup_disable;
alias c_gtk_notebook_popup_enable gtk_notebook_popup_enable;
alias c_gtk_notebook_prepend_page gtk_notebook_prepend_page;
alias c_gtk_notebook_prepend_page_menu gtk_notebook_prepend_page_menu;
alias c_gtk_notebook_prev_page gtk_notebook_prev_page;
alias c_gtk_notebook_remove_page gtk_notebook_remove_page;
alias c_gtk_notebook_reorder_child gtk_notebook_reorder_child;
alias c_gtk_notebook_set_action_widget gtk_notebook_set_action_widget;
alias c_gtk_notebook_set_current_page gtk_notebook_set_current_page;
alias c_gtk_notebook_set_group_name gtk_notebook_set_group_name;
alias c_gtk_notebook_set_menu_label gtk_notebook_set_menu_label;
alias c_gtk_notebook_set_menu_label_text gtk_notebook_set_menu_label_text;
alias c_gtk_notebook_set_scrollable gtk_notebook_set_scrollable;
alias c_gtk_notebook_set_show_border gtk_notebook_set_show_border;
alias c_gtk_notebook_set_show_tabs gtk_notebook_set_show_tabs;
alias c_gtk_notebook_set_tab_detachable gtk_notebook_set_tab_detachable;
alias c_gtk_notebook_set_tab_label gtk_notebook_set_tab_label;
alias c_gtk_notebook_set_tab_label_text gtk_notebook_set_tab_label_text;
alias c_gtk_notebook_set_tab_pos gtk_notebook_set_tab_pos;
alias c_gtk_notebook_set_tab_reorderable gtk_notebook_set_tab_reorderable;

// gtk.NotebookAccessible

alias c_gtk_notebook_accessible_get_type gtk_notebook_accessible_get_type;

// gtk.NotebookPageAccessible

alias c_gtk_notebook_page_accessible_get_type gtk_notebook_page_accessible_get_type;
alias c_gtk_notebook_page_accessible_new gtk_notebook_page_accessible_new;
alias c_gtk_notebook_page_accessible_invalidate gtk_notebook_page_accessible_invalidate;

// gtk.NumerableIcon

alias c_gtk_numerable_icon_get_type gtk_numerable_icon_get_type;
alias c_gtk_numerable_icon_new gtk_numerable_icon_new;
alias c_gtk_numerable_icon_new_with_style_context gtk_numerable_icon_new_with_style_context;
alias c_gtk_numerable_icon_get_background_gicon gtk_numerable_icon_get_background_gicon;
alias c_gtk_numerable_icon_get_background_icon_name gtk_numerable_icon_get_background_icon_name;
alias c_gtk_numerable_icon_get_count gtk_numerable_icon_get_count;
alias c_gtk_numerable_icon_get_label gtk_numerable_icon_get_label;
alias c_gtk_numerable_icon_get_style_context gtk_numerable_icon_get_style_context;
alias c_gtk_numerable_icon_set_background_gicon gtk_numerable_icon_set_background_gicon;
alias c_gtk_numerable_icon_set_background_icon_name gtk_numerable_icon_set_background_icon_name;
alias c_gtk_numerable_icon_set_count gtk_numerable_icon_set_count;
alias c_gtk_numerable_icon_set_label gtk_numerable_icon_set_label;
alias c_gtk_numerable_icon_set_style_context gtk_numerable_icon_set_style_context;

// gtk.OffscreenWindow

alias c_gtk_offscreen_window_get_type gtk_offscreen_window_get_type;
alias c_gtk_offscreen_window_new gtk_offscreen_window_new;
alias c_gtk_offscreen_window_get_pixbuf gtk_offscreen_window_get_pixbuf;
alias c_gtk_offscreen_window_get_surface gtk_offscreen_window_get_surface;

// gtk.Orientable

alias c_gtk_orientable_get_type gtk_orientable_get_type;
alias c_gtk_orientable_get_orientation gtk_orientable_get_orientation;
alias c_gtk_orientable_set_orientation gtk_orientable_set_orientation;

// gtk.Overlay

alias c_gtk_overlay_get_type gtk_overlay_get_type;
alias c_gtk_overlay_new gtk_overlay_new;
alias c_gtk_overlay_add_overlay gtk_overlay_add_overlay;
alias c_gtk_overlay_get_overlay_pass_through gtk_overlay_get_overlay_pass_through;
alias c_gtk_overlay_reorder_overlay gtk_overlay_reorder_overlay;
alias c_gtk_overlay_set_overlay_pass_through gtk_overlay_set_overlay_pass_through;

// gtk.PadController

alias c_gtk_pad_controller_get_type gtk_pad_controller_get_type;
alias c_gtk_pad_controller_new gtk_pad_controller_new;
alias c_gtk_pad_controller_set_action gtk_pad_controller_set_action;
alias c_gtk_pad_controller_set_action_entries gtk_pad_controller_set_action_entries;

// gtk.PageSetup

alias c_gtk_page_setup_get_type gtk_page_setup_get_type;
alias c_gtk_page_setup_new gtk_page_setup_new;
alias c_gtk_page_setup_new_from_file gtk_page_setup_new_from_file;
alias c_gtk_page_setup_new_from_gvariant gtk_page_setup_new_from_gvariant;
alias c_gtk_page_setup_new_from_key_file gtk_page_setup_new_from_key_file;
alias c_gtk_page_setup_copy gtk_page_setup_copy;
alias c_gtk_page_setup_get_bottom_margin gtk_page_setup_get_bottom_margin;
alias c_gtk_page_setup_get_left_margin gtk_page_setup_get_left_margin;
alias c_gtk_page_setup_get_orientation gtk_page_setup_get_orientation;
alias c_gtk_page_setup_get_page_height gtk_page_setup_get_page_height;
alias c_gtk_page_setup_get_page_width gtk_page_setup_get_page_width;
alias c_gtk_page_setup_get_paper_height gtk_page_setup_get_paper_height;
alias c_gtk_page_setup_get_paper_size gtk_page_setup_get_paper_size;
alias c_gtk_page_setup_get_paper_width gtk_page_setup_get_paper_width;
alias c_gtk_page_setup_get_right_margin gtk_page_setup_get_right_margin;
alias c_gtk_page_setup_get_top_margin gtk_page_setup_get_top_margin;
alias c_gtk_page_setup_load_file gtk_page_setup_load_file;
alias c_gtk_page_setup_load_key_file gtk_page_setup_load_key_file;
alias c_gtk_page_setup_set_bottom_margin gtk_page_setup_set_bottom_margin;
alias c_gtk_page_setup_set_left_margin gtk_page_setup_set_left_margin;
alias c_gtk_page_setup_set_orientation gtk_page_setup_set_orientation;
alias c_gtk_page_setup_set_paper_size gtk_page_setup_set_paper_size;
alias c_gtk_page_setup_set_paper_size_and_default_margins gtk_page_setup_set_paper_size_and_default_margins;
alias c_gtk_page_setup_set_right_margin gtk_page_setup_set_right_margin;
alias c_gtk_page_setup_set_top_margin gtk_page_setup_set_top_margin;
alias c_gtk_page_setup_to_file gtk_page_setup_to_file;
alias c_gtk_page_setup_to_gvariant gtk_page_setup_to_gvariant;
alias c_gtk_page_setup_to_key_file gtk_page_setup_to_key_file;

// gtk.Paned

alias c_gtk_paned_get_type gtk_paned_get_type;
alias c_gtk_paned_new gtk_paned_new;
alias c_gtk_paned_add1 gtk_paned_add1;
alias c_gtk_paned_add2 gtk_paned_add2;
alias c_gtk_paned_get_child1 gtk_paned_get_child1;
alias c_gtk_paned_get_child2 gtk_paned_get_child2;
alias c_gtk_paned_get_handle_window gtk_paned_get_handle_window;
alias c_gtk_paned_get_position gtk_paned_get_position;
alias c_gtk_paned_get_wide_handle gtk_paned_get_wide_handle;
alias c_gtk_paned_pack1 gtk_paned_pack1;
alias c_gtk_paned_pack2 gtk_paned_pack2;
alias c_gtk_paned_set_position gtk_paned_set_position;
alias c_gtk_paned_set_wide_handle gtk_paned_set_wide_handle;

// gtk.PanedAccessible

alias c_gtk_paned_accessible_get_type gtk_paned_accessible_get_type;

// gtk.PaperSize

alias c_gtk_paper_size_get_type gtk_paper_size_get_type;
alias c_gtk_paper_size_new gtk_paper_size_new;
alias c_gtk_paper_size_new_custom gtk_paper_size_new_custom;
alias c_gtk_paper_size_new_from_gvariant gtk_paper_size_new_from_gvariant;
alias c_gtk_paper_size_new_from_ipp gtk_paper_size_new_from_ipp;
alias c_gtk_paper_size_new_from_key_file gtk_paper_size_new_from_key_file;
alias c_gtk_paper_size_new_from_ppd gtk_paper_size_new_from_ppd;
alias c_gtk_paper_size_copy gtk_paper_size_copy;
alias c_gtk_paper_size_free gtk_paper_size_free;
alias c_gtk_paper_size_get_default_bottom_margin gtk_paper_size_get_default_bottom_margin;
alias c_gtk_paper_size_get_default_left_margin gtk_paper_size_get_default_left_margin;
alias c_gtk_paper_size_get_default_right_margin gtk_paper_size_get_default_right_margin;
alias c_gtk_paper_size_get_default_top_margin gtk_paper_size_get_default_top_margin;
alias c_gtk_paper_size_get_display_name gtk_paper_size_get_display_name;
alias c_gtk_paper_size_get_height gtk_paper_size_get_height;
alias c_gtk_paper_size_get_name gtk_paper_size_get_name;
alias c_gtk_paper_size_get_ppd_name gtk_paper_size_get_ppd_name;
alias c_gtk_paper_size_get_width gtk_paper_size_get_width;
alias c_gtk_paper_size_is_custom gtk_paper_size_is_custom;
alias c_gtk_paper_size_is_equal gtk_paper_size_is_equal;
alias c_gtk_paper_size_is_ipp gtk_paper_size_is_ipp;
alias c_gtk_paper_size_set_size gtk_paper_size_set_size;
alias c_gtk_paper_size_to_gvariant gtk_paper_size_to_gvariant;
alias c_gtk_paper_size_to_key_file gtk_paper_size_to_key_file;
alias c_gtk_paper_size_get_default gtk_paper_size_get_default;
alias c_gtk_paper_size_get_paper_sizes gtk_paper_size_get_paper_sizes;

// gtk.PlacesSidebar

alias c_gtk_places_sidebar_get_type gtk_places_sidebar_get_type;
alias c_gtk_places_sidebar_new gtk_places_sidebar_new;
alias c_gtk_places_sidebar_add_shortcut gtk_places_sidebar_add_shortcut;
alias c_gtk_places_sidebar_get_local_only gtk_places_sidebar_get_local_only;
alias c_gtk_places_sidebar_get_location gtk_places_sidebar_get_location;
alias c_gtk_places_sidebar_get_nth_bookmark gtk_places_sidebar_get_nth_bookmark;
alias c_gtk_places_sidebar_get_open_flags gtk_places_sidebar_get_open_flags;
alias c_gtk_places_sidebar_get_show_connect_to_server gtk_places_sidebar_get_show_connect_to_server;
alias c_gtk_places_sidebar_get_show_desktop gtk_places_sidebar_get_show_desktop;
alias c_gtk_places_sidebar_get_show_enter_location gtk_places_sidebar_get_show_enter_location;
alias c_gtk_places_sidebar_get_show_other_locations gtk_places_sidebar_get_show_other_locations;
alias c_gtk_places_sidebar_get_show_recent gtk_places_sidebar_get_show_recent;
alias c_gtk_places_sidebar_get_show_trash gtk_places_sidebar_get_show_trash;
alias c_gtk_places_sidebar_list_shortcuts gtk_places_sidebar_list_shortcuts;
alias c_gtk_places_sidebar_remove_shortcut gtk_places_sidebar_remove_shortcut;
alias c_gtk_places_sidebar_set_drop_targets_visible gtk_places_sidebar_set_drop_targets_visible;
alias c_gtk_places_sidebar_set_local_only gtk_places_sidebar_set_local_only;
alias c_gtk_places_sidebar_set_location gtk_places_sidebar_set_location;
alias c_gtk_places_sidebar_set_open_flags gtk_places_sidebar_set_open_flags;
alias c_gtk_places_sidebar_set_show_connect_to_server gtk_places_sidebar_set_show_connect_to_server;
alias c_gtk_places_sidebar_set_show_desktop gtk_places_sidebar_set_show_desktop;
alias c_gtk_places_sidebar_set_show_enter_location gtk_places_sidebar_set_show_enter_location;
alias c_gtk_places_sidebar_set_show_other_locations gtk_places_sidebar_set_show_other_locations;
alias c_gtk_places_sidebar_set_show_recent gtk_places_sidebar_set_show_recent;
alias c_gtk_places_sidebar_set_show_trash gtk_places_sidebar_set_show_trash;

// gtk.Plug

alias c_gtk_plug_get_type gtk_plug_get_type;
alias c_gtk_plug_new gtk_plug_new;
alias c_gtk_plug_new_for_display gtk_plug_new_for_display;
alias c_gtk_plug_construct gtk_plug_construct;
alias c_gtk_plug_construct_for_display gtk_plug_construct_for_display;
alias c_gtk_plug_get_embedded gtk_plug_get_embedded;
alias c_gtk_plug_get_id gtk_plug_get_id;
alias c_gtk_plug_get_socket_window gtk_plug_get_socket_window;

// gtk.Popover

alias c_gtk_popover_get_type gtk_popover_get_type;
alias c_gtk_popover_new gtk_popover_new;
alias c_gtk_popover_new_from_model gtk_popover_new_from_model;
alias c_gtk_popover_bind_model gtk_popover_bind_model;
alias c_gtk_popover_get_constrain_to gtk_popover_get_constrain_to;
alias c_gtk_popover_get_default_widget gtk_popover_get_default_widget;
alias c_gtk_popover_get_modal gtk_popover_get_modal;
alias c_gtk_popover_get_pointing_to gtk_popover_get_pointing_to;
alias c_gtk_popover_get_position gtk_popover_get_position;
alias c_gtk_popover_get_relative_to gtk_popover_get_relative_to;
alias c_gtk_popover_get_transitions_enabled gtk_popover_get_transitions_enabled;
alias c_gtk_popover_popdown gtk_popover_popdown;
alias c_gtk_popover_popup gtk_popover_popup;
alias c_gtk_popover_set_constrain_to gtk_popover_set_constrain_to;
alias c_gtk_popover_set_default_widget gtk_popover_set_default_widget;
alias c_gtk_popover_set_modal gtk_popover_set_modal;
alias c_gtk_popover_set_pointing_to gtk_popover_set_pointing_to;
alias c_gtk_popover_set_position gtk_popover_set_position;
alias c_gtk_popover_set_relative_to gtk_popover_set_relative_to;
alias c_gtk_popover_set_transitions_enabled gtk_popover_set_transitions_enabled;

// gtk.PopoverAccessible

alias c_gtk_popover_accessible_get_type gtk_popover_accessible_get_type;

// gtk.PopoverMenu

alias c_gtk_popover_menu_get_type gtk_popover_menu_get_type;
alias c_gtk_popover_menu_new gtk_popover_menu_new;
alias c_gtk_popover_menu_open_submenu gtk_popover_menu_open_submenu;

// gtk.PrintContext

alias c_gtk_print_context_get_type gtk_print_context_get_type;
alias c_gtk_print_context_create_pango_context gtk_print_context_create_pango_context;
alias c_gtk_print_context_create_pango_layout gtk_print_context_create_pango_layout;
alias c_gtk_print_context_get_cairo_context gtk_print_context_get_cairo_context;
alias c_gtk_print_context_get_dpi_x gtk_print_context_get_dpi_x;
alias c_gtk_print_context_get_dpi_y gtk_print_context_get_dpi_y;
alias c_gtk_print_context_get_hard_margins gtk_print_context_get_hard_margins;
alias c_gtk_print_context_get_height gtk_print_context_get_height;
alias c_gtk_print_context_get_page_setup gtk_print_context_get_page_setup;
alias c_gtk_print_context_get_pango_fontmap gtk_print_context_get_pango_fontmap;
alias c_gtk_print_context_get_width gtk_print_context_get_width;
alias c_gtk_print_context_set_cairo_context gtk_print_context_set_cairo_context;

// gtk.PrintOperation

alias c_gtk_print_operation_get_type gtk_print_operation_get_type;
alias c_gtk_print_operation_new gtk_print_operation_new;
alias c_gtk_print_operation_cancel gtk_print_operation_cancel;
alias c_gtk_print_operation_draw_page_finish gtk_print_operation_draw_page_finish;
alias c_gtk_print_operation_get_default_page_setup gtk_print_operation_get_default_page_setup;
alias c_gtk_print_operation_get_embed_page_setup gtk_print_operation_get_embed_page_setup;
alias c_gtk_print_operation_get_error gtk_print_operation_get_error;
alias c_gtk_print_operation_get_has_selection gtk_print_operation_get_has_selection;
alias c_gtk_print_operation_get_n_pages_to_print gtk_print_operation_get_n_pages_to_print;
alias c_gtk_print_operation_get_print_settings gtk_print_operation_get_print_settings;
alias c_gtk_print_operation_get_status gtk_print_operation_get_status;
alias c_gtk_print_operation_get_status_string gtk_print_operation_get_status_string;
alias c_gtk_print_operation_get_support_selection gtk_print_operation_get_support_selection;
alias c_gtk_print_operation_is_finished gtk_print_operation_is_finished;
alias c_gtk_print_operation_run gtk_print_operation_run;
alias c_gtk_print_operation_set_allow_async gtk_print_operation_set_allow_async;
alias c_gtk_print_operation_set_current_page gtk_print_operation_set_current_page;
alias c_gtk_print_operation_set_custom_tab_label gtk_print_operation_set_custom_tab_label;
alias c_gtk_print_operation_set_default_page_setup gtk_print_operation_set_default_page_setup;
alias c_gtk_print_operation_set_defer_drawing gtk_print_operation_set_defer_drawing;
alias c_gtk_print_operation_set_embed_page_setup gtk_print_operation_set_embed_page_setup;
alias c_gtk_print_operation_set_export_filename gtk_print_operation_set_export_filename;
alias c_gtk_print_operation_set_has_selection gtk_print_operation_set_has_selection;
alias c_gtk_print_operation_set_job_name gtk_print_operation_set_job_name;
alias c_gtk_print_operation_set_n_pages gtk_print_operation_set_n_pages;
alias c_gtk_print_operation_set_print_settings gtk_print_operation_set_print_settings;
alias c_gtk_print_operation_set_show_progress gtk_print_operation_set_show_progress;
alias c_gtk_print_operation_set_support_selection gtk_print_operation_set_support_selection;
alias c_gtk_print_operation_set_track_print_status gtk_print_operation_set_track_print_status;
alias c_gtk_print_operation_set_unit gtk_print_operation_set_unit;
alias c_gtk_print_operation_set_use_full_page gtk_print_operation_set_use_full_page;
alias c_gtk_print_run_page_setup_dialog gtk_print_run_page_setup_dialog;
alias c_gtk_print_run_page_setup_dialog_async gtk_print_run_page_setup_dialog_async;

// gtk.PrintOperationPreview

alias c_gtk_print_operation_preview_get_type gtk_print_operation_preview_get_type;
alias c_gtk_print_operation_preview_end_preview gtk_print_operation_preview_end_preview;
alias c_gtk_print_operation_preview_is_selected gtk_print_operation_preview_is_selected;
alias c_gtk_print_operation_preview_render_page gtk_print_operation_preview_render_page;

// gtk.PrintSettings

alias c_gtk_print_settings_get_type gtk_print_settings_get_type;
alias c_gtk_print_settings_new gtk_print_settings_new;
alias c_gtk_print_settings_new_from_file gtk_print_settings_new_from_file;
alias c_gtk_print_settings_new_from_gvariant gtk_print_settings_new_from_gvariant;
alias c_gtk_print_settings_new_from_key_file gtk_print_settings_new_from_key_file;
alias c_gtk_print_settings_copy gtk_print_settings_copy;
alias c_gtk_print_settings_foreach gtk_print_settings_foreach;
alias c_gtk_print_settings_get gtk_print_settings_get;
alias c_gtk_print_settings_get_bool gtk_print_settings_get_bool;
alias c_gtk_print_settings_get_collate gtk_print_settings_get_collate;
alias c_gtk_print_settings_get_default_source gtk_print_settings_get_default_source;
alias c_gtk_print_settings_get_dither gtk_print_settings_get_dither;
alias c_gtk_print_settings_get_double gtk_print_settings_get_double;
alias c_gtk_print_settings_get_double_with_default gtk_print_settings_get_double_with_default;
alias c_gtk_print_settings_get_duplex gtk_print_settings_get_duplex;
alias c_gtk_print_settings_get_finishings gtk_print_settings_get_finishings;
alias c_gtk_print_settings_get_int gtk_print_settings_get_int;
alias c_gtk_print_settings_get_int_with_default gtk_print_settings_get_int_with_default;
alias c_gtk_print_settings_get_length gtk_print_settings_get_length;
alias c_gtk_print_settings_get_media_type gtk_print_settings_get_media_type;
alias c_gtk_print_settings_get_n_copies gtk_print_settings_get_n_copies;
alias c_gtk_print_settings_get_number_up gtk_print_settings_get_number_up;
alias c_gtk_print_settings_get_number_up_layout gtk_print_settings_get_number_up_layout;
alias c_gtk_print_settings_get_orientation gtk_print_settings_get_orientation;
alias c_gtk_print_settings_get_output_bin gtk_print_settings_get_output_bin;
alias c_gtk_print_settings_get_page_ranges gtk_print_settings_get_page_ranges;
alias c_gtk_print_settings_get_page_set gtk_print_settings_get_page_set;
alias c_gtk_print_settings_get_paper_height gtk_print_settings_get_paper_height;
alias c_gtk_print_settings_get_paper_size gtk_print_settings_get_paper_size;
alias c_gtk_print_settings_get_paper_width gtk_print_settings_get_paper_width;
alias c_gtk_print_settings_get_print_pages gtk_print_settings_get_print_pages;
alias c_gtk_print_settings_get_printer gtk_print_settings_get_printer;
alias c_gtk_print_settings_get_printer_lpi gtk_print_settings_get_printer_lpi;
alias c_gtk_print_settings_get_quality gtk_print_settings_get_quality;
alias c_gtk_print_settings_get_resolution gtk_print_settings_get_resolution;
alias c_gtk_print_settings_get_resolution_x gtk_print_settings_get_resolution_x;
alias c_gtk_print_settings_get_resolution_y gtk_print_settings_get_resolution_y;
alias c_gtk_print_settings_get_reverse gtk_print_settings_get_reverse;
alias c_gtk_print_settings_get_scale gtk_print_settings_get_scale;
alias c_gtk_print_settings_get_use_color gtk_print_settings_get_use_color;
alias c_gtk_print_settings_has_key gtk_print_settings_has_key;
alias c_gtk_print_settings_load_file gtk_print_settings_load_file;
alias c_gtk_print_settings_load_key_file gtk_print_settings_load_key_file;
alias c_gtk_print_settings_set gtk_print_settings_set;
alias c_gtk_print_settings_set_bool gtk_print_settings_set_bool;
alias c_gtk_print_settings_set_collate gtk_print_settings_set_collate;
alias c_gtk_print_settings_set_default_source gtk_print_settings_set_default_source;
alias c_gtk_print_settings_set_dither gtk_print_settings_set_dither;
alias c_gtk_print_settings_set_double gtk_print_settings_set_double;
alias c_gtk_print_settings_set_duplex gtk_print_settings_set_duplex;
alias c_gtk_print_settings_set_finishings gtk_print_settings_set_finishings;
alias c_gtk_print_settings_set_int gtk_print_settings_set_int;
alias c_gtk_print_settings_set_length gtk_print_settings_set_length;
alias c_gtk_print_settings_set_media_type gtk_print_settings_set_media_type;
alias c_gtk_print_settings_set_n_copies gtk_print_settings_set_n_copies;
alias c_gtk_print_settings_set_number_up gtk_print_settings_set_number_up;
alias c_gtk_print_settings_set_number_up_layout gtk_print_settings_set_number_up_layout;
alias c_gtk_print_settings_set_orientation gtk_print_settings_set_orientation;
alias c_gtk_print_settings_set_output_bin gtk_print_settings_set_output_bin;
alias c_gtk_print_settings_set_page_ranges gtk_print_settings_set_page_ranges;
alias c_gtk_print_settings_set_page_set gtk_print_settings_set_page_set;
alias c_gtk_print_settings_set_paper_height gtk_print_settings_set_paper_height;
alias c_gtk_print_settings_set_paper_size gtk_print_settings_set_paper_size;
alias c_gtk_print_settings_set_paper_width gtk_print_settings_set_paper_width;
alias c_gtk_print_settings_set_print_pages gtk_print_settings_set_print_pages;
alias c_gtk_print_settings_set_printer gtk_print_settings_set_printer;
alias c_gtk_print_settings_set_printer_lpi gtk_print_settings_set_printer_lpi;
alias c_gtk_print_settings_set_quality gtk_print_settings_set_quality;
alias c_gtk_print_settings_set_resolution gtk_print_settings_set_resolution;
alias c_gtk_print_settings_set_resolution_xy gtk_print_settings_set_resolution_xy;
alias c_gtk_print_settings_set_reverse gtk_print_settings_set_reverse;
alias c_gtk_print_settings_set_scale gtk_print_settings_set_scale;
alias c_gtk_print_settings_set_use_color gtk_print_settings_set_use_color;
alias c_gtk_print_settings_to_file gtk_print_settings_to_file;
alias c_gtk_print_settings_to_gvariant gtk_print_settings_to_gvariant;
alias c_gtk_print_settings_to_key_file gtk_print_settings_to_key_file;
alias c_gtk_print_settings_unset gtk_print_settings_unset;

// gtk.ProgressBar

alias c_gtk_progress_bar_get_type gtk_progress_bar_get_type;
alias c_gtk_progress_bar_new gtk_progress_bar_new;
alias c_gtk_progress_bar_get_ellipsize gtk_progress_bar_get_ellipsize;
alias c_gtk_progress_bar_get_fraction gtk_progress_bar_get_fraction;
alias c_gtk_progress_bar_get_inverted gtk_progress_bar_get_inverted;
alias c_gtk_progress_bar_get_pulse_step gtk_progress_bar_get_pulse_step;
alias c_gtk_progress_bar_get_show_text gtk_progress_bar_get_show_text;
alias c_gtk_progress_bar_get_text gtk_progress_bar_get_text;
alias c_gtk_progress_bar_pulse gtk_progress_bar_pulse;
alias c_gtk_progress_bar_set_ellipsize gtk_progress_bar_set_ellipsize;
alias c_gtk_progress_bar_set_fraction gtk_progress_bar_set_fraction;
alias c_gtk_progress_bar_set_inverted gtk_progress_bar_set_inverted;
alias c_gtk_progress_bar_set_pulse_step gtk_progress_bar_set_pulse_step;
alias c_gtk_progress_bar_set_show_text gtk_progress_bar_set_show_text;
alias c_gtk_progress_bar_set_text gtk_progress_bar_set_text;

// gtk.ProgressBarAccessible

alias c_gtk_progress_bar_accessible_get_type gtk_progress_bar_accessible_get_type;

// gtk.RadioAction

alias c_gtk_radio_action_get_type gtk_radio_action_get_type;
alias c_gtk_radio_action_new gtk_radio_action_new;
alias c_gtk_radio_action_get_current_value gtk_radio_action_get_current_value;
alias c_gtk_radio_action_get_group gtk_radio_action_get_group;
alias c_gtk_radio_action_join_group gtk_radio_action_join_group;
alias c_gtk_radio_action_set_current_value gtk_radio_action_set_current_value;
alias c_gtk_radio_action_set_group gtk_radio_action_set_group;

// gtk.RadioButton

alias c_gtk_radio_button_get_type gtk_radio_button_get_type;
alias c_gtk_radio_button_new gtk_radio_button_new;
alias c_gtk_radio_button_new_from_widget gtk_radio_button_new_from_widget;
alias c_gtk_radio_button_new_with_label gtk_radio_button_new_with_label;
alias c_gtk_radio_button_new_with_label_from_widget gtk_radio_button_new_with_label_from_widget;
alias c_gtk_radio_button_new_with_mnemonic gtk_radio_button_new_with_mnemonic;
alias c_gtk_radio_button_new_with_mnemonic_from_widget gtk_radio_button_new_with_mnemonic_from_widget;
alias c_gtk_radio_button_get_group gtk_radio_button_get_group;
alias c_gtk_radio_button_join_group gtk_radio_button_join_group;
alias c_gtk_radio_button_set_group gtk_radio_button_set_group;

// gtk.RadioButtonAccessible

alias c_gtk_radio_button_accessible_get_type gtk_radio_button_accessible_get_type;

// gtk.RadioMenuItem

alias c_gtk_radio_menu_item_get_type gtk_radio_menu_item_get_type;
alias c_gtk_radio_menu_item_new gtk_radio_menu_item_new;
alias c_gtk_radio_menu_item_new_from_widget gtk_radio_menu_item_new_from_widget;
alias c_gtk_radio_menu_item_new_with_label gtk_radio_menu_item_new_with_label;
alias c_gtk_radio_menu_item_new_with_label_from_widget gtk_radio_menu_item_new_with_label_from_widget;
alias c_gtk_radio_menu_item_new_with_mnemonic gtk_radio_menu_item_new_with_mnemonic;
alias c_gtk_radio_menu_item_new_with_mnemonic_from_widget gtk_radio_menu_item_new_with_mnemonic_from_widget;
alias c_gtk_radio_menu_item_get_group gtk_radio_menu_item_get_group;
alias c_gtk_radio_menu_item_join_group gtk_radio_menu_item_join_group;
alias c_gtk_radio_menu_item_set_group gtk_radio_menu_item_set_group;

// gtk.RadioMenuItemAccessible

alias c_gtk_radio_menu_item_accessible_get_type gtk_radio_menu_item_accessible_get_type;

// gtk.RadioToolButton

alias c_gtk_radio_tool_button_get_type gtk_radio_tool_button_get_type;
alias c_gtk_radio_tool_button_new gtk_radio_tool_button_new;
alias c_gtk_radio_tool_button_new_from_stock gtk_radio_tool_button_new_from_stock;
alias c_gtk_radio_tool_button_new_from_widget gtk_radio_tool_button_new_from_widget;
alias c_gtk_radio_tool_button_new_with_stock_from_widget gtk_radio_tool_button_new_with_stock_from_widget;
alias c_gtk_radio_tool_button_get_group gtk_radio_tool_button_get_group;
alias c_gtk_radio_tool_button_set_group gtk_radio_tool_button_set_group;

// gtk.Range

alias c_gtk_range_get_type gtk_range_get_type;
alias c_gtk_range_get_adjustment gtk_range_get_adjustment;
alias c_gtk_range_get_fill_level gtk_range_get_fill_level;
alias c_gtk_range_get_flippable gtk_range_get_flippable;
alias c_gtk_range_get_inverted gtk_range_get_inverted;
alias c_gtk_range_get_lower_stepper_sensitivity gtk_range_get_lower_stepper_sensitivity;
alias c_gtk_range_get_min_slider_size gtk_range_get_min_slider_size;
alias c_gtk_range_get_range_rect gtk_range_get_range_rect;
alias c_gtk_range_get_restrict_to_fill_level gtk_range_get_restrict_to_fill_level;
alias c_gtk_range_get_round_digits gtk_range_get_round_digits;
alias c_gtk_range_get_show_fill_level gtk_range_get_show_fill_level;
alias c_gtk_range_get_slider_range gtk_range_get_slider_range;
alias c_gtk_range_get_slider_size_fixed gtk_range_get_slider_size_fixed;
alias c_gtk_range_get_upper_stepper_sensitivity gtk_range_get_upper_stepper_sensitivity;
alias c_gtk_range_get_value gtk_range_get_value;
alias c_gtk_range_set_adjustment gtk_range_set_adjustment;
alias c_gtk_range_set_fill_level gtk_range_set_fill_level;
alias c_gtk_range_set_flippable gtk_range_set_flippable;
alias c_gtk_range_set_increments gtk_range_set_increments;
alias c_gtk_range_set_inverted gtk_range_set_inverted;
alias c_gtk_range_set_lower_stepper_sensitivity gtk_range_set_lower_stepper_sensitivity;
alias c_gtk_range_set_min_slider_size gtk_range_set_min_slider_size;
alias c_gtk_range_set_range gtk_range_set_range;
alias c_gtk_range_set_restrict_to_fill_level gtk_range_set_restrict_to_fill_level;
alias c_gtk_range_set_round_digits gtk_range_set_round_digits;
alias c_gtk_range_set_show_fill_level gtk_range_set_show_fill_level;
alias c_gtk_range_set_slider_size_fixed gtk_range_set_slider_size_fixed;
alias c_gtk_range_set_upper_stepper_sensitivity gtk_range_set_upper_stepper_sensitivity;
alias c_gtk_range_set_value gtk_range_set_value;

// gtk.RangeAccessible

alias c_gtk_range_accessible_get_type gtk_range_accessible_get_type;

// gtk.RcProperty

alias c_gtk_rc_property_parse_border gtk_rc_property_parse_border;
alias c_gtk_rc_property_parse_color gtk_rc_property_parse_color;
alias c_gtk_rc_property_parse_enum gtk_rc_property_parse_enum;
alias c_gtk_rc_property_parse_flags gtk_rc_property_parse_flags;
alias c_gtk_rc_property_parse_requisition gtk_rc_property_parse_requisition;

// gtk.RcStyle

alias c_gtk_rc_style_get_type gtk_rc_style_get_type;
alias c_gtk_rc_style_new gtk_rc_style_new;
alias c_gtk_rc_style_copy gtk_rc_style_copy;
alias c_gtk_rc_add_default_file gtk_rc_add_default_file;
alias c_gtk_rc_find_module_in_path gtk_rc_find_module_in_path;
alias c_gtk_rc_find_pixmap_in_path gtk_rc_find_pixmap_in_path;
alias c_gtk_rc_get_default_files gtk_rc_get_default_files;
alias c_gtk_rc_get_im_module_file gtk_rc_get_im_module_file;
alias c_gtk_rc_get_im_module_path gtk_rc_get_im_module_path;
alias c_gtk_rc_get_module_dir gtk_rc_get_module_dir;
alias c_gtk_rc_get_style gtk_rc_get_style;
alias c_gtk_rc_get_style_by_paths gtk_rc_get_style_by_paths;
alias c_gtk_rc_get_theme_dir gtk_rc_get_theme_dir;
alias c_gtk_rc_parse gtk_rc_parse;
alias c_gtk_rc_parse_color gtk_rc_parse_color;
alias c_gtk_rc_parse_color_full gtk_rc_parse_color_full;
alias c_gtk_rc_parse_priority gtk_rc_parse_priority;
alias c_gtk_rc_parse_state gtk_rc_parse_state;
alias c_gtk_rc_parse_string gtk_rc_parse_string;
alias c_gtk_rc_reparse_all gtk_rc_reparse_all;
alias c_gtk_rc_reparse_all_for_settings gtk_rc_reparse_all_for_settings;
alias c_gtk_rc_reset_styles gtk_rc_reset_styles;
alias c_gtk_rc_scanner_new gtk_rc_scanner_new;
alias c_gtk_rc_set_default_files gtk_rc_set_default_files;

// gtk.RecentAction

alias c_gtk_recent_action_get_type gtk_recent_action_get_type;
alias c_gtk_recent_action_new gtk_recent_action_new;
alias c_gtk_recent_action_new_for_manager gtk_recent_action_new_for_manager;
alias c_gtk_recent_action_get_show_numbers gtk_recent_action_get_show_numbers;
alias c_gtk_recent_action_set_show_numbers gtk_recent_action_set_show_numbers;

// gtk.RecentChooser

alias c_gtk_recent_chooser_get_type gtk_recent_chooser_get_type;
alias c_gtk_recent_chooser_add_filter gtk_recent_chooser_add_filter;
alias c_gtk_recent_chooser_get_current_item gtk_recent_chooser_get_current_item;
alias c_gtk_recent_chooser_get_current_uri gtk_recent_chooser_get_current_uri;
alias c_gtk_recent_chooser_get_filter gtk_recent_chooser_get_filter;
alias c_gtk_recent_chooser_get_items gtk_recent_chooser_get_items;
alias c_gtk_recent_chooser_get_limit gtk_recent_chooser_get_limit;
alias c_gtk_recent_chooser_get_local_only gtk_recent_chooser_get_local_only;
alias c_gtk_recent_chooser_get_select_multiple gtk_recent_chooser_get_select_multiple;
alias c_gtk_recent_chooser_get_show_icons gtk_recent_chooser_get_show_icons;
alias c_gtk_recent_chooser_get_show_not_found gtk_recent_chooser_get_show_not_found;
alias c_gtk_recent_chooser_get_show_private gtk_recent_chooser_get_show_private;
alias c_gtk_recent_chooser_get_show_tips gtk_recent_chooser_get_show_tips;
alias c_gtk_recent_chooser_get_sort_type gtk_recent_chooser_get_sort_type;
alias c_gtk_recent_chooser_get_uris gtk_recent_chooser_get_uris;
alias c_gtk_recent_chooser_list_filters gtk_recent_chooser_list_filters;
alias c_gtk_recent_chooser_remove_filter gtk_recent_chooser_remove_filter;
alias c_gtk_recent_chooser_select_all gtk_recent_chooser_select_all;
alias c_gtk_recent_chooser_select_uri gtk_recent_chooser_select_uri;
alias c_gtk_recent_chooser_set_current_uri gtk_recent_chooser_set_current_uri;
alias c_gtk_recent_chooser_set_filter gtk_recent_chooser_set_filter;
alias c_gtk_recent_chooser_set_limit gtk_recent_chooser_set_limit;
alias c_gtk_recent_chooser_set_local_only gtk_recent_chooser_set_local_only;
alias c_gtk_recent_chooser_set_select_multiple gtk_recent_chooser_set_select_multiple;
alias c_gtk_recent_chooser_set_show_icons gtk_recent_chooser_set_show_icons;
alias c_gtk_recent_chooser_set_show_not_found gtk_recent_chooser_set_show_not_found;
alias c_gtk_recent_chooser_set_show_private gtk_recent_chooser_set_show_private;
alias c_gtk_recent_chooser_set_show_tips gtk_recent_chooser_set_show_tips;
alias c_gtk_recent_chooser_set_sort_func gtk_recent_chooser_set_sort_func;
alias c_gtk_recent_chooser_set_sort_type gtk_recent_chooser_set_sort_type;
alias c_gtk_recent_chooser_unselect_all gtk_recent_chooser_unselect_all;
alias c_gtk_recent_chooser_unselect_uri gtk_recent_chooser_unselect_uri;

// gtk.RecentChooserDialog

alias c_gtk_recent_chooser_dialog_get_type gtk_recent_chooser_dialog_get_type;
alias c_gtk_recent_chooser_dialog_new gtk_recent_chooser_dialog_new;
alias c_gtk_recent_chooser_dialog_new_for_manager gtk_recent_chooser_dialog_new_for_manager;

// gtk.RecentChooserMenu

alias c_gtk_recent_chooser_menu_get_type gtk_recent_chooser_menu_get_type;
alias c_gtk_recent_chooser_menu_new gtk_recent_chooser_menu_new;
alias c_gtk_recent_chooser_menu_new_for_manager gtk_recent_chooser_menu_new_for_manager;
alias c_gtk_recent_chooser_menu_get_show_numbers gtk_recent_chooser_menu_get_show_numbers;
alias c_gtk_recent_chooser_menu_set_show_numbers gtk_recent_chooser_menu_set_show_numbers;

// gtk.RecentChooserWidget

alias c_gtk_recent_chooser_widget_get_type gtk_recent_chooser_widget_get_type;
alias c_gtk_recent_chooser_widget_new gtk_recent_chooser_widget_new;
alias c_gtk_recent_chooser_widget_new_for_manager gtk_recent_chooser_widget_new_for_manager;

// gtk.RecentFilter

alias c_gtk_recent_filter_get_type gtk_recent_filter_get_type;
alias c_gtk_recent_filter_new gtk_recent_filter_new;
alias c_gtk_recent_filter_add_age gtk_recent_filter_add_age;
alias c_gtk_recent_filter_add_application gtk_recent_filter_add_application;
alias c_gtk_recent_filter_add_custom gtk_recent_filter_add_custom;
alias c_gtk_recent_filter_add_group gtk_recent_filter_add_group;
alias c_gtk_recent_filter_add_mime_type gtk_recent_filter_add_mime_type;
alias c_gtk_recent_filter_add_pattern gtk_recent_filter_add_pattern;
alias c_gtk_recent_filter_add_pixbuf_formats gtk_recent_filter_add_pixbuf_formats;
alias c_gtk_recent_filter_filter gtk_recent_filter_filter;
alias c_gtk_recent_filter_get_name gtk_recent_filter_get_name;
alias c_gtk_recent_filter_get_needed gtk_recent_filter_get_needed;
alias c_gtk_recent_filter_set_name gtk_recent_filter_set_name;

// gtk.RecentInfo

alias c_gtk_recent_info_get_type gtk_recent_info_get_type;
alias c_gtk_recent_info_create_app_info gtk_recent_info_create_app_info;
alias c_gtk_recent_info_exists gtk_recent_info_exists;
alias c_gtk_recent_info_get_added gtk_recent_info_get_added;
alias c_gtk_recent_info_get_age gtk_recent_info_get_age;
alias c_gtk_recent_info_get_application_info gtk_recent_info_get_application_info;
alias c_gtk_recent_info_get_applications gtk_recent_info_get_applications;
alias c_gtk_recent_info_get_description gtk_recent_info_get_description;
alias c_gtk_recent_info_get_display_name gtk_recent_info_get_display_name;
alias c_gtk_recent_info_get_gicon gtk_recent_info_get_gicon;
alias c_gtk_recent_info_get_groups gtk_recent_info_get_groups;
alias c_gtk_recent_info_get_icon gtk_recent_info_get_icon;
alias c_gtk_recent_info_get_mime_type gtk_recent_info_get_mime_type;
alias c_gtk_recent_info_get_modified gtk_recent_info_get_modified;
alias c_gtk_recent_info_get_private_hint gtk_recent_info_get_private_hint;
alias c_gtk_recent_info_get_short_name gtk_recent_info_get_short_name;
alias c_gtk_recent_info_get_uri gtk_recent_info_get_uri;
alias c_gtk_recent_info_get_uri_display gtk_recent_info_get_uri_display;
alias c_gtk_recent_info_get_visited gtk_recent_info_get_visited;
alias c_gtk_recent_info_has_application gtk_recent_info_has_application;
alias c_gtk_recent_info_has_group gtk_recent_info_has_group;
alias c_gtk_recent_info_is_local gtk_recent_info_is_local;
alias c_gtk_recent_info_last_application gtk_recent_info_last_application;
alias c_gtk_recent_info_match gtk_recent_info_match;
alias c_gtk_recent_info_ref gtk_recent_info_ref;
alias c_gtk_recent_info_unref gtk_recent_info_unref;

// gtk.RecentManager

alias c_gtk_recent_manager_get_type gtk_recent_manager_get_type;
alias c_gtk_recent_manager_new gtk_recent_manager_new;
alias c_gtk_recent_manager_get_default gtk_recent_manager_get_default;
alias c_gtk_recent_manager_add_full gtk_recent_manager_add_full;
alias c_gtk_recent_manager_add_item gtk_recent_manager_add_item;
alias c_gtk_recent_manager_get_items gtk_recent_manager_get_items;
alias c_gtk_recent_manager_has_item gtk_recent_manager_has_item;
alias c_gtk_recent_manager_lookup_item gtk_recent_manager_lookup_item;
alias c_gtk_recent_manager_move_item gtk_recent_manager_move_item;
alias c_gtk_recent_manager_purge_items gtk_recent_manager_purge_items;
alias c_gtk_recent_manager_remove_item gtk_recent_manager_remove_item;

// gtk.RendererCellAccessible

alias c_gtk_renderer_cell_accessible_get_type gtk_renderer_cell_accessible_get_type;
alias c_gtk_renderer_cell_accessible_new gtk_renderer_cell_accessible_new;

// gtk.Requisition

alias c_gtk_requisition_get_type gtk_requisition_get_type;
alias c_gtk_requisition_new gtk_requisition_new;
alias c_gtk_requisition_copy gtk_requisition_copy;
alias c_gtk_requisition_free gtk_requisition_free;

// gtk.Revealer

alias c_gtk_revealer_get_type gtk_revealer_get_type;
alias c_gtk_revealer_new gtk_revealer_new;
alias c_gtk_revealer_get_child_revealed gtk_revealer_get_child_revealed;
alias c_gtk_revealer_get_reveal_child gtk_revealer_get_reveal_child;
alias c_gtk_revealer_get_transition_duration gtk_revealer_get_transition_duration;
alias c_gtk_revealer_get_transition_type gtk_revealer_get_transition_type;
alias c_gtk_revealer_set_reveal_child gtk_revealer_set_reveal_child;
alias c_gtk_revealer_set_transition_duration gtk_revealer_set_transition_duration;
alias c_gtk_revealer_set_transition_type gtk_revealer_set_transition_type;

// gtk.Scale

alias c_gtk_scale_get_type gtk_scale_get_type;
alias c_gtk_scale_new gtk_scale_new;
alias c_gtk_scale_new_with_range gtk_scale_new_with_range;
alias c_gtk_scale_add_mark gtk_scale_add_mark;
alias c_gtk_scale_clear_marks gtk_scale_clear_marks;
alias c_gtk_scale_get_digits gtk_scale_get_digits;
alias c_gtk_scale_get_draw_value gtk_scale_get_draw_value;
alias c_gtk_scale_get_has_origin gtk_scale_get_has_origin;
alias c_gtk_scale_get_layout gtk_scale_get_layout;
alias c_gtk_scale_get_layout_offsets gtk_scale_get_layout_offsets;
alias c_gtk_scale_get_value_pos gtk_scale_get_value_pos;
alias c_gtk_scale_set_digits gtk_scale_set_digits;
alias c_gtk_scale_set_draw_value gtk_scale_set_draw_value;
alias c_gtk_scale_set_has_origin gtk_scale_set_has_origin;
alias c_gtk_scale_set_value_pos gtk_scale_set_value_pos;

// gtk.ScaleAccessible

alias c_gtk_scale_accessible_get_type gtk_scale_accessible_get_type;

// gtk.ScaleButton

alias c_gtk_scale_button_get_type gtk_scale_button_get_type;
alias c_gtk_scale_button_new gtk_scale_button_new;
alias c_gtk_scale_button_get_adjustment gtk_scale_button_get_adjustment;
alias c_gtk_scale_button_get_minus_button gtk_scale_button_get_minus_button;
alias c_gtk_scale_button_get_plus_button gtk_scale_button_get_plus_button;
alias c_gtk_scale_button_get_popup gtk_scale_button_get_popup;
alias c_gtk_scale_button_get_value gtk_scale_button_get_value;
alias c_gtk_scale_button_set_adjustment gtk_scale_button_set_adjustment;
alias c_gtk_scale_button_set_icons gtk_scale_button_set_icons;
alias c_gtk_scale_button_set_value gtk_scale_button_set_value;

// gtk.ScaleButtonAccessible

alias c_gtk_scale_button_accessible_get_type gtk_scale_button_accessible_get_type;

// gtk.Scrollable

alias c_gtk_scrollable_get_type gtk_scrollable_get_type;
alias c_gtk_scrollable_get_border gtk_scrollable_get_border;
alias c_gtk_scrollable_get_hadjustment gtk_scrollable_get_hadjustment;
alias c_gtk_scrollable_get_hscroll_policy gtk_scrollable_get_hscroll_policy;
alias c_gtk_scrollable_get_vadjustment gtk_scrollable_get_vadjustment;
alias c_gtk_scrollable_get_vscroll_policy gtk_scrollable_get_vscroll_policy;
alias c_gtk_scrollable_set_hadjustment gtk_scrollable_set_hadjustment;
alias c_gtk_scrollable_set_hscroll_policy gtk_scrollable_set_hscroll_policy;
alias c_gtk_scrollable_set_vadjustment gtk_scrollable_set_vadjustment;
alias c_gtk_scrollable_set_vscroll_policy gtk_scrollable_set_vscroll_policy;

// gtk.Scrollbar

alias c_gtk_scrollbar_get_type gtk_scrollbar_get_type;
alias c_gtk_scrollbar_new gtk_scrollbar_new;

// gtk.ScrolledWindow

alias c_gtk_scrolled_window_get_type gtk_scrolled_window_get_type;
alias c_gtk_scrolled_window_new gtk_scrolled_window_new;
alias c_gtk_scrolled_window_add_with_viewport gtk_scrolled_window_add_with_viewport;
alias c_gtk_scrolled_window_get_capture_button_press gtk_scrolled_window_get_capture_button_press;
alias c_gtk_scrolled_window_get_hadjustment gtk_scrolled_window_get_hadjustment;
alias c_gtk_scrolled_window_get_hscrollbar gtk_scrolled_window_get_hscrollbar;
alias c_gtk_scrolled_window_get_kinetic_scrolling gtk_scrolled_window_get_kinetic_scrolling;
alias c_gtk_scrolled_window_get_max_content_height gtk_scrolled_window_get_max_content_height;
alias c_gtk_scrolled_window_get_max_content_width gtk_scrolled_window_get_max_content_width;
alias c_gtk_scrolled_window_get_min_content_height gtk_scrolled_window_get_min_content_height;
alias c_gtk_scrolled_window_get_min_content_width gtk_scrolled_window_get_min_content_width;
alias c_gtk_scrolled_window_get_overlay_scrolling gtk_scrolled_window_get_overlay_scrolling;
alias c_gtk_scrolled_window_get_placement gtk_scrolled_window_get_placement;
alias c_gtk_scrolled_window_get_policy gtk_scrolled_window_get_policy;
alias c_gtk_scrolled_window_get_propagate_natural_height gtk_scrolled_window_get_propagate_natural_height;
alias c_gtk_scrolled_window_get_propagate_natural_width gtk_scrolled_window_get_propagate_natural_width;
alias c_gtk_scrolled_window_get_shadow_type gtk_scrolled_window_get_shadow_type;
alias c_gtk_scrolled_window_get_vadjustment gtk_scrolled_window_get_vadjustment;
alias c_gtk_scrolled_window_get_vscrollbar gtk_scrolled_window_get_vscrollbar;
alias c_gtk_scrolled_window_set_capture_button_press gtk_scrolled_window_set_capture_button_press;
alias c_gtk_scrolled_window_set_hadjustment gtk_scrolled_window_set_hadjustment;
alias c_gtk_scrolled_window_set_kinetic_scrolling gtk_scrolled_window_set_kinetic_scrolling;
alias c_gtk_scrolled_window_set_max_content_height gtk_scrolled_window_set_max_content_height;
alias c_gtk_scrolled_window_set_max_content_width gtk_scrolled_window_set_max_content_width;
alias c_gtk_scrolled_window_set_min_content_height gtk_scrolled_window_set_min_content_height;
alias c_gtk_scrolled_window_set_min_content_width gtk_scrolled_window_set_min_content_width;
alias c_gtk_scrolled_window_set_overlay_scrolling gtk_scrolled_window_set_overlay_scrolling;
alias c_gtk_scrolled_window_set_placement gtk_scrolled_window_set_placement;
alias c_gtk_scrolled_window_set_policy gtk_scrolled_window_set_policy;
alias c_gtk_scrolled_window_set_propagate_natural_height gtk_scrolled_window_set_propagate_natural_height;
alias c_gtk_scrolled_window_set_propagate_natural_width gtk_scrolled_window_set_propagate_natural_width;
alias c_gtk_scrolled_window_set_shadow_type gtk_scrolled_window_set_shadow_type;
alias c_gtk_scrolled_window_set_vadjustment gtk_scrolled_window_set_vadjustment;
alias c_gtk_scrolled_window_unset_placement gtk_scrolled_window_unset_placement;

// gtk.ScrolledWindowAccessible

alias c_gtk_scrolled_window_accessible_get_type gtk_scrolled_window_accessible_get_type;

// gtk.SearchBar

alias c_gtk_search_bar_get_type gtk_search_bar_get_type;
alias c_gtk_search_bar_new gtk_search_bar_new;
alias c_gtk_search_bar_connect_entry gtk_search_bar_connect_entry;
alias c_gtk_search_bar_get_search_mode gtk_search_bar_get_search_mode;
alias c_gtk_search_bar_get_show_close_button gtk_search_bar_get_show_close_button;
alias c_gtk_search_bar_handle_event gtk_search_bar_handle_event;
alias c_gtk_search_bar_set_search_mode gtk_search_bar_set_search_mode;
alias c_gtk_search_bar_set_show_close_button gtk_search_bar_set_show_close_button;

// gtk.SearchEntry

alias c_gtk_search_entry_get_type gtk_search_entry_get_type;
alias c_gtk_search_entry_new gtk_search_entry_new;
alias c_gtk_search_entry_handle_event gtk_search_entry_handle_event;

// gtk.SelectionData

alias c_gtk_selection_data_get_type gtk_selection_data_get_type;
alias c_gtk_selection_data_copy gtk_selection_data_copy;
alias c_gtk_selection_data_free gtk_selection_data_free;
alias c_gtk_selection_data_get_data gtk_selection_data_get_data;
alias c_gtk_selection_data_get_data_type gtk_selection_data_get_data_type;
alias c_gtk_selection_data_get_data_with_length gtk_selection_data_get_data_with_length;
alias c_gtk_selection_data_get_display gtk_selection_data_get_display;
alias c_gtk_selection_data_get_format gtk_selection_data_get_format;
alias c_gtk_selection_data_get_length gtk_selection_data_get_length;
alias c_gtk_selection_data_get_pixbuf gtk_selection_data_get_pixbuf;
alias c_gtk_selection_data_get_selection gtk_selection_data_get_selection;
alias c_gtk_selection_data_get_target gtk_selection_data_get_target;
alias c_gtk_selection_data_get_targets gtk_selection_data_get_targets;
alias c_gtk_selection_data_get_text gtk_selection_data_get_text;
alias c_gtk_selection_data_get_uris gtk_selection_data_get_uris;
alias c_gtk_selection_data_set gtk_selection_data_set;
alias c_gtk_selection_data_set_pixbuf gtk_selection_data_set_pixbuf;
alias c_gtk_selection_data_set_text gtk_selection_data_set_text;
alias c_gtk_selection_data_set_uris gtk_selection_data_set_uris;
alias c_gtk_selection_data_targets_include_image gtk_selection_data_targets_include_image;
alias c_gtk_selection_data_targets_include_rich_text gtk_selection_data_targets_include_rich_text;
alias c_gtk_selection_data_targets_include_text gtk_selection_data_targets_include_text;
alias c_gtk_selection_data_targets_include_uri gtk_selection_data_targets_include_uri;
alias c_gtk_selection_add_target gtk_selection_add_target;
alias c_gtk_selection_add_targets gtk_selection_add_targets;
alias c_gtk_selection_clear_targets gtk_selection_clear_targets;
alias c_gtk_selection_convert gtk_selection_convert;
alias c_gtk_selection_owner_set gtk_selection_owner_set;
alias c_gtk_selection_owner_set_for_display gtk_selection_owner_set_for_display;
alias c_gtk_selection_remove_all gtk_selection_remove_all;

// gtk.Separator

alias c_gtk_separator_get_type gtk_separator_get_type;
alias c_gtk_separator_new gtk_separator_new;

// gtk.SeparatorMenuItem

alias c_gtk_separator_menu_item_get_type gtk_separator_menu_item_get_type;
alias c_gtk_separator_menu_item_new gtk_separator_menu_item_new;

// gtk.SeparatorToolItem

alias c_gtk_separator_tool_item_get_type gtk_separator_tool_item_get_type;
alias c_gtk_separator_tool_item_new gtk_separator_tool_item_new;
alias c_gtk_separator_tool_item_get_draw gtk_separator_tool_item_get_draw;
alias c_gtk_separator_tool_item_set_draw gtk_separator_tool_item_set_draw;

// gtk.Settings

alias c_gtk_settings_get_type gtk_settings_get_type;
alias c_gtk_settings_get_default gtk_settings_get_default;
alias c_gtk_settings_get_for_screen gtk_settings_get_for_screen;
alias c_gtk_settings_install_property gtk_settings_install_property;
alias c_gtk_settings_install_property_parser gtk_settings_install_property_parser;
alias c_gtk_settings_reset_property gtk_settings_reset_property;
alias c_gtk_settings_set_double_property gtk_settings_set_double_property;
alias c_gtk_settings_set_long_property gtk_settings_set_long_property;
alias c_gtk_settings_set_property_value gtk_settings_set_property_value;
alias c_gtk_settings_set_string_property gtk_settings_set_string_property;

// gtk.ShortcutLabel

alias c_gtk_shortcut_label_get_type gtk_shortcut_label_get_type;
alias c_gtk_shortcut_label_new gtk_shortcut_label_new;
alias c_gtk_shortcut_label_get_accelerator gtk_shortcut_label_get_accelerator;
alias c_gtk_shortcut_label_get_disabled_text gtk_shortcut_label_get_disabled_text;
alias c_gtk_shortcut_label_set_accelerator gtk_shortcut_label_set_accelerator;
alias c_gtk_shortcut_label_set_disabled_text gtk_shortcut_label_set_disabled_text;

// gtk.ShortcutsGroup

alias c_gtk_shortcuts_group_get_type gtk_shortcuts_group_get_type;

// gtk.ShortcutsSection

alias c_gtk_shortcuts_section_get_type gtk_shortcuts_section_get_type;

// gtk.ShortcutsShortcut

alias c_gtk_shortcuts_shortcut_get_type gtk_shortcuts_shortcut_get_type;

// gtk.ShortcutsWindow

alias c_gtk_shortcuts_window_get_type gtk_shortcuts_window_get_type;

// gtk.SizeGroup

alias c_gtk_size_group_get_type gtk_size_group_get_type;
alias c_gtk_size_group_new gtk_size_group_new;
alias c_gtk_size_group_add_widget gtk_size_group_add_widget;
alias c_gtk_size_group_get_ignore_hidden gtk_size_group_get_ignore_hidden;
alias c_gtk_size_group_get_mode gtk_size_group_get_mode;
alias c_gtk_size_group_get_widgets gtk_size_group_get_widgets;
alias c_gtk_size_group_remove_widget gtk_size_group_remove_widget;
alias c_gtk_size_group_set_ignore_hidden gtk_size_group_set_ignore_hidden;
alias c_gtk_size_group_set_mode gtk_size_group_set_mode;

// gtk.Socket

alias c_gtk_socket_get_type gtk_socket_get_type;
alias c_gtk_socket_new gtk_socket_new;
alias c_gtk_socket_add_id gtk_socket_add_id;
alias c_gtk_socket_get_id gtk_socket_get_id;
alias c_gtk_socket_get_plug_window gtk_socket_get_plug_window;

// gtk.SpinButton

alias c_gtk_spin_button_get_type gtk_spin_button_get_type;
alias c_gtk_spin_button_new gtk_spin_button_new;
alias c_gtk_spin_button_new_with_range gtk_spin_button_new_with_range;
alias c_gtk_spin_button_configure gtk_spin_button_configure;
alias c_gtk_spin_button_get_adjustment gtk_spin_button_get_adjustment;
alias c_gtk_spin_button_get_digits gtk_spin_button_get_digits;
alias c_gtk_spin_button_get_increments gtk_spin_button_get_increments;
alias c_gtk_spin_button_get_numeric gtk_spin_button_get_numeric;
alias c_gtk_spin_button_get_range gtk_spin_button_get_range;
alias c_gtk_spin_button_get_snap_to_ticks gtk_spin_button_get_snap_to_ticks;
alias c_gtk_spin_button_get_update_policy gtk_spin_button_get_update_policy;
alias c_gtk_spin_button_get_value gtk_spin_button_get_value;
alias c_gtk_spin_button_get_value_as_int gtk_spin_button_get_value_as_int;
alias c_gtk_spin_button_get_wrap gtk_spin_button_get_wrap;
alias c_gtk_spin_button_set_adjustment gtk_spin_button_set_adjustment;
alias c_gtk_spin_button_set_digits gtk_spin_button_set_digits;
alias c_gtk_spin_button_set_increments gtk_spin_button_set_increments;
alias c_gtk_spin_button_set_numeric gtk_spin_button_set_numeric;
alias c_gtk_spin_button_set_range gtk_spin_button_set_range;
alias c_gtk_spin_button_set_snap_to_ticks gtk_spin_button_set_snap_to_ticks;
alias c_gtk_spin_button_set_update_policy gtk_spin_button_set_update_policy;
alias c_gtk_spin_button_set_value gtk_spin_button_set_value;
alias c_gtk_spin_button_set_wrap gtk_spin_button_set_wrap;
alias c_gtk_spin_button_spin gtk_spin_button_spin;
alias c_gtk_spin_button_update gtk_spin_button_update;

// gtk.SpinButtonAccessible

alias c_gtk_spin_button_accessible_get_type gtk_spin_button_accessible_get_type;

// gtk.Spinner

alias c_gtk_spinner_get_type gtk_spinner_get_type;
alias c_gtk_spinner_new gtk_spinner_new;
alias c_gtk_spinner_start gtk_spinner_start;
alias c_gtk_spinner_stop gtk_spinner_stop;

// gtk.SpinnerAccessible

alias c_gtk_spinner_accessible_get_type gtk_spinner_accessible_get_type;

// gtk.Stack

alias c_gtk_stack_get_type gtk_stack_get_type;
alias c_gtk_stack_new gtk_stack_new;
alias c_gtk_stack_add_named gtk_stack_add_named;
alias c_gtk_stack_add_titled gtk_stack_add_titled;
alias c_gtk_stack_get_child_by_name gtk_stack_get_child_by_name;
alias c_gtk_stack_get_hhomogeneous gtk_stack_get_hhomogeneous;
alias c_gtk_stack_get_homogeneous gtk_stack_get_homogeneous;
alias c_gtk_stack_get_interpolate_size gtk_stack_get_interpolate_size;
alias c_gtk_stack_get_transition_duration gtk_stack_get_transition_duration;
alias c_gtk_stack_get_transition_running gtk_stack_get_transition_running;
alias c_gtk_stack_get_transition_type gtk_stack_get_transition_type;
alias c_gtk_stack_get_vhomogeneous gtk_stack_get_vhomogeneous;
alias c_gtk_stack_get_visible_child gtk_stack_get_visible_child;
alias c_gtk_stack_get_visible_child_name gtk_stack_get_visible_child_name;
alias c_gtk_stack_set_hhomogeneous gtk_stack_set_hhomogeneous;
alias c_gtk_stack_set_homogeneous gtk_stack_set_homogeneous;
alias c_gtk_stack_set_interpolate_size gtk_stack_set_interpolate_size;
alias c_gtk_stack_set_transition_duration gtk_stack_set_transition_duration;
alias c_gtk_stack_set_transition_type gtk_stack_set_transition_type;
alias c_gtk_stack_set_vhomogeneous gtk_stack_set_vhomogeneous;
alias c_gtk_stack_set_visible_child gtk_stack_set_visible_child;
alias c_gtk_stack_set_visible_child_full gtk_stack_set_visible_child_full;
alias c_gtk_stack_set_visible_child_name gtk_stack_set_visible_child_name;

// gtk.StackAccessible

alias c_gtk_stack_accessible_get_type gtk_stack_accessible_get_type;

// gtk.StackSidebar

alias c_gtk_stack_sidebar_get_type gtk_stack_sidebar_get_type;
alias c_gtk_stack_sidebar_new gtk_stack_sidebar_new;
alias c_gtk_stack_sidebar_get_stack gtk_stack_sidebar_get_stack;
alias c_gtk_stack_sidebar_set_stack gtk_stack_sidebar_set_stack;

// gtk.StackSwitcher

alias c_gtk_stack_switcher_get_type gtk_stack_switcher_get_type;
alias c_gtk_stack_switcher_new gtk_stack_switcher_new;
alias c_gtk_stack_switcher_get_stack gtk_stack_switcher_get_stack;
alias c_gtk_stack_switcher_set_stack gtk_stack_switcher_set_stack;

// gtk.StatusIcon

alias c_gtk_status_icon_get_type gtk_status_icon_get_type;
alias c_gtk_status_icon_new gtk_status_icon_new;
alias c_gtk_status_icon_new_from_file gtk_status_icon_new_from_file;
alias c_gtk_status_icon_new_from_gicon gtk_status_icon_new_from_gicon;
alias c_gtk_status_icon_new_from_icon_name gtk_status_icon_new_from_icon_name;
alias c_gtk_status_icon_new_from_pixbuf gtk_status_icon_new_from_pixbuf;
alias c_gtk_status_icon_new_from_stock gtk_status_icon_new_from_stock;
alias c_gtk_status_icon_position_menu gtk_status_icon_position_menu;
alias c_gtk_status_icon_get_geometry gtk_status_icon_get_geometry;
alias c_gtk_status_icon_get_gicon gtk_status_icon_get_gicon;
alias c_gtk_status_icon_get_has_tooltip gtk_status_icon_get_has_tooltip;
alias c_gtk_status_icon_get_icon_name gtk_status_icon_get_icon_name;
alias c_gtk_status_icon_get_pixbuf gtk_status_icon_get_pixbuf;
alias c_gtk_status_icon_get_screen gtk_status_icon_get_screen;
alias c_gtk_status_icon_get_size gtk_status_icon_get_size;
alias c_gtk_status_icon_get_stock gtk_status_icon_get_stock;
alias c_gtk_status_icon_get_storage_type gtk_status_icon_get_storage_type;
alias c_gtk_status_icon_get_title gtk_status_icon_get_title;
alias c_gtk_status_icon_get_tooltip_markup gtk_status_icon_get_tooltip_markup;
alias c_gtk_status_icon_get_tooltip_text gtk_status_icon_get_tooltip_text;
alias c_gtk_status_icon_get_visible gtk_status_icon_get_visible;
alias c_gtk_status_icon_get_x11_window_id gtk_status_icon_get_x11_window_id;
alias c_gtk_status_icon_is_embedded gtk_status_icon_is_embedded;
alias c_gtk_status_icon_set_from_file gtk_status_icon_set_from_file;
alias c_gtk_status_icon_set_from_gicon gtk_status_icon_set_from_gicon;
alias c_gtk_status_icon_set_from_icon_name gtk_status_icon_set_from_icon_name;
alias c_gtk_status_icon_set_from_pixbuf gtk_status_icon_set_from_pixbuf;
alias c_gtk_status_icon_set_from_stock gtk_status_icon_set_from_stock;
alias c_gtk_status_icon_set_has_tooltip gtk_status_icon_set_has_tooltip;
alias c_gtk_status_icon_set_name gtk_status_icon_set_name;
alias c_gtk_status_icon_set_screen gtk_status_icon_set_screen;
alias c_gtk_status_icon_set_title gtk_status_icon_set_title;
alias c_gtk_status_icon_set_tooltip_markup gtk_status_icon_set_tooltip_markup;
alias c_gtk_status_icon_set_tooltip_text gtk_status_icon_set_tooltip_text;
alias c_gtk_status_icon_set_visible gtk_status_icon_set_visible;

// gtk.Statusbar

alias c_gtk_statusbar_get_type gtk_statusbar_get_type;
alias c_gtk_statusbar_new gtk_statusbar_new;
alias c_gtk_statusbar_get_context_id gtk_statusbar_get_context_id;
alias c_gtk_statusbar_get_message_area gtk_statusbar_get_message_area;
alias c_gtk_statusbar_pop gtk_statusbar_pop;
alias c_gtk_statusbar_push gtk_statusbar_push;
alias c_gtk_statusbar_remove gtk_statusbar_remove;
alias c_gtk_statusbar_remove_all gtk_statusbar_remove_all;

// gtk.StatusbarAccessible

alias c_gtk_statusbar_accessible_get_type gtk_statusbar_accessible_get_type;

// gtk.StockItem

alias c_gtk_stock_item_copy gtk_stock_item_copy;
alias c_gtk_stock_item_free gtk_stock_item_free;
alias c_gtk_stock_add gtk_stock_add;
alias c_gtk_stock_add_static gtk_stock_add_static;
alias c_gtk_stock_list_ids gtk_stock_list_ids;
alias c_gtk_stock_lookup gtk_stock_lookup;
alias c_gtk_stock_set_translate_func gtk_stock_set_translate_func;

// gtk.Style

alias c_gtk_style_get_type gtk_style_get_type;
alias c_gtk_style_new gtk_style_new;
alias c_gtk_style_apply_default_background gtk_style_apply_default_background;
alias c_gtk_style_attach gtk_style_attach;
alias c_gtk_style_copy gtk_style_copy;
alias c_gtk_style_detach gtk_style_detach;
alias c_gtk_style_get gtk_style_get;
alias c_gtk_style_get_style_property gtk_style_get_style_property;
alias c_gtk_style_get_valist gtk_style_get_valist;
alias c_gtk_style_has_context gtk_style_has_context;
alias c_gtk_style_lookup_color gtk_style_lookup_color;
alias c_gtk_style_lookup_icon_set gtk_style_lookup_icon_set;
alias c_gtk_style_render_icon gtk_style_render_icon;
alias c_gtk_style_set_background gtk_style_set_background;
alias c_gtk_paint_arrow gtk_paint_arrow;
alias c_gtk_paint_box gtk_paint_box;
alias c_gtk_paint_box_gap gtk_paint_box_gap;
alias c_gtk_paint_check gtk_paint_check;
alias c_gtk_paint_diamond gtk_paint_diamond;
alias c_gtk_paint_expander gtk_paint_expander;
alias c_gtk_paint_extension gtk_paint_extension;
alias c_gtk_paint_flat_box gtk_paint_flat_box;
alias c_gtk_paint_focus gtk_paint_focus;
alias c_gtk_paint_handle gtk_paint_handle;
alias c_gtk_paint_hline gtk_paint_hline;
alias c_gtk_paint_layout gtk_paint_layout;
alias c_gtk_paint_option gtk_paint_option;
alias c_gtk_paint_resize_grip gtk_paint_resize_grip;
alias c_gtk_paint_shadow gtk_paint_shadow;
alias c_gtk_paint_shadow_gap gtk_paint_shadow_gap;
alias c_gtk_paint_slider gtk_paint_slider;
alias c_gtk_paint_spinner gtk_paint_spinner;
alias c_gtk_paint_tab gtk_paint_tab;
alias c_gtk_paint_vline gtk_paint_vline;

// gtk.StyleContext

alias c_gtk_style_context_get_type gtk_style_context_get_type;
alias c_gtk_style_context_new gtk_style_context_new;
alias c_gtk_style_context_add_provider_for_screen gtk_style_context_add_provider_for_screen;
alias c_gtk_style_context_remove_provider_for_screen gtk_style_context_remove_provider_for_screen;
alias c_gtk_style_context_reset_widgets gtk_style_context_reset_widgets;
alias c_gtk_style_context_add_class gtk_style_context_add_class;
alias c_gtk_style_context_add_provider gtk_style_context_add_provider;
alias c_gtk_style_context_add_region gtk_style_context_add_region;
alias c_gtk_style_context_cancel_animations gtk_style_context_cancel_animations;
alias c_gtk_style_context_get gtk_style_context_get;
alias c_gtk_style_context_get_background_color gtk_style_context_get_background_color;
alias c_gtk_style_context_get_border gtk_style_context_get_border;
alias c_gtk_style_context_get_border_color gtk_style_context_get_border_color;
alias c_gtk_style_context_get_color gtk_style_context_get_color;
alias c_gtk_style_context_get_direction gtk_style_context_get_direction;
alias c_gtk_style_context_get_font gtk_style_context_get_font;
alias c_gtk_style_context_get_frame_clock gtk_style_context_get_frame_clock;
alias c_gtk_style_context_get_junction_sides gtk_style_context_get_junction_sides;
alias c_gtk_style_context_get_margin gtk_style_context_get_margin;
alias c_gtk_style_context_get_padding gtk_style_context_get_padding;
alias c_gtk_style_context_get_parent gtk_style_context_get_parent;
alias c_gtk_style_context_get_path gtk_style_context_get_path;
alias c_gtk_style_context_get_property gtk_style_context_get_property;
alias c_gtk_style_context_get_scale gtk_style_context_get_scale;
alias c_gtk_style_context_get_screen gtk_style_context_get_screen;
alias c_gtk_style_context_get_section gtk_style_context_get_section;
alias c_gtk_style_context_get_state gtk_style_context_get_state;
alias c_gtk_style_context_get_style gtk_style_context_get_style;
alias c_gtk_style_context_get_style_property gtk_style_context_get_style_property;
alias c_gtk_style_context_get_style_valist gtk_style_context_get_style_valist;
alias c_gtk_style_context_get_valist gtk_style_context_get_valist;
alias c_gtk_style_context_has_class gtk_style_context_has_class;
alias c_gtk_style_context_has_region gtk_style_context_has_region;
alias c_gtk_style_context_invalidate gtk_style_context_invalidate;
alias c_gtk_style_context_list_classes gtk_style_context_list_classes;
alias c_gtk_style_context_list_regions gtk_style_context_list_regions;
alias c_gtk_style_context_lookup_color gtk_style_context_lookup_color;
alias c_gtk_style_context_lookup_icon_set gtk_style_context_lookup_icon_set;
alias c_gtk_style_context_notify_state_change gtk_style_context_notify_state_change;
alias c_gtk_style_context_pop_animatable_region gtk_style_context_pop_animatable_region;
alias c_gtk_style_context_push_animatable_region gtk_style_context_push_animatable_region;
alias c_gtk_style_context_remove_class gtk_style_context_remove_class;
alias c_gtk_style_context_remove_provider gtk_style_context_remove_provider;
alias c_gtk_style_context_remove_region gtk_style_context_remove_region;
alias c_gtk_style_context_restore gtk_style_context_restore;
alias c_gtk_style_context_save gtk_style_context_save;
alias c_gtk_style_context_scroll_animations gtk_style_context_scroll_animations;
alias c_gtk_style_context_set_background gtk_style_context_set_background;
alias c_gtk_style_context_set_direction gtk_style_context_set_direction;
alias c_gtk_style_context_set_frame_clock gtk_style_context_set_frame_clock;
alias c_gtk_style_context_set_junction_sides gtk_style_context_set_junction_sides;
alias c_gtk_style_context_set_parent gtk_style_context_set_parent;
alias c_gtk_style_context_set_path gtk_style_context_set_path;
alias c_gtk_style_context_set_scale gtk_style_context_set_scale;
alias c_gtk_style_context_set_screen gtk_style_context_set_screen;
alias c_gtk_style_context_set_state gtk_style_context_set_state;
alias c_gtk_style_context_state_is_running gtk_style_context_state_is_running;
alias c_gtk_style_context_to_string gtk_style_context_to_string;
alias c_gtk_render_activity gtk_render_activity;
alias c_gtk_render_arrow gtk_render_arrow;
alias c_gtk_render_background gtk_render_background;
alias c_gtk_render_background_get_clip gtk_render_background_get_clip;
alias c_gtk_render_check gtk_render_check;
alias c_gtk_render_expander gtk_render_expander;
alias c_gtk_render_extension gtk_render_extension;
alias c_gtk_render_focus gtk_render_focus;
alias c_gtk_render_frame gtk_render_frame;
alias c_gtk_render_frame_gap gtk_render_frame_gap;
alias c_gtk_render_handle gtk_render_handle;
alias c_gtk_render_icon gtk_render_icon;
alias c_gtk_render_icon_pixbuf gtk_render_icon_pixbuf;
alias c_gtk_render_icon_surface gtk_render_icon_surface;
alias c_gtk_render_insertion_cursor gtk_render_insertion_cursor;
alias c_gtk_render_layout gtk_render_layout;
alias c_gtk_render_line gtk_render_line;
alias c_gtk_render_option gtk_render_option;
alias c_gtk_render_slider gtk_render_slider;

// gtk.StyleProperties

alias c_gtk_style_properties_get_type gtk_style_properties_get_type;
alias c_gtk_style_properties_new gtk_style_properties_new;
alias c_gtk_style_properties_lookup_property gtk_style_properties_lookup_property;
alias c_gtk_style_properties_register_property gtk_style_properties_register_property;
alias c_gtk_style_properties_clear gtk_style_properties_clear;
alias c_gtk_style_properties_get gtk_style_properties_get;
alias c_gtk_style_properties_get_property gtk_style_properties_get_property;
alias c_gtk_style_properties_get_valist gtk_style_properties_get_valist;
alias c_gtk_style_properties_lookup_color gtk_style_properties_lookup_color;
alias c_gtk_style_properties_map_color gtk_style_properties_map_color;
alias c_gtk_style_properties_merge gtk_style_properties_merge;
alias c_gtk_style_properties_set gtk_style_properties_set;
alias c_gtk_style_properties_set_property gtk_style_properties_set_property;
alias c_gtk_style_properties_set_valist gtk_style_properties_set_valist;
alias c_gtk_style_properties_unset_property gtk_style_properties_unset_property;

// gtk.StyleProvider

alias c_gtk_style_provider_get_type gtk_style_provider_get_type;
alias c_gtk_style_provider_get_icon_factory gtk_style_provider_get_icon_factory;
alias c_gtk_style_provider_get_style gtk_style_provider_get_style;
alias c_gtk_style_provider_get_style_property gtk_style_provider_get_style_property;

// gtk.Switch

alias c_gtk_switch_get_type gtk_switch_get_type;
alias c_gtk_switch_new gtk_switch_new;
alias c_gtk_switch_get_active gtk_switch_get_active;
alias c_gtk_switch_get_state gtk_switch_get_state;
alias c_gtk_switch_set_active gtk_switch_set_active;
alias c_gtk_switch_set_state gtk_switch_set_state;

// gtk.SwitchAccessible

alias c_gtk_switch_accessible_get_type gtk_switch_accessible_get_type;

// gtk.SymbolicColor

alias c_gtk_symbolic_color_get_type gtk_symbolic_color_get_type;
alias c_gtk_symbolic_color_new_alpha gtk_symbolic_color_new_alpha;
alias c_gtk_symbolic_color_new_literal gtk_symbolic_color_new_literal;
alias c_gtk_symbolic_color_new_mix gtk_symbolic_color_new_mix;
alias c_gtk_symbolic_color_new_name gtk_symbolic_color_new_name;
alias c_gtk_symbolic_color_new_shade gtk_symbolic_color_new_shade;
alias c_gtk_symbolic_color_new_win32 gtk_symbolic_color_new_win32;
alias c_gtk_symbolic_color_ref gtk_symbolic_color_ref;
alias c_gtk_symbolic_color_resolve gtk_symbolic_color_resolve;
alias c_gtk_symbolic_color_to_string gtk_symbolic_color_to_string;
alias c_gtk_symbolic_color_unref gtk_symbolic_color_unref;

// gtk.Table

alias c_gtk_table_get_type gtk_table_get_type;
alias c_gtk_table_new gtk_table_new;
alias c_gtk_table_attach gtk_table_attach;
alias c_gtk_table_attach_defaults gtk_table_attach_defaults;
alias c_gtk_table_get_col_spacing gtk_table_get_col_spacing;
alias c_gtk_table_get_default_col_spacing gtk_table_get_default_col_spacing;
alias c_gtk_table_get_default_row_spacing gtk_table_get_default_row_spacing;
alias c_gtk_table_get_homogeneous gtk_table_get_homogeneous;
alias c_gtk_table_get_row_spacing gtk_table_get_row_spacing;
alias c_gtk_table_get_size gtk_table_get_size;
alias c_gtk_table_resize gtk_table_resize;
alias c_gtk_table_set_col_spacing gtk_table_set_col_spacing;
alias c_gtk_table_set_col_spacings gtk_table_set_col_spacings;
alias c_gtk_table_set_homogeneous gtk_table_set_homogeneous;
alias c_gtk_table_set_row_spacing gtk_table_set_row_spacing;
alias c_gtk_table_set_row_spacings gtk_table_set_row_spacings;

// gtk.TargetEntry

alias c_gtk_target_entry_get_type gtk_target_entry_get_type;
alias c_gtk_target_entry_new gtk_target_entry_new;
alias c_gtk_target_entry_copy gtk_target_entry_copy;
alias c_gtk_target_entry_free gtk_target_entry_free;

// gtk.TargetList

alias c_gtk_target_list_get_type gtk_target_list_get_type;
alias c_gtk_target_list_new gtk_target_list_new;
alias c_gtk_target_list_add gtk_target_list_add;
alias c_gtk_target_list_add_image_targets gtk_target_list_add_image_targets;
alias c_gtk_target_list_add_rich_text_targets gtk_target_list_add_rich_text_targets;
alias c_gtk_target_list_add_table gtk_target_list_add_table;
alias c_gtk_target_list_add_text_targets gtk_target_list_add_text_targets;
alias c_gtk_target_list_add_uri_targets gtk_target_list_add_uri_targets;
alias c_gtk_target_list_find gtk_target_list_find;
alias c_gtk_target_list_ref gtk_target_list_ref;
alias c_gtk_target_list_remove gtk_target_list_remove;
alias c_gtk_target_list_unref gtk_target_list_unref;
alias c_gtk_target_table_free gtk_target_table_free;
alias c_gtk_target_table_new_from_list gtk_target_table_new_from_list;
alias c_gtk_targets_include_image gtk_targets_include_image;
alias c_gtk_targets_include_rich_text gtk_targets_include_rich_text;
alias c_gtk_targets_include_text gtk_targets_include_text;
alias c_gtk_targets_include_uri gtk_targets_include_uri;

// gtk.TearoffMenuItem

alias c_gtk_tearoff_menu_item_get_type gtk_tearoff_menu_item_get_type;
alias c_gtk_tearoff_menu_item_new gtk_tearoff_menu_item_new;

// gtk.TextAttributes

alias c_gtk_text_attributes_get_type gtk_text_attributes_get_type;
alias c_gtk_text_attributes_new gtk_text_attributes_new;
alias c_gtk_text_attributes_copy gtk_text_attributes_copy;
alias c_gtk_text_attributes_copy_values gtk_text_attributes_copy_values;
alias c_gtk_text_attributes_ref gtk_text_attributes_ref;
alias c_gtk_text_attributes_unref gtk_text_attributes_unref;

// gtk.TextBuffer

alias c_gtk_text_buffer_get_type gtk_text_buffer_get_type;
alias c_gtk_text_buffer_new gtk_text_buffer_new;
alias c_gtk_text_buffer_add_mark gtk_text_buffer_add_mark;
alias c_gtk_text_buffer_add_selection_clipboard gtk_text_buffer_add_selection_clipboard;
alias c_gtk_text_buffer_apply_tag gtk_text_buffer_apply_tag;
alias c_gtk_text_buffer_apply_tag_by_name gtk_text_buffer_apply_tag_by_name;
alias c_gtk_text_buffer_backspace gtk_text_buffer_backspace;
alias c_gtk_text_buffer_begin_user_action gtk_text_buffer_begin_user_action;
alias c_gtk_text_buffer_copy_clipboard gtk_text_buffer_copy_clipboard;
alias c_gtk_text_buffer_create_child_anchor gtk_text_buffer_create_child_anchor;
alias c_gtk_text_buffer_create_mark gtk_text_buffer_create_mark;
alias c_gtk_text_buffer_create_tag gtk_text_buffer_create_tag;
alias c_gtk_text_buffer_cut_clipboard gtk_text_buffer_cut_clipboard;
alias c_gtk_text_buffer_delete gtk_text_buffer_delete;
alias c_gtk_text_buffer_delete_interactive gtk_text_buffer_delete_interactive;
alias c_gtk_text_buffer_delete_mark gtk_text_buffer_delete_mark;
alias c_gtk_text_buffer_delete_mark_by_name gtk_text_buffer_delete_mark_by_name;
alias c_gtk_text_buffer_delete_selection gtk_text_buffer_delete_selection;
alias c_gtk_text_buffer_deserialize gtk_text_buffer_deserialize;
alias c_gtk_text_buffer_deserialize_get_can_create_tags gtk_text_buffer_deserialize_get_can_create_tags;
alias c_gtk_text_buffer_deserialize_set_can_create_tags gtk_text_buffer_deserialize_set_can_create_tags;
alias c_gtk_text_buffer_end_user_action gtk_text_buffer_end_user_action;
alias c_gtk_text_buffer_get_bounds gtk_text_buffer_get_bounds;
alias c_gtk_text_buffer_get_char_count gtk_text_buffer_get_char_count;
alias c_gtk_text_buffer_get_copy_target_list gtk_text_buffer_get_copy_target_list;
alias c_gtk_text_buffer_get_deserialize_formats gtk_text_buffer_get_deserialize_formats;
alias c_gtk_text_buffer_get_end_iter gtk_text_buffer_get_end_iter;
alias c_gtk_text_buffer_get_has_selection gtk_text_buffer_get_has_selection;
alias c_gtk_text_buffer_get_insert gtk_text_buffer_get_insert;
alias c_gtk_text_buffer_get_iter_at_child_anchor gtk_text_buffer_get_iter_at_child_anchor;
alias c_gtk_text_buffer_get_iter_at_line gtk_text_buffer_get_iter_at_line;
alias c_gtk_text_buffer_get_iter_at_line_index gtk_text_buffer_get_iter_at_line_index;
alias c_gtk_text_buffer_get_iter_at_line_offset gtk_text_buffer_get_iter_at_line_offset;
alias c_gtk_text_buffer_get_iter_at_mark gtk_text_buffer_get_iter_at_mark;
alias c_gtk_text_buffer_get_iter_at_offset gtk_text_buffer_get_iter_at_offset;
alias c_gtk_text_buffer_get_line_count gtk_text_buffer_get_line_count;
alias c_gtk_text_buffer_get_mark gtk_text_buffer_get_mark;
alias c_gtk_text_buffer_get_modified gtk_text_buffer_get_modified;
alias c_gtk_text_buffer_get_paste_target_list gtk_text_buffer_get_paste_target_list;
alias c_gtk_text_buffer_get_selection_bound gtk_text_buffer_get_selection_bound;
alias c_gtk_text_buffer_get_selection_bounds gtk_text_buffer_get_selection_bounds;
alias c_gtk_text_buffer_get_serialize_formats gtk_text_buffer_get_serialize_formats;
alias c_gtk_text_buffer_get_slice gtk_text_buffer_get_slice;
alias c_gtk_text_buffer_get_start_iter gtk_text_buffer_get_start_iter;
alias c_gtk_text_buffer_get_tag_table gtk_text_buffer_get_tag_table;
alias c_gtk_text_buffer_get_text gtk_text_buffer_get_text;
alias c_gtk_text_buffer_insert gtk_text_buffer_insert;
alias c_gtk_text_buffer_insert_at_cursor gtk_text_buffer_insert_at_cursor;
alias c_gtk_text_buffer_insert_child_anchor gtk_text_buffer_insert_child_anchor;
alias c_gtk_text_buffer_insert_interactive gtk_text_buffer_insert_interactive;
alias c_gtk_text_buffer_insert_interactive_at_cursor gtk_text_buffer_insert_interactive_at_cursor;
alias c_gtk_text_buffer_insert_markup gtk_text_buffer_insert_markup;
alias c_gtk_text_buffer_insert_pixbuf gtk_text_buffer_insert_pixbuf;
alias c_gtk_text_buffer_insert_range gtk_text_buffer_insert_range;
alias c_gtk_text_buffer_insert_range_interactive gtk_text_buffer_insert_range_interactive;
alias c_gtk_text_buffer_insert_with_tags gtk_text_buffer_insert_with_tags;
alias c_gtk_text_buffer_insert_with_tags_by_name gtk_text_buffer_insert_with_tags_by_name;
alias c_gtk_text_buffer_move_mark gtk_text_buffer_move_mark;
alias c_gtk_text_buffer_move_mark_by_name gtk_text_buffer_move_mark_by_name;
alias c_gtk_text_buffer_paste_clipboard gtk_text_buffer_paste_clipboard;
alias c_gtk_text_buffer_place_cursor gtk_text_buffer_place_cursor;
alias c_gtk_text_buffer_register_deserialize_format gtk_text_buffer_register_deserialize_format;
alias c_gtk_text_buffer_register_deserialize_tagset gtk_text_buffer_register_deserialize_tagset;
alias c_gtk_text_buffer_register_serialize_format gtk_text_buffer_register_serialize_format;
alias c_gtk_text_buffer_register_serialize_tagset gtk_text_buffer_register_serialize_tagset;
alias c_gtk_text_buffer_remove_all_tags gtk_text_buffer_remove_all_tags;
alias c_gtk_text_buffer_remove_selection_clipboard gtk_text_buffer_remove_selection_clipboard;
alias c_gtk_text_buffer_remove_tag gtk_text_buffer_remove_tag;
alias c_gtk_text_buffer_remove_tag_by_name gtk_text_buffer_remove_tag_by_name;
alias c_gtk_text_buffer_select_range gtk_text_buffer_select_range;
alias c_gtk_text_buffer_serialize gtk_text_buffer_serialize;
alias c_gtk_text_buffer_set_modified gtk_text_buffer_set_modified;
alias c_gtk_text_buffer_set_text gtk_text_buffer_set_text;
alias c_gtk_text_buffer_unregister_deserialize_format gtk_text_buffer_unregister_deserialize_format;
alias c_gtk_text_buffer_unregister_serialize_format gtk_text_buffer_unregister_serialize_format;

// gtk.TextCellAccessible

alias c_gtk_text_cell_accessible_get_type gtk_text_cell_accessible_get_type;

// gtk.TextChildAnchor

alias c_gtk_text_child_anchor_get_type gtk_text_child_anchor_get_type;
alias c_gtk_text_child_anchor_new gtk_text_child_anchor_new;
alias c_gtk_text_child_anchor_get_deleted gtk_text_child_anchor_get_deleted;
alias c_gtk_text_child_anchor_get_widgets gtk_text_child_anchor_get_widgets;

// gtk.TextIter

alias c_gtk_text_iter_get_type gtk_text_iter_get_type;
alias c_gtk_text_iter_assign gtk_text_iter_assign;
alias c_gtk_text_iter_backward_char gtk_text_iter_backward_char;
alias c_gtk_text_iter_backward_chars gtk_text_iter_backward_chars;
alias c_gtk_text_iter_backward_cursor_position gtk_text_iter_backward_cursor_position;
alias c_gtk_text_iter_backward_cursor_positions gtk_text_iter_backward_cursor_positions;
alias c_gtk_text_iter_backward_find_char gtk_text_iter_backward_find_char;
alias c_gtk_text_iter_backward_line gtk_text_iter_backward_line;
alias c_gtk_text_iter_backward_lines gtk_text_iter_backward_lines;
alias c_gtk_text_iter_backward_search gtk_text_iter_backward_search;
alias c_gtk_text_iter_backward_sentence_start gtk_text_iter_backward_sentence_start;
alias c_gtk_text_iter_backward_sentence_starts gtk_text_iter_backward_sentence_starts;
alias c_gtk_text_iter_backward_to_tag_toggle gtk_text_iter_backward_to_tag_toggle;
alias c_gtk_text_iter_backward_visible_cursor_position gtk_text_iter_backward_visible_cursor_position;
alias c_gtk_text_iter_backward_visible_cursor_positions gtk_text_iter_backward_visible_cursor_positions;
alias c_gtk_text_iter_backward_visible_line gtk_text_iter_backward_visible_line;
alias c_gtk_text_iter_backward_visible_lines gtk_text_iter_backward_visible_lines;
alias c_gtk_text_iter_backward_visible_word_start gtk_text_iter_backward_visible_word_start;
alias c_gtk_text_iter_backward_visible_word_starts gtk_text_iter_backward_visible_word_starts;
alias c_gtk_text_iter_backward_word_start gtk_text_iter_backward_word_start;
alias c_gtk_text_iter_backward_word_starts gtk_text_iter_backward_word_starts;
alias c_gtk_text_iter_begins_tag gtk_text_iter_begins_tag;
alias c_gtk_text_iter_can_insert gtk_text_iter_can_insert;
alias c_gtk_text_iter_compare gtk_text_iter_compare;
alias c_gtk_text_iter_copy gtk_text_iter_copy;
alias c_gtk_text_iter_editable gtk_text_iter_editable;
alias c_gtk_text_iter_ends_line gtk_text_iter_ends_line;
alias c_gtk_text_iter_ends_sentence gtk_text_iter_ends_sentence;
alias c_gtk_text_iter_ends_tag gtk_text_iter_ends_tag;
alias c_gtk_text_iter_ends_word gtk_text_iter_ends_word;
alias c_gtk_text_iter_equal gtk_text_iter_equal;
alias c_gtk_text_iter_forward_char gtk_text_iter_forward_char;
alias c_gtk_text_iter_forward_chars gtk_text_iter_forward_chars;
alias c_gtk_text_iter_forward_cursor_position gtk_text_iter_forward_cursor_position;
alias c_gtk_text_iter_forward_cursor_positions gtk_text_iter_forward_cursor_positions;
alias c_gtk_text_iter_forward_find_char gtk_text_iter_forward_find_char;
alias c_gtk_text_iter_forward_line gtk_text_iter_forward_line;
alias c_gtk_text_iter_forward_lines gtk_text_iter_forward_lines;
alias c_gtk_text_iter_forward_search gtk_text_iter_forward_search;
alias c_gtk_text_iter_forward_sentence_end gtk_text_iter_forward_sentence_end;
alias c_gtk_text_iter_forward_sentence_ends gtk_text_iter_forward_sentence_ends;
alias c_gtk_text_iter_forward_to_end gtk_text_iter_forward_to_end;
alias c_gtk_text_iter_forward_to_line_end gtk_text_iter_forward_to_line_end;
alias c_gtk_text_iter_forward_to_tag_toggle gtk_text_iter_forward_to_tag_toggle;
alias c_gtk_text_iter_forward_visible_cursor_position gtk_text_iter_forward_visible_cursor_position;
alias c_gtk_text_iter_forward_visible_cursor_positions gtk_text_iter_forward_visible_cursor_positions;
alias c_gtk_text_iter_forward_visible_line gtk_text_iter_forward_visible_line;
alias c_gtk_text_iter_forward_visible_lines gtk_text_iter_forward_visible_lines;
alias c_gtk_text_iter_forward_visible_word_end gtk_text_iter_forward_visible_word_end;
alias c_gtk_text_iter_forward_visible_word_ends gtk_text_iter_forward_visible_word_ends;
alias c_gtk_text_iter_forward_word_end gtk_text_iter_forward_word_end;
alias c_gtk_text_iter_forward_word_ends gtk_text_iter_forward_word_ends;
alias c_gtk_text_iter_free gtk_text_iter_free;
alias c_gtk_text_iter_get_attributes gtk_text_iter_get_attributes;
alias c_gtk_text_iter_get_buffer gtk_text_iter_get_buffer;
alias c_gtk_text_iter_get_bytes_in_line gtk_text_iter_get_bytes_in_line;
alias c_gtk_text_iter_get_char gtk_text_iter_get_char;
alias c_gtk_text_iter_get_chars_in_line gtk_text_iter_get_chars_in_line;
alias c_gtk_text_iter_get_child_anchor gtk_text_iter_get_child_anchor;
alias c_gtk_text_iter_get_language gtk_text_iter_get_language;
alias c_gtk_text_iter_get_line gtk_text_iter_get_line;
alias c_gtk_text_iter_get_line_index gtk_text_iter_get_line_index;
alias c_gtk_text_iter_get_line_offset gtk_text_iter_get_line_offset;
alias c_gtk_text_iter_get_marks gtk_text_iter_get_marks;
alias c_gtk_text_iter_get_offset gtk_text_iter_get_offset;
alias c_gtk_text_iter_get_pixbuf gtk_text_iter_get_pixbuf;
alias c_gtk_text_iter_get_slice gtk_text_iter_get_slice;
alias c_gtk_text_iter_get_tags gtk_text_iter_get_tags;
alias c_gtk_text_iter_get_text gtk_text_iter_get_text;
alias c_gtk_text_iter_get_toggled_tags gtk_text_iter_get_toggled_tags;
alias c_gtk_text_iter_get_visible_line_index gtk_text_iter_get_visible_line_index;
alias c_gtk_text_iter_get_visible_line_offset gtk_text_iter_get_visible_line_offset;
alias c_gtk_text_iter_get_visible_slice gtk_text_iter_get_visible_slice;
alias c_gtk_text_iter_get_visible_text gtk_text_iter_get_visible_text;
alias c_gtk_text_iter_has_tag gtk_text_iter_has_tag;
alias c_gtk_text_iter_in_range gtk_text_iter_in_range;
alias c_gtk_text_iter_inside_sentence gtk_text_iter_inside_sentence;
alias c_gtk_text_iter_inside_word gtk_text_iter_inside_word;
alias c_gtk_text_iter_is_cursor_position gtk_text_iter_is_cursor_position;
alias c_gtk_text_iter_is_end gtk_text_iter_is_end;
alias c_gtk_text_iter_is_start gtk_text_iter_is_start;
alias c_gtk_text_iter_order gtk_text_iter_order;
alias c_gtk_text_iter_set_line gtk_text_iter_set_line;
alias c_gtk_text_iter_set_line_index gtk_text_iter_set_line_index;
alias c_gtk_text_iter_set_line_offset gtk_text_iter_set_line_offset;
alias c_gtk_text_iter_set_offset gtk_text_iter_set_offset;
alias c_gtk_text_iter_set_visible_line_index gtk_text_iter_set_visible_line_index;
alias c_gtk_text_iter_set_visible_line_offset gtk_text_iter_set_visible_line_offset;
alias c_gtk_text_iter_starts_line gtk_text_iter_starts_line;
alias c_gtk_text_iter_starts_sentence gtk_text_iter_starts_sentence;
alias c_gtk_text_iter_starts_tag gtk_text_iter_starts_tag;
alias c_gtk_text_iter_starts_word gtk_text_iter_starts_word;
alias c_gtk_text_iter_toggles_tag gtk_text_iter_toggles_tag;

// gtk.TextMark

alias c_gtk_text_mark_get_type gtk_text_mark_get_type;
alias c_gtk_text_mark_new gtk_text_mark_new;
alias c_gtk_text_mark_get_buffer gtk_text_mark_get_buffer;
alias c_gtk_text_mark_get_deleted gtk_text_mark_get_deleted;
alias c_gtk_text_mark_get_left_gravity gtk_text_mark_get_left_gravity;
alias c_gtk_text_mark_get_name gtk_text_mark_get_name;
alias c_gtk_text_mark_get_visible gtk_text_mark_get_visible;
alias c_gtk_text_mark_set_visible gtk_text_mark_set_visible;

// gtk.TextTag

alias c_gtk_text_tag_get_type gtk_text_tag_get_type;
alias c_gtk_text_tag_new gtk_text_tag_new;
alias c_gtk_text_tag_changed gtk_text_tag_changed;
alias c_gtk_text_tag_event gtk_text_tag_event;
alias c_gtk_text_tag_get_priority gtk_text_tag_get_priority;
alias c_gtk_text_tag_set_priority gtk_text_tag_set_priority;

// gtk.TextTagTable

alias c_gtk_text_tag_table_get_type gtk_text_tag_table_get_type;
alias c_gtk_text_tag_table_new gtk_text_tag_table_new;
alias c_gtk_text_tag_table_add gtk_text_tag_table_add;
alias c_gtk_text_tag_table_foreach gtk_text_tag_table_foreach;
alias c_gtk_text_tag_table_get_size gtk_text_tag_table_get_size;
alias c_gtk_text_tag_table_lookup gtk_text_tag_table_lookup;
alias c_gtk_text_tag_table_remove gtk_text_tag_table_remove;

// gtk.TextView

alias c_gtk_text_view_get_type gtk_text_view_get_type;
alias c_gtk_text_view_new gtk_text_view_new;
alias c_gtk_text_view_new_with_buffer gtk_text_view_new_with_buffer;
alias c_gtk_text_view_add_child_at_anchor gtk_text_view_add_child_at_anchor;
alias c_gtk_text_view_add_child_in_window gtk_text_view_add_child_in_window;
alias c_gtk_text_view_backward_display_line gtk_text_view_backward_display_line;
alias c_gtk_text_view_backward_display_line_start gtk_text_view_backward_display_line_start;
alias c_gtk_text_view_buffer_to_window_coords gtk_text_view_buffer_to_window_coords;
alias c_gtk_text_view_forward_display_line gtk_text_view_forward_display_line;
alias c_gtk_text_view_forward_display_line_end gtk_text_view_forward_display_line_end;
alias c_gtk_text_view_get_accepts_tab gtk_text_view_get_accepts_tab;
alias c_gtk_text_view_get_border_window_size gtk_text_view_get_border_window_size;
alias c_gtk_text_view_get_bottom_margin gtk_text_view_get_bottom_margin;
alias c_gtk_text_view_get_buffer gtk_text_view_get_buffer;
alias c_gtk_text_view_get_cursor_locations gtk_text_view_get_cursor_locations;
alias c_gtk_text_view_get_cursor_visible gtk_text_view_get_cursor_visible;
alias c_gtk_text_view_get_default_attributes gtk_text_view_get_default_attributes;
alias c_gtk_text_view_get_editable gtk_text_view_get_editable;
alias c_gtk_text_view_get_hadjustment gtk_text_view_get_hadjustment;
alias c_gtk_text_view_get_indent gtk_text_view_get_indent;
alias c_gtk_text_view_get_input_hints gtk_text_view_get_input_hints;
alias c_gtk_text_view_get_input_purpose gtk_text_view_get_input_purpose;
alias c_gtk_text_view_get_iter_at_location gtk_text_view_get_iter_at_location;
alias c_gtk_text_view_get_iter_at_position gtk_text_view_get_iter_at_position;
alias c_gtk_text_view_get_iter_location gtk_text_view_get_iter_location;
alias c_gtk_text_view_get_justification gtk_text_view_get_justification;
alias c_gtk_text_view_get_left_margin gtk_text_view_get_left_margin;
alias c_gtk_text_view_get_line_at_y gtk_text_view_get_line_at_y;
alias c_gtk_text_view_get_line_yrange gtk_text_view_get_line_yrange;
alias c_gtk_text_view_get_monospace gtk_text_view_get_monospace;
alias c_gtk_text_view_get_overwrite gtk_text_view_get_overwrite;
alias c_gtk_text_view_get_pixels_above_lines gtk_text_view_get_pixels_above_lines;
alias c_gtk_text_view_get_pixels_below_lines gtk_text_view_get_pixels_below_lines;
alias c_gtk_text_view_get_pixels_inside_wrap gtk_text_view_get_pixels_inside_wrap;
alias c_gtk_text_view_get_right_margin gtk_text_view_get_right_margin;
alias c_gtk_text_view_get_tabs gtk_text_view_get_tabs;
alias c_gtk_text_view_get_top_margin gtk_text_view_get_top_margin;
alias c_gtk_text_view_get_vadjustment gtk_text_view_get_vadjustment;
alias c_gtk_text_view_get_visible_rect gtk_text_view_get_visible_rect;
alias c_gtk_text_view_get_window gtk_text_view_get_window;
alias c_gtk_text_view_get_window_type gtk_text_view_get_window_type;
alias c_gtk_text_view_get_wrap_mode gtk_text_view_get_wrap_mode;
alias c_gtk_text_view_im_context_filter_keypress gtk_text_view_im_context_filter_keypress;
alias c_gtk_text_view_move_child gtk_text_view_move_child;
alias c_gtk_text_view_move_mark_onscreen gtk_text_view_move_mark_onscreen;
alias c_gtk_text_view_move_visually gtk_text_view_move_visually;
alias c_gtk_text_view_place_cursor_onscreen gtk_text_view_place_cursor_onscreen;
alias c_gtk_text_view_reset_cursor_blink gtk_text_view_reset_cursor_blink;
alias c_gtk_text_view_reset_im_context gtk_text_view_reset_im_context;
alias c_gtk_text_view_scroll_mark_onscreen gtk_text_view_scroll_mark_onscreen;
alias c_gtk_text_view_scroll_to_iter gtk_text_view_scroll_to_iter;
alias c_gtk_text_view_scroll_to_mark gtk_text_view_scroll_to_mark;
alias c_gtk_text_view_set_accepts_tab gtk_text_view_set_accepts_tab;
alias c_gtk_text_view_set_border_window_size gtk_text_view_set_border_window_size;
alias c_gtk_text_view_set_bottom_margin gtk_text_view_set_bottom_margin;
alias c_gtk_text_view_set_buffer gtk_text_view_set_buffer;
alias c_gtk_text_view_set_cursor_visible gtk_text_view_set_cursor_visible;
alias c_gtk_text_view_set_editable gtk_text_view_set_editable;
alias c_gtk_text_view_set_indent gtk_text_view_set_indent;
alias c_gtk_text_view_set_input_hints gtk_text_view_set_input_hints;
alias c_gtk_text_view_set_input_purpose gtk_text_view_set_input_purpose;
alias c_gtk_text_view_set_justification gtk_text_view_set_justification;
alias c_gtk_text_view_set_left_margin gtk_text_view_set_left_margin;
alias c_gtk_text_view_set_monospace gtk_text_view_set_monospace;
alias c_gtk_text_view_set_overwrite gtk_text_view_set_overwrite;
alias c_gtk_text_view_set_pixels_above_lines gtk_text_view_set_pixels_above_lines;
alias c_gtk_text_view_set_pixels_below_lines gtk_text_view_set_pixels_below_lines;
alias c_gtk_text_view_set_pixels_inside_wrap gtk_text_view_set_pixels_inside_wrap;
alias c_gtk_text_view_set_right_margin gtk_text_view_set_right_margin;
alias c_gtk_text_view_set_tabs gtk_text_view_set_tabs;
alias c_gtk_text_view_set_top_margin gtk_text_view_set_top_margin;
alias c_gtk_text_view_set_wrap_mode gtk_text_view_set_wrap_mode;
alias c_gtk_text_view_starts_display_line gtk_text_view_starts_display_line;
alias c_gtk_text_view_window_to_buffer_coords gtk_text_view_window_to_buffer_coords;

// gtk.TextViewAccessible

alias c_gtk_text_view_accessible_get_type gtk_text_view_accessible_get_type;

// gtk.ThemingEngine

alias c_gtk_theming_engine_get_type gtk_theming_engine_get_type;
alias c_gtk_theming_engine_load gtk_theming_engine_load;
alias c_gtk_theming_engine_register_property gtk_theming_engine_register_property;
alias c_gtk_theming_engine_get gtk_theming_engine_get;
alias c_gtk_theming_engine_get_background_color gtk_theming_engine_get_background_color;
alias c_gtk_theming_engine_get_border gtk_theming_engine_get_border;
alias c_gtk_theming_engine_get_border_color gtk_theming_engine_get_border_color;
alias c_gtk_theming_engine_get_color gtk_theming_engine_get_color;
alias c_gtk_theming_engine_get_direction gtk_theming_engine_get_direction;
alias c_gtk_theming_engine_get_font gtk_theming_engine_get_font;
alias c_gtk_theming_engine_get_junction_sides gtk_theming_engine_get_junction_sides;
alias c_gtk_theming_engine_get_margin gtk_theming_engine_get_margin;
alias c_gtk_theming_engine_get_padding gtk_theming_engine_get_padding;
alias c_gtk_theming_engine_get_path gtk_theming_engine_get_path;
alias c_gtk_theming_engine_get_property gtk_theming_engine_get_property;
alias c_gtk_theming_engine_get_screen gtk_theming_engine_get_screen;
alias c_gtk_theming_engine_get_state gtk_theming_engine_get_state;
alias c_gtk_theming_engine_get_style gtk_theming_engine_get_style;
alias c_gtk_theming_engine_get_style_property gtk_theming_engine_get_style_property;
alias c_gtk_theming_engine_get_style_valist gtk_theming_engine_get_style_valist;
alias c_gtk_theming_engine_get_valist gtk_theming_engine_get_valist;
alias c_gtk_theming_engine_has_class gtk_theming_engine_has_class;
alias c_gtk_theming_engine_has_region gtk_theming_engine_has_region;
alias c_gtk_theming_engine_lookup_color gtk_theming_engine_lookup_color;
alias c_gtk_theming_engine_state_is_running gtk_theming_engine_state_is_running;

// gtk.ToggleAction

alias c_gtk_toggle_action_get_type gtk_toggle_action_get_type;
alias c_gtk_toggle_action_new gtk_toggle_action_new;
alias c_gtk_toggle_action_get_active gtk_toggle_action_get_active;
alias c_gtk_toggle_action_get_draw_as_radio gtk_toggle_action_get_draw_as_radio;
alias c_gtk_toggle_action_set_active gtk_toggle_action_set_active;
alias c_gtk_toggle_action_set_draw_as_radio gtk_toggle_action_set_draw_as_radio;
alias c_gtk_toggle_action_toggled gtk_toggle_action_toggled;

// gtk.ToggleButton

alias c_gtk_toggle_button_get_type gtk_toggle_button_get_type;
alias c_gtk_toggle_button_new gtk_toggle_button_new;
alias c_gtk_toggle_button_new_with_label gtk_toggle_button_new_with_label;
alias c_gtk_toggle_button_new_with_mnemonic gtk_toggle_button_new_with_mnemonic;
alias c_gtk_toggle_button_get_active gtk_toggle_button_get_active;
alias c_gtk_toggle_button_get_inconsistent gtk_toggle_button_get_inconsistent;
alias c_gtk_toggle_button_get_mode gtk_toggle_button_get_mode;
alias c_gtk_toggle_button_set_active gtk_toggle_button_set_active;
alias c_gtk_toggle_button_set_inconsistent gtk_toggle_button_set_inconsistent;
alias c_gtk_toggle_button_set_mode gtk_toggle_button_set_mode;
alias c_gtk_toggle_button_toggled gtk_toggle_button_toggled;

// gtk.ToggleButtonAccessible

alias c_gtk_toggle_button_accessible_get_type gtk_toggle_button_accessible_get_type;

// gtk.ToggleToolButton

alias c_gtk_toggle_tool_button_get_type gtk_toggle_tool_button_get_type;
alias c_gtk_toggle_tool_button_new gtk_toggle_tool_button_new;
alias c_gtk_toggle_tool_button_new_from_stock gtk_toggle_tool_button_new_from_stock;
alias c_gtk_toggle_tool_button_get_active gtk_toggle_tool_button_get_active;
alias c_gtk_toggle_tool_button_set_active gtk_toggle_tool_button_set_active;

// gtk.ToolButton

alias c_gtk_tool_button_get_type gtk_tool_button_get_type;
alias c_gtk_tool_button_new gtk_tool_button_new;
alias c_gtk_tool_button_new_from_stock gtk_tool_button_new_from_stock;
alias c_gtk_tool_button_get_icon_name gtk_tool_button_get_icon_name;
alias c_gtk_tool_button_get_icon_widget gtk_tool_button_get_icon_widget;
alias c_gtk_tool_button_get_label gtk_tool_button_get_label;
alias c_gtk_tool_button_get_label_widget gtk_tool_button_get_label_widget;
alias c_gtk_tool_button_get_stock_id gtk_tool_button_get_stock_id;
alias c_gtk_tool_button_get_use_underline gtk_tool_button_get_use_underline;
alias c_gtk_tool_button_set_icon_name gtk_tool_button_set_icon_name;
alias c_gtk_tool_button_set_icon_widget gtk_tool_button_set_icon_widget;
alias c_gtk_tool_button_set_label gtk_tool_button_set_label;
alias c_gtk_tool_button_set_label_widget gtk_tool_button_set_label_widget;
alias c_gtk_tool_button_set_stock_id gtk_tool_button_set_stock_id;
alias c_gtk_tool_button_set_use_underline gtk_tool_button_set_use_underline;

// gtk.ToolItem

alias c_gtk_tool_item_get_type gtk_tool_item_get_type;
alias c_gtk_tool_item_new gtk_tool_item_new;
alias c_gtk_tool_item_get_ellipsize_mode gtk_tool_item_get_ellipsize_mode;
alias c_gtk_tool_item_get_expand gtk_tool_item_get_expand;
alias c_gtk_tool_item_get_homogeneous gtk_tool_item_get_homogeneous;
alias c_gtk_tool_item_get_icon_size gtk_tool_item_get_icon_size;
alias c_gtk_tool_item_get_is_important gtk_tool_item_get_is_important;
alias c_gtk_tool_item_get_orientation gtk_tool_item_get_orientation;
alias c_gtk_tool_item_get_proxy_menu_item gtk_tool_item_get_proxy_menu_item;
alias c_gtk_tool_item_get_relief_style gtk_tool_item_get_relief_style;
alias c_gtk_tool_item_get_text_alignment gtk_tool_item_get_text_alignment;
alias c_gtk_tool_item_get_text_orientation gtk_tool_item_get_text_orientation;
alias c_gtk_tool_item_get_text_size_group gtk_tool_item_get_text_size_group;
alias c_gtk_tool_item_get_toolbar_style gtk_tool_item_get_toolbar_style;
alias c_gtk_tool_item_get_use_drag_window gtk_tool_item_get_use_drag_window;
alias c_gtk_tool_item_get_visible_horizontal gtk_tool_item_get_visible_horizontal;
alias c_gtk_tool_item_get_visible_vertical gtk_tool_item_get_visible_vertical;
alias c_gtk_tool_item_rebuild_menu gtk_tool_item_rebuild_menu;
alias c_gtk_tool_item_retrieve_proxy_menu_item gtk_tool_item_retrieve_proxy_menu_item;
alias c_gtk_tool_item_set_expand gtk_tool_item_set_expand;
alias c_gtk_tool_item_set_homogeneous gtk_tool_item_set_homogeneous;
alias c_gtk_tool_item_set_is_important gtk_tool_item_set_is_important;
alias c_gtk_tool_item_set_proxy_menu_item gtk_tool_item_set_proxy_menu_item;
alias c_gtk_tool_item_set_tooltip_markup gtk_tool_item_set_tooltip_markup;
alias c_gtk_tool_item_set_tooltip_text gtk_tool_item_set_tooltip_text;
alias c_gtk_tool_item_set_use_drag_window gtk_tool_item_set_use_drag_window;
alias c_gtk_tool_item_set_visible_horizontal gtk_tool_item_set_visible_horizontal;
alias c_gtk_tool_item_set_visible_vertical gtk_tool_item_set_visible_vertical;
alias c_gtk_tool_item_toolbar_reconfigured gtk_tool_item_toolbar_reconfigured;

// gtk.ToolItemGroup

alias c_gtk_tool_item_group_get_type gtk_tool_item_group_get_type;
alias c_gtk_tool_item_group_new gtk_tool_item_group_new;
alias c_gtk_tool_item_group_get_collapsed gtk_tool_item_group_get_collapsed;
alias c_gtk_tool_item_group_get_drop_item gtk_tool_item_group_get_drop_item;
alias c_gtk_tool_item_group_get_ellipsize gtk_tool_item_group_get_ellipsize;
alias c_gtk_tool_item_group_get_header_relief gtk_tool_item_group_get_header_relief;
alias c_gtk_tool_item_group_get_item_position gtk_tool_item_group_get_item_position;
alias c_gtk_tool_item_group_get_label gtk_tool_item_group_get_label;
alias c_gtk_tool_item_group_get_label_widget gtk_tool_item_group_get_label_widget;
alias c_gtk_tool_item_group_get_n_items gtk_tool_item_group_get_n_items;
alias c_gtk_tool_item_group_get_nth_item gtk_tool_item_group_get_nth_item;
alias c_gtk_tool_item_group_insert gtk_tool_item_group_insert;
alias c_gtk_tool_item_group_set_collapsed gtk_tool_item_group_set_collapsed;
alias c_gtk_tool_item_group_set_ellipsize gtk_tool_item_group_set_ellipsize;
alias c_gtk_tool_item_group_set_header_relief gtk_tool_item_group_set_header_relief;
alias c_gtk_tool_item_group_set_item_position gtk_tool_item_group_set_item_position;
alias c_gtk_tool_item_group_set_label gtk_tool_item_group_set_label;
alias c_gtk_tool_item_group_set_label_widget gtk_tool_item_group_set_label_widget;

// gtk.ToolPalette

alias c_gtk_tool_palette_get_type gtk_tool_palette_get_type;
alias c_gtk_tool_palette_new gtk_tool_palette_new;
alias c_gtk_tool_palette_get_drag_target_group gtk_tool_palette_get_drag_target_group;
alias c_gtk_tool_palette_get_drag_target_item gtk_tool_palette_get_drag_target_item;
alias c_gtk_tool_palette_add_drag_dest gtk_tool_palette_add_drag_dest;
alias c_gtk_tool_palette_get_drag_item gtk_tool_palette_get_drag_item;
alias c_gtk_tool_palette_get_drop_group gtk_tool_palette_get_drop_group;
alias c_gtk_tool_palette_get_drop_item gtk_tool_palette_get_drop_item;
alias c_gtk_tool_palette_get_exclusive gtk_tool_palette_get_exclusive;
alias c_gtk_tool_palette_get_expand gtk_tool_palette_get_expand;
alias c_gtk_tool_palette_get_group_position gtk_tool_palette_get_group_position;
alias c_gtk_tool_palette_get_hadjustment gtk_tool_palette_get_hadjustment;
alias c_gtk_tool_palette_get_icon_size gtk_tool_palette_get_icon_size;
alias c_gtk_tool_palette_get_style gtk_tool_palette_get_style;
alias c_gtk_tool_palette_get_vadjustment gtk_tool_palette_get_vadjustment;
alias c_gtk_tool_palette_set_drag_source gtk_tool_palette_set_drag_source;
alias c_gtk_tool_palette_set_exclusive gtk_tool_palette_set_exclusive;
alias c_gtk_tool_palette_set_expand gtk_tool_palette_set_expand;
alias c_gtk_tool_palette_set_group_position gtk_tool_palette_set_group_position;
alias c_gtk_tool_palette_set_icon_size gtk_tool_palette_set_icon_size;
alias c_gtk_tool_palette_set_style gtk_tool_palette_set_style;
alias c_gtk_tool_palette_unset_icon_size gtk_tool_palette_unset_icon_size;
alias c_gtk_tool_palette_unset_style gtk_tool_palette_unset_style;

// gtk.ToolShell

alias c_gtk_tool_shell_get_type gtk_tool_shell_get_type;
alias c_gtk_tool_shell_get_ellipsize_mode gtk_tool_shell_get_ellipsize_mode;
alias c_gtk_tool_shell_get_icon_size gtk_tool_shell_get_icon_size;
alias c_gtk_tool_shell_get_orientation gtk_tool_shell_get_orientation;
alias c_gtk_tool_shell_get_relief_style gtk_tool_shell_get_relief_style;
alias c_gtk_tool_shell_get_style gtk_tool_shell_get_style;
alias c_gtk_tool_shell_get_text_alignment gtk_tool_shell_get_text_alignment;
alias c_gtk_tool_shell_get_text_orientation gtk_tool_shell_get_text_orientation;
alias c_gtk_tool_shell_get_text_size_group gtk_tool_shell_get_text_size_group;
alias c_gtk_tool_shell_rebuild_menu gtk_tool_shell_rebuild_menu;

// gtk.Toolbar

alias c_gtk_toolbar_get_type gtk_toolbar_get_type;
alias c_gtk_toolbar_new gtk_toolbar_new;
alias c_gtk_toolbar_get_drop_index gtk_toolbar_get_drop_index;
alias c_gtk_toolbar_get_icon_size gtk_toolbar_get_icon_size;
alias c_gtk_toolbar_get_item_index gtk_toolbar_get_item_index;
alias c_gtk_toolbar_get_n_items gtk_toolbar_get_n_items;
alias c_gtk_toolbar_get_nth_item gtk_toolbar_get_nth_item;
alias c_gtk_toolbar_get_relief_style gtk_toolbar_get_relief_style;
alias c_gtk_toolbar_get_show_arrow gtk_toolbar_get_show_arrow;
alias c_gtk_toolbar_get_style gtk_toolbar_get_style;
alias c_gtk_toolbar_insert gtk_toolbar_insert;
alias c_gtk_toolbar_set_drop_highlight_item gtk_toolbar_set_drop_highlight_item;
alias c_gtk_toolbar_set_icon_size gtk_toolbar_set_icon_size;
alias c_gtk_toolbar_set_show_arrow gtk_toolbar_set_show_arrow;
alias c_gtk_toolbar_set_style gtk_toolbar_set_style;
alias c_gtk_toolbar_unset_icon_size gtk_toolbar_unset_icon_size;
alias c_gtk_toolbar_unset_style gtk_toolbar_unset_style;

// gtk.Tooltip

alias c_gtk_tooltip_get_type gtk_tooltip_get_type;
alias c_gtk_tooltip_trigger_tooltip_query gtk_tooltip_trigger_tooltip_query;
alias c_gtk_tooltip_set_custom gtk_tooltip_set_custom;
alias c_gtk_tooltip_set_icon gtk_tooltip_set_icon;
alias c_gtk_tooltip_set_icon_from_gicon gtk_tooltip_set_icon_from_gicon;
alias c_gtk_tooltip_set_icon_from_icon_name gtk_tooltip_set_icon_from_icon_name;
alias c_gtk_tooltip_set_icon_from_stock gtk_tooltip_set_icon_from_stock;
alias c_gtk_tooltip_set_markup gtk_tooltip_set_markup;
alias c_gtk_tooltip_set_text gtk_tooltip_set_text;
alias c_gtk_tooltip_set_tip_area gtk_tooltip_set_tip_area;

// gtk.ToplevelAccessible

alias c_gtk_toplevel_accessible_get_type gtk_toplevel_accessible_get_type;
alias c_gtk_toplevel_accessible_get_children gtk_toplevel_accessible_get_children;

// gtk.TreeDragDest

alias c_gtk_tree_drag_dest_get_type gtk_tree_drag_dest_get_type;
alias c_gtk_tree_drag_dest_drag_data_received gtk_tree_drag_dest_drag_data_received;
alias c_gtk_tree_drag_dest_row_drop_possible gtk_tree_drag_dest_row_drop_possible;

// gtk.TreeDragSource

alias c_gtk_tree_drag_source_get_type gtk_tree_drag_source_get_type;
alias c_gtk_tree_drag_source_drag_data_delete gtk_tree_drag_source_drag_data_delete;
alias c_gtk_tree_drag_source_drag_data_get gtk_tree_drag_source_drag_data_get;
alias c_gtk_tree_drag_source_row_draggable gtk_tree_drag_source_row_draggable;
alias c_gtk_tree_get_row_drag_data gtk_tree_get_row_drag_data;
alias c_gtk_tree_set_row_drag_data gtk_tree_set_row_drag_data;

// gtk.TreeIter

alias c_gtk_tree_iter_get_type gtk_tree_iter_get_type;
alias c_gtk_tree_iter_copy gtk_tree_iter_copy;
alias c_gtk_tree_iter_free gtk_tree_iter_free;

// gtk.TreeModel

alias c_gtk_tree_model_get_type gtk_tree_model_get_type;
alias c_gtk_tree_model_filter_new gtk_tree_model_filter_new;
alias c_gtk_tree_model_foreach gtk_tree_model_foreach;
alias c_gtk_tree_model_get gtk_tree_model_get;
alias c_gtk_tree_model_get_column_type gtk_tree_model_get_column_type;
alias c_gtk_tree_model_get_flags gtk_tree_model_get_flags;
alias c_gtk_tree_model_get_iter gtk_tree_model_get_iter;
alias c_gtk_tree_model_get_iter_first gtk_tree_model_get_iter_first;
alias c_gtk_tree_model_get_iter_from_string gtk_tree_model_get_iter_from_string;
alias c_gtk_tree_model_get_n_columns gtk_tree_model_get_n_columns;
alias c_gtk_tree_model_get_path gtk_tree_model_get_path;
alias c_gtk_tree_model_get_string_from_iter gtk_tree_model_get_string_from_iter;
alias c_gtk_tree_model_get_valist gtk_tree_model_get_valist;
alias c_gtk_tree_model_get_value gtk_tree_model_get_value;
alias c_gtk_tree_model_iter_children gtk_tree_model_iter_children;
alias c_gtk_tree_model_iter_has_child gtk_tree_model_iter_has_child;
alias c_gtk_tree_model_iter_n_children gtk_tree_model_iter_n_children;
alias c_gtk_tree_model_iter_next gtk_tree_model_iter_next;
alias c_gtk_tree_model_iter_nth_child gtk_tree_model_iter_nth_child;
alias c_gtk_tree_model_iter_parent gtk_tree_model_iter_parent;
alias c_gtk_tree_model_iter_previous gtk_tree_model_iter_previous;
alias c_gtk_tree_model_ref_node gtk_tree_model_ref_node;
alias c_gtk_tree_model_row_changed gtk_tree_model_row_changed;
alias c_gtk_tree_model_row_deleted gtk_tree_model_row_deleted;
alias c_gtk_tree_model_row_has_child_toggled gtk_tree_model_row_has_child_toggled;
alias c_gtk_tree_model_row_inserted gtk_tree_model_row_inserted;
alias c_gtk_tree_model_rows_reordered gtk_tree_model_rows_reordered;
alias c_gtk_tree_model_rows_reordered_with_length gtk_tree_model_rows_reordered_with_length;
alias c_gtk_tree_model_sort_new_with_model gtk_tree_model_sort_new_with_model;
alias c_gtk_tree_model_unref_node gtk_tree_model_unref_node;

// gtk.TreeModelFilter

alias c_gtk_tree_model_filter_get_type gtk_tree_model_filter_get_type;
alias c_gtk_tree_model_filter_clear_cache gtk_tree_model_filter_clear_cache;
alias c_gtk_tree_model_filter_convert_child_iter_to_iter gtk_tree_model_filter_convert_child_iter_to_iter;
alias c_gtk_tree_model_filter_convert_child_path_to_path gtk_tree_model_filter_convert_child_path_to_path;
alias c_gtk_tree_model_filter_convert_iter_to_child_iter gtk_tree_model_filter_convert_iter_to_child_iter;
alias c_gtk_tree_model_filter_convert_path_to_child_path gtk_tree_model_filter_convert_path_to_child_path;
alias c_gtk_tree_model_filter_get_model gtk_tree_model_filter_get_model;
alias c_gtk_tree_model_filter_refilter gtk_tree_model_filter_refilter;
alias c_gtk_tree_model_filter_set_modify_func gtk_tree_model_filter_set_modify_func;
alias c_gtk_tree_model_filter_set_visible_column gtk_tree_model_filter_set_visible_column;
alias c_gtk_tree_model_filter_set_visible_func gtk_tree_model_filter_set_visible_func;

// gtk.TreeModelSort

alias c_gtk_tree_model_sort_get_type gtk_tree_model_sort_get_type;
alias c_gtk_tree_model_sort_clear_cache gtk_tree_model_sort_clear_cache;
alias c_gtk_tree_model_sort_convert_child_iter_to_iter gtk_tree_model_sort_convert_child_iter_to_iter;
alias c_gtk_tree_model_sort_convert_child_path_to_path gtk_tree_model_sort_convert_child_path_to_path;
alias c_gtk_tree_model_sort_convert_iter_to_child_iter gtk_tree_model_sort_convert_iter_to_child_iter;
alias c_gtk_tree_model_sort_convert_path_to_child_path gtk_tree_model_sort_convert_path_to_child_path;
alias c_gtk_tree_model_sort_get_model gtk_tree_model_sort_get_model;
alias c_gtk_tree_model_sort_iter_is_valid gtk_tree_model_sort_iter_is_valid;
alias c_gtk_tree_model_sort_reset_default_sort_func gtk_tree_model_sort_reset_default_sort_func;

// gtk.TreePath

alias c_gtk_tree_path_get_type gtk_tree_path_get_type;
alias c_gtk_tree_path_new gtk_tree_path_new;
alias c_gtk_tree_path_new_first gtk_tree_path_new_first;
alias c_gtk_tree_path_new_from_indices gtk_tree_path_new_from_indices;
alias c_gtk_tree_path_new_from_indicesv gtk_tree_path_new_from_indicesv;
alias c_gtk_tree_path_new_from_string gtk_tree_path_new_from_string;
alias c_gtk_tree_path_append_index gtk_tree_path_append_index;
alias c_gtk_tree_path_compare gtk_tree_path_compare;
alias c_gtk_tree_path_copy gtk_tree_path_copy;
alias c_gtk_tree_path_down gtk_tree_path_down;
alias c_gtk_tree_path_free gtk_tree_path_free;
alias c_gtk_tree_path_get_depth gtk_tree_path_get_depth;
alias c_gtk_tree_path_get_indices gtk_tree_path_get_indices;
alias c_gtk_tree_path_get_indices_with_depth gtk_tree_path_get_indices_with_depth;
alias c_gtk_tree_path_is_ancestor gtk_tree_path_is_ancestor;
alias c_gtk_tree_path_is_descendant gtk_tree_path_is_descendant;
alias c_gtk_tree_path_next gtk_tree_path_next;
alias c_gtk_tree_path_prepend_index gtk_tree_path_prepend_index;
alias c_gtk_tree_path_prev gtk_tree_path_prev;
alias c_gtk_tree_path_to_string gtk_tree_path_to_string;
alias c_gtk_tree_path_up gtk_tree_path_up;

// gtk.TreeRowReference

alias c_gtk_tree_row_reference_get_type gtk_tree_row_reference_get_type;
alias c_gtk_tree_row_reference_new gtk_tree_row_reference_new;
alias c_gtk_tree_row_reference_new_proxy gtk_tree_row_reference_new_proxy;
alias c_gtk_tree_row_reference_copy gtk_tree_row_reference_copy;
alias c_gtk_tree_row_reference_free gtk_tree_row_reference_free;
alias c_gtk_tree_row_reference_get_model gtk_tree_row_reference_get_model;
alias c_gtk_tree_row_reference_get_path gtk_tree_row_reference_get_path;
alias c_gtk_tree_row_reference_valid gtk_tree_row_reference_valid;
alias c_gtk_tree_row_reference_deleted gtk_tree_row_reference_deleted;
alias c_gtk_tree_row_reference_inserted gtk_tree_row_reference_inserted;
alias c_gtk_tree_row_reference_reordered gtk_tree_row_reference_reordered;

// gtk.TreeSelection

alias c_gtk_tree_selection_get_type gtk_tree_selection_get_type;
alias c_gtk_tree_selection_count_selected_rows gtk_tree_selection_count_selected_rows;
alias c_gtk_tree_selection_get_mode gtk_tree_selection_get_mode;
alias c_gtk_tree_selection_get_select_function gtk_tree_selection_get_select_function;
alias c_gtk_tree_selection_get_selected gtk_tree_selection_get_selected;
alias c_gtk_tree_selection_get_selected_rows gtk_tree_selection_get_selected_rows;
alias c_gtk_tree_selection_get_tree_view gtk_tree_selection_get_tree_view;
alias c_gtk_tree_selection_get_user_data gtk_tree_selection_get_user_data;
alias c_gtk_tree_selection_iter_is_selected gtk_tree_selection_iter_is_selected;
alias c_gtk_tree_selection_path_is_selected gtk_tree_selection_path_is_selected;
alias c_gtk_tree_selection_select_all gtk_tree_selection_select_all;
alias c_gtk_tree_selection_select_iter gtk_tree_selection_select_iter;
alias c_gtk_tree_selection_select_path gtk_tree_selection_select_path;
alias c_gtk_tree_selection_select_range gtk_tree_selection_select_range;
alias c_gtk_tree_selection_selected_foreach gtk_tree_selection_selected_foreach;
alias c_gtk_tree_selection_set_mode gtk_tree_selection_set_mode;
alias c_gtk_tree_selection_set_select_function gtk_tree_selection_set_select_function;
alias c_gtk_tree_selection_unselect_all gtk_tree_selection_unselect_all;
alias c_gtk_tree_selection_unselect_iter gtk_tree_selection_unselect_iter;
alias c_gtk_tree_selection_unselect_path gtk_tree_selection_unselect_path;
alias c_gtk_tree_selection_unselect_range gtk_tree_selection_unselect_range;

// gtk.TreeSortable

alias c_gtk_tree_sortable_get_type gtk_tree_sortable_get_type;
alias c_gtk_tree_sortable_get_sort_column_id gtk_tree_sortable_get_sort_column_id;
alias c_gtk_tree_sortable_has_default_sort_func gtk_tree_sortable_has_default_sort_func;
alias c_gtk_tree_sortable_set_default_sort_func gtk_tree_sortable_set_default_sort_func;
alias c_gtk_tree_sortable_set_sort_column_id gtk_tree_sortable_set_sort_column_id;
alias c_gtk_tree_sortable_set_sort_func gtk_tree_sortable_set_sort_func;
alias c_gtk_tree_sortable_sort_column_changed gtk_tree_sortable_sort_column_changed;

// gtk.TreeStore

alias c_gtk_tree_store_get_type gtk_tree_store_get_type;
alias c_gtk_tree_store_new gtk_tree_store_new;
alias c_gtk_tree_store_newv gtk_tree_store_newv;
alias c_gtk_tree_store_append gtk_tree_store_append;
alias c_gtk_tree_store_clear gtk_tree_store_clear;
alias c_gtk_tree_store_insert gtk_tree_store_insert;
alias c_gtk_tree_store_insert_after gtk_tree_store_insert_after;
alias c_gtk_tree_store_insert_before gtk_tree_store_insert_before;
alias c_gtk_tree_store_insert_with_values gtk_tree_store_insert_with_values;
alias c_gtk_tree_store_insert_with_valuesv gtk_tree_store_insert_with_valuesv;
alias c_gtk_tree_store_is_ancestor gtk_tree_store_is_ancestor;
alias c_gtk_tree_store_iter_depth gtk_tree_store_iter_depth;
alias c_gtk_tree_store_iter_is_valid gtk_tree_store_iter_is_valid;
alias c_gtk_tree_store_move_after gtk_tree_store_move_after;
alias c_gtk_tree_store_move_before gtk_tree_store_move_before;
alias c_gtk_tree_store_prepend gtk_tree_store_prepend;
alias c_gtk_tree_store_remove gtk_tree_store_remove;
alias c_gtk_tree_store_reorder gtk_tree_store_reorder;
alias c_gtk_tree_store_set gtk_tree_store_set;
alias c_gtk_tree_store_set_column_types gtk_tree_store_set_column_types;
alias c_gtk_tree_store_set_valist gtk_tree_store_set_valist;
alias c_gtk_tree_store_set_value gtk_tree_store_set_value;
alias c_gtk_tree_store_set_valuesv gtk_tree_store_set_valuesv;
alias c_gtk_tree_store_swap gtk_tree_store_swap;

// gtk.TreeView

alias c_gtk_tree_view_get_type gtk_tree_view_get_type;
alias c_gtk_tree_view_new gtk_tree_view_new;
alias c_gtk_tree_view_new_with_model gtk_tree_view_new_with_model;
alias c_gtk_tree_view_append_column gtk_tree_view_append_column;
alias c_gtk_tree_view_collapse_all gtk_tree_view_collapse_all;
alias c_gtk_tree_view_collapse_row gtk_tree_view_collapse_row;
alias c_gtk_tree_view_columns_autosize gtk_tree_view_columns_autosize;
alias c_gtk_tree_view_convert_bin_window_to_tree_coords gtk_tree_view_convert_bin_window_to_tree_coords;
alias c_gtk_tree_view_convert_bin_window_to_widget_coords gtk_tree_view_convert_bin_window_to_widget_coords;
alias c_gtk_tree_view_convert_tree_to_bin_window_coords gtk_tree_view_convert_tree_to_bin_window_coords;
alias c_gtk_tree_view_convert_tree_to_widget_coords gtk_tree_view_convert_tree_to_widget_coords;
alias c_gtk_tree_view_convert_widget_to_bin_window_coords gtk_tree_view_convert_widget_to_bin_window_coords;
alias c_gtk_tree_view_convert_widget_to_tree_coords gtk_tree_view_convert_widget_to_tree_coords;
alias c_gtk_tree_view_create_row_drag_icon gtk_tree_view_create_row_drag_icon;
alias c_gtk_tree_view_enable_model_drag_dest gtk_tree_view_enable_model_drag_dest;
alias c_gtk_tree_view_enable_model_drag_source gtk_tree_view_enable_model_drag_source;
alias c_gtk_tree_view_expand_all gtk_tree_view_expand_all;
alias c_gtk_tree_view_expand_row gtk_tree_view_expand_row;
alias c_gtk_tree_view_expand_to_path gtk_tree_view_expand_to_path;
alias c_gtk_tree_view_get_activate_on_single_click gtk_tree_view_get_activate_on_single_click;
alias c_gtk_tree_view_get_background_area gtk_tree_view_get_background_area;
alias c_gtk_tree_view_get_bin_window gtk_tree_view_get_bin_window;
alias c_gtk_tree_view_get_cell_area gtk_tree_view_get_cell_area;
alias c_gtk_tree_view_get_column gtk_tree_view_get_column;
alias c_gtk_tree_view_get_columns gtk_tree_view_get_columns;
alias c_gtk_tree_view_get_cursor gtk_tree_view_get_cursor;
alias c_gtk_tree_view_get_dest_row_at_pos gtk_tree_view_get_dest_row_at_pos;
alias c_gtk_tree_view_get_drag_dest_row gtk_tree_view_get_drag_dest_row;
alias c_gtk_tree_view_get_enable_search gtk_tree_view_get_enable_search;
alias c_gtk_tree_view_get_enable_tree_lines gtk_tree_view_get_enable_tree_lines;
alias c_gtk_tree_view_get_expander_column gtk_tree_view_get_expander_column;
alias c_gtk_tree_view_get_fixed_height_mode gtk_tree_view_get_fixed_height_mode;
alias c_gtk_tree_view_get_grid_lines gtk_tree_view_get_grid_lines;
alias c_gtk_tree_view_get_hadjustment gtk_tree_view_get_hadjustment;
alias c_gtk_tree_view_get_headers_clickable gtk_tree_view_get_headers_clickable;
alias c_gtk_tree_view_get_headers_visible gtk_tree_view_get_headers_visible;
alias c_gtk_tree_view_get_hover_expand gtk_tree_view_get_hover_expand;
alias c_gtk_tree_view_get_hover_selection gtk_tree_view_get_hover_selection;
alias c_gtk_tree_view_get_level_indentation gtk_tree_view_get_level_indentation;
alias c_gtk_tree_view_get_model gtk_tree_view_get_model;
alias c_gtk_tree_view_get_n_columns gtk_tree_view_get_n_columns;
alias c_gtk_tree_view_get_path_at_pos gtk_tree_view_get_path_at_pos;
alias c_gtk_tree_view_get_reorderable gtk_tree_view_get_reorderable;
alias c_gtk_tree_view_get_row_separator_func gtk_tree_view_get_row_separator_func;
alias c_gtk_tree_view_get_rubber_banding gtk_tree_view_get_rubber_banding;
alias c_gtk_tree_view_get_rules_hint gtk_tree_view_get_rules_hint;
alias c_gtk_tree_view_get_search_column gtk_tree_view_get_search_column;
alias c_gtk_tree_view_get_search_entry gtk_tree_view_get_search_entry;
alias c_gtk_tree_view_get_search_equal_func gtk_tree_view_get_search_equal_func;
alias c_gtk_tree_view_get_search_position_func gtk_tree_view_get_search_position_func;
alias c_gtk_tree_view_get_selection gtk_tree_view_get_selection;
alias c_gtk_tree_view_get_show_expanders gtk_tree_view_get_show_expanders;
alias c_gtk_tree_view_get_tooltip_column gtk_tree_view_get_tooltip_column;
alias c_gtk_tree_view_get_tooltip_context gtk_tree_view_get_tooltip_context;
alias c_gtk_tree_view_get_vadjustment gtk_tree_view_get_vadjustment;
alias c_gtk_tree_view_get_visible_range gtk_tree_view_get_visible_range;
alias c_gtk_tree_view_get_visible_rect gtk_tree_view_get_visible_rect;
alias c_gtk_tree_view_insert_column gtk_tree_view_insert_column;
alias c_gtk_tree_view_insert_column_with_attributes gtk_tree_view_insert_column_with_attributes;
alias c_gtk_tree_view_insert_column_with_data_func gtk_tree_view_insert_column_with_data_func;
alias c_gtk_tree_view_is_blank_at_pos gtk_tree_view_is_blank_at_pos;
alias c_gtk_tree_view_is_rubber_banding_active gtk_tree_view_is_rubber_banding_active;
alias c_gtk_tree_view_map_expanded_rows gtk_tree_view_map_expanded_rows;
alias c_gtk_tree_view_move_column_after gtk_tree_view_move_column_after;
alias c_gtk_tree_view_remove_column gtk_tree_view_remove_column;
alias c_gtk_tree_view_row_activated gtk_tree_view_row_activated;
alias c_gtk_tree_view_row_expanded gtk_tree_view_row_expanded;
alias c_gtk_tree_view_scroll_to_cell gtk_tree_view_scroll_to_cell;
alias c_gtk_tree_view_scroll_to_point gtk_tree_view_scroll_to_point;
alias c_gtk_tree_view_set_activate_on_single_click gtk_tree_view_set_activate_on_single_click;
alias c_gtk_tree_view_set_column_drag_function gtk_tree_view_set_column_drag_function;
alias c_gtk_tree_view_set_cursor gtk_tree_view_set_cursor;
alias c_gtk_tree_view_set_cursor_on_cell gtk_tree_view_set_cursor_on_cell;
alias c_gtk_tree_view_set_destroy_count_func gtk_tree_view_set_destroy_count_func;
alias c_gtk_tree_view_set_drag_dest_row gtk_tree_view_set_drag_dest_row;
alias c_gtk_tree_view_set_enable_search gtk_tree_view_set_enable_search;
alias c_gtk_tree_view_set_enable_tree_lines gtk_tree_view_set_enable_tree_lines;
alias c_gtk_tree_view_set_expander_column gtk_tree_view_set_expander_column;
alias c_gtk_tree_view_set_fixed_height_mode gtk_tree_view_set_fixed_height_mode;
alias c_gtk_tree_view_set_grid_lines gtk_tree_view_set_grid_lines;
alias c_gtk_tree_view_set_hadjustment gtk_tree_view_set_hadjustment;
alias c_gtk_tree_view_set_headers_clickable gtk_tree_view_set_headers_clickable;
alias c_gtk_tree_view_set_headers_visible gtk_tree_view_set_headers_visible;
alias c_gtk_tree_view_set_hover_expand gtk_tree_view_set_hover_expand;
alias c_gtk_tree_view_set_hover_selection gtk_tree_view_set_hover_selection;
alias c_gtk_tree_view_set_level_indentation gtk_tree_view_set_level_indentation;
alias c_gtk_tree_view_set_model gtk_tree_view_set_model;
alias c_gtk_tree_view_set_reorderable gtk_tree_view_set_reorderable;
alias c_gtk_tree_view_set_row_separator_func gtk_tree_view_set_row_separator_func;
alias c_gtk_tree_view_set_rubber_banding gtk_tree_view_set_rubber_banding;
alias c_gtk_tree_view_set_rules_hint gtk_tree_view_set_rules_hint;
alias c_gtk_tree_view_set_search_column gtk_tree_view_set_search_column;
alias c_gtk_tree_view_set_search_entry gtk_tree_view_set_search_entry;
alias c_gtk_tree_view_set_search_equal_func gtk_tree_view_set_search_equal_func;
alias c_gtk_tree_view_set_search_position_func gtk_tree_view_set_search_position_func;
alias c_gtk_tree_view_set_show_expanders gtk_tree_view_set_show_expanders;
alias c_gtk_tree_view_set_tooltip_cell gtk_tree_view_set_tooltip_cell;
alias c_gtk_tree_view_set_tooltip_column gtk_tree_view_set_tooltip_column;
alias c_gtk_tree_view_set_tooltip_row gtk_tree_view_set_tooltip_row;
alias c_gtk_tree_view_set_vadjustment gtk_tree_view_set_vadjustment;
alias c_gtk_tree_view_unset_rows_drag_dest gtk_tree_view_unset_rows_drag_dest;
alias c_gtk_tree_view_unset_rows_drag_source gtk_tree_view_unset_rows_drag_source;

// gtk.TreeViewAccessible

alias c_gtk_tree_view_accessible_get_type gtk_tree_view_accessible_get_type;

// gtk.TreeViewColumn

alias c_gtk_tree_view_column_get_type gtk_tree_view_column_get_type;
alias c_gtk_tree_view_column_new gtk_tree_view_column_new;
alias c_gtk_tree_view_column_new_with_area gtk_tree_view_column_new_with_area;
alias c_gtk_tree_view_column_new_with_attributes gtk_tree_view_column_new_with_attributes;
alias c_gtk_tree_view_column_add_attribute gtk_tree_view_column_add_attribute;
alias c_gtk_tree_view_column_cell_get_position gtk_tree_view_column_cell_get_position;
alias c_gtk_tree_view_column_cell_get_size gtk_tree_view_column_cell_get_size;
alias c_gtk_tree_view_column_cell_is_visible gtk_tree_view_column_cell_is_visible;
alias c_gtk_tree_view_column_cell_set_cell_data gtk_tree_view_column_cell_set_cell_data;
alias c_gtk_tree_view_column_clear gtk_tree_view_column_clear;
alias c_gtk_tree_view_column_clear_attributes gtk_tree_view_column_clear_attributes;
alias c_gtk_tree_view_column_clicked gtk_tree_view_column_clicked;
alias c_gtk_tree_view_column_focus_cell gtk_tree_view_column_focus_cell;
alias c_gtk_tree_view_column_get_alignment gtk_tree_view_column_get_alignment;
alias c_gtk_tree_view_column_get_button gtk_tree_view_column_get_button;
alias c_gtk_tree_view_column_get_clickable gtk_tree_view_column_get_clickable;
alias c_gtk_tree_view_column_get_expand gtk_tree_view_column_get_expand;
alias c_gtk_tree_view_column_get_fixed_width gtk_tree_view_column_get_fixed_width;
alias c_gtk_tree_view_column_get_max_width gtk_tree_view_column_get_max_width;
alias c_gtk_tree_view_column_get_min_width gtk_tree_view_column_get_min_width;
alias c_gtk_tree_view_column_get_reorderable gtk_tree_view_column_get_reorderable;
alias c_gtk_tree_view_column_get_resizable gtk_tree_view_column_get_resizable;
alias c_gtk_tree_view_column_get_sizing gtk_tree_view_column_get_sizing;
alias c_gtk_tree_view_column_get_sort_column_id gtk_tree_view_column_get_sort_column_id;
alias c_gtk_tree_view_column_get_sort_indicator gtk_tree_view_column_get_sort_indicator;
alias c_gtk_tree_view_column_get_sort_order gtk_tree_view_column_get_sort_order;
alias c_gtk_tree_view_column_get_spacing gtk_tree_view_column_get_spacing;
alias c_gtk_tree_view_column_get_title gtk_tree_view_column_get_title;
alias c_gtk_tree_view_column_get_tree_view gtk_tree_view_column_get_tree_view;
alias c_gtk_tree_view_column_get_visible gtk_tree_view_column_get_visible;
alias c_gtk_tree_view_column_get_widget gtk_tree_view_column_get_widget;
alias c_gtk_tree_view_column_get_width gtk_tree_view_column_get_width;
alias c_gtk_tree_view_column_get_x_offset gtk_tree_view_column_get_x_offset;
alias c_gtk_tree_view_column_pack_end gtk_tree_view_column_pack_end;
alias c_gtk_tree_view_column_pack_start gtk_tree_view_column_pack_start;
alias c_gtk_tree_view_column_queue_resize gtk_tree_view_column_queue_resize;
alias c_gtk_tree_view_column_set_alignment gtk_tree_view_column_set_alignment;
alias c_gtk_tree_view_column_set_attributes gtk_tree_view_column_set_attributes;
alias c_gtk_tree_view_column_set_cell_data_func gtk_tree_view_column_set_cell_data_func;
alias c_gtk_tree_view_column_set_clickable gtk_tree_view_column_set_clickable;
alias c_gtk_tree_view_column_set_expand gtk_tree_view_column_set_expand;
alias c_gtk_tree_view_column_set_fixed_width gtk_tree_view_column_set_fixed_width;
alias c_gtk_tree_view_column_set_max_width gtk_tree_view_column_set_max_width;
alias c_gtk_tree_view_column_set_min_width gtk_tree_view_column_set_min_width;
alias c_gtk_tree_view_column_set_reorderable gtk_tree_view_column_set_reorderable;
alias c_gtk_tree_view_column_set_resizable gtk_tree_view_column_set_resizable;
alias c_gtk_tree_view_column_set_sizing gtk_tree_view_column_set_sizing;
alias c_gtk_tree_view_column_set_sort_column_id gtk_tree_view_column_set_sort_column_id;
alias c_gtk_tree_view_column_set_sort_indicator gtk_tree_view_column_set_sort_indicator;
alias c_gtk_tree_view_column_set_sort_order gtk_tree_view_column_set_sort_order;
alias c_gtk_tree_view_column_set_spacing gtk_tree_view_column_set_spacing;
alias c_gtk_tree_view_column_set_title gtk_tree_view_column_set_title;
alias c_gtk_tree_view_column_set_visible gtk_tree_view_column_set_visible;
alias c_gtk_tree_view_column_set_widget gtk_tree_view_column_set_widget;

// gtk.UIManager

alias c_gtk_ui_manager_get_type gtk_ui_manager_get_type;
alias c_gtk_ui_manager_new gtk_ui_manager_new;
alias c_gtk_ui_manager_add_ui gtk_ui_manager_add_ui;
alias c_gtk_ui_manager_add_ui_from_file gtk_ui_manager_add_ui_from_file;
alias c_gtk_ui_manager_add_ui_from_resource gtk_ui_manager_add_ui_from_resource;
alias c_gtk_ui_manager_add_ui_from_string gtk_ui_manager_add_ui_from_string;
alias c_gtk_ui_manager_ensure_update gtk_ui_manager_ensure_update;
alias c_gtk_ui_manager_get_accel_group gtk_ui_manager_get_accel_group;
alias c_gtk_ui_manager_get_action gtk_ui_manager_get_action;
alias c_gtk_ui_manager_get_action_groups gtk_ui_manager_get_action_groups;
alias c_gtk_ui_manager_get_add_tearoffs gtk_ui_manager_get_add_tearoffs;
alias c_gtk_ui_manager_get_toplevels gtk_ui_manager_get_toplevels;
alias c_gtk_ui_manager_get_ui gtk_ui_manager_get_ui;
alias c_gtk_ui_manager_get_widget gtk_ui_manager_get_widget;
alias c_gtk_ui_manager_insert_action_group gtk_ui_manager_insert_action_group;
alias c_gtk_ui_manager_new_merge_id gtk_ui_manager_new_merge_id;
alias c_gtk_ui_manager_remove_action_group gtk_ui_manager_remove_action_group;
alias c_gtk_ui_manager_remove_ui gtk_ui_manager_remove_ui;
alias c_gtk_ui_manager_set_add_tearoffs gtk_ui_manager_set_add_tearoffs;

// gtk.VBox

alias c_gtk_vbox_get_type gtk_vbox_get_type;
alias c_gtk_vbox_new gtk_vbox_new;

// gtk.VButtonBox

alias c_gtk_vbutton_box_get_type gtk_vbutton_box_get_type;
alias c_gtk_vbutton_box_new gtk_vbutton_box_new;

// gtk.VPaned

alias c_gtk_vpaned_get_type gtk_vpaned_get_type;
alias c_gtk_vpaned_new gtk_vpaned_new;

// gtk.VScale

alias c_gtk_vscale_get_type gtk_vscale_get_type;
alias c_gtk_vscale_new gtk_vscale_new;
alias c_gtk_vscale_new_with_range gtk_vscale_new_with_range;

// gtk.VScrollbar

alias c_gtk_vscrollbar_get_type gtk_vscrollbar_get_type;
alias c_gtk_vscrollbar_new gtk_vscrollbar_new;

// gtk.VSeparator

alias c_gtk_vseparator_get_type gtk_vseparator_get_type;
alias c_gtk_vseparator_new gtk_vseparator_new;

// gtk.Viewport

alias c_gtk_viewport_get_type gtk_viewport_get_type;
alias c_gtk_viewport_new gtk_viewport_new;
alias c_gtk_viewport_get_bin_window gtk_viewport_get_bin_window;
alias c_gtk_viewport_get_hadjustment gtk_viewport_get_hadjustment;
alias c_gtk_viewport_get_shadow_type gtk_viewport_get_shadow_type;
alias c_gtk_viewport_get_vadjustment gtk_viewport_get_vadjustment;
alias c_gtk_viewport_get_view_window gtk_viewport_get_view_window;
alias c_gtk_viewport_set_hadjustment gtk_viewport_set_hadjustment;
alias c_gtk_viewport_set_shadow_type gtk_viewport_set_shadow_type;
alias c_gtk_viewport_set_vadjustment gtk_viewport_set_vadjustment;

// gtk.VolumeButton

alias c_gtk_volume_button_get_type gtk_volume_button_get_type;
alias c_gtk_volume_button_new gtk_volume_button_new;

// gtk.Widget

alias c_gtk_widget_get_type gtk_widget_get_type;
alias c_gtk_widget_new gtk_widget_new;
alias c_gtk_widget_get_default_direction gtk_widget_get_default_direction;
alias c_gtk_widget_get_default_style gtk_widget_get_default_style;
alias c_gtk_widget_pop_composite_child gtk_widget_pop_composite_child;
alias c_gtk_widget_push_composite_child gtk_widget_push_composite_child;
alias c_gtk_widget_set_default_direction gtk_widget_set_default_direction;
alias c_gtk_widget_activate gtk_widget_activate;
alias c_gtk_widget_add_accelerator gtk_widget_add_accelerator;
alias c_gtk_widget_add_device_events gtk_widget_add_device_events;
alias c_gtk_widget_add_events gtk_widget_add_events;
alias c_gtk_widget_add_mnemonic_label gtk_widget_add_mnemonic_label;
alias c_gtk_widget_add_tick_callback gtk_widget_add_tick_callback;
alias c_gtk_widget_can_activate_accel gtk_widget_can_activate_accel;
alias c_gtk_widget_child_focus gtk_widget_child_focus;
alias c_gtk_widget_child_notify gtk_widget_child_notify;
alias c_gtk_widget_class_path gtk_widget_class_path;
alias c_gtk_widget_compute_expand gtk_widget_compute_expand;
alias c_gtk_widget_create_pango_context gtk_widget_create_pango_context;
alias c_gtk_widget_create_pango_layout gtk_widget_create_pango_layout;
alias c_gtk_widget_destroy gtk_widget_destroy;
alias c_gtk_widget_destroyed gtk_widget_destroyed;
alias c_gtk_widget_device_is_shadowed gtk_widget_device_is_shadowed;
alias c_gtk_drag_begin gtk_drag_begin;
alias c_gtk_drag_begin_with_coordinates gtk_drag_begin_with_coordinates;
alias c_gtk_drag_check_threshold gtk_drag_check_threshold;
alias c_gtk_drag_dest_add_image_targets gtk_drag_dest_add_image_targets;
alias c_gtk_drag_dest_add_text_targets gtk_drag_dest_add_text_targets;
alias c_gtk_drag_dest_add_uri_targets gtk_drag_dest_add_uri_targets;
alias c_gtk_drag_dest_find_target gtk_drag_dest_find_target;
alias c_gtk_drag_dest_get_target_list gtk_drag_dest_get_target_list;
alias c_gtk_drag_dest_get_track_motion gtk_drag_dest_get_track_motion;
alias c_gtk_drag_dest_set gtk_drag_dest_set;
alias c_gtk_drag_dest_set_proxy gtk_drag_dest_set_proxy;
alias c_gtk_drag_dest_set_target_list gtk_drag_dest_set_target_list;
alias c_gtk_drag_dest_set_track_motion gtk_drag_dest_set_track_motion;
alias c_gtk_drag_dest_unset gtk_drag_dest_unset;
alias c_gtk_drag_get_data gtk_drag_get_data;
alias c_gtk_drag_highlight gtk_drag_highlight;
alias c_gtk_drag_source_add_image_targets gtk_drag_source_add_image_targets;
alias c_gtk_drag_source_add_text_targets gtk_drag_source_add_text_targets;
alias c_gtk_drag_source_add_uri_targets gtk_drag_source_add_uri_targets;
alias c_gtk_drag_source_get_target_list gtk_drag_source_get_target_list;
alias c_gtk_drag_source_set gtk_drag_source_set;
alias c_gtk_drag_source_set_icon_gicon gtk_drag_source_set_icon_gicon;
alias c_gtk_drag_source_set_icon_name gtk_drag_source_set_icon_name;
alias c_gtk_drag_source_set_icon_pixbuf gtk_drag_source_set_icon_pixbuf;
alias c_gtk_drag_source_set_icon_stock gtk_drag_source_set_icon_stock;
alias c_gtk_drag_source_set_target_list gtk_drag_source_set_target_list;
alias c_gtk_drag_source_unset gtk_drag_source_unset;
alias c_gtk_drag_unhighlight gtk_drag_unhighlight;
alias c_gtk_widget_draw gtk_widget_draw;
alias c_gtk_widget_ensure_style gtk_widget_ensure_style;
alias c_gtk_widget_error_bell gtk_widget_error_bell;
alias c_gtk_widget_event gtk_widget_event;
alias c_gtk_widget_freeze_child_notify gtk_widget_freeze_child_notify;
alias c_gtk_widget_get_accessible gtk_widget_get_accessible;
alias c_gtk_widget_get_action_group gtk_widget_get_action_group;
alias c_gtk_widget_get_allocated_baseline gtk_widget_get_allocated_baseline;
alias c_gtk_widget_get_allocated_height gtk_widget_get_allocated_height;
alias c_gtk_widget_get_allocated_size gtk_widget_get_allocated_size;
alias c_gtk_widget_get_allocated_width gtk_widget_get_allocated_width;
alias c_gtk_widget_get_allocation gtk_widget_get_allocation;
alias c_gtk_widget_get_ancestor gtk_widget_get_ancestor;
alias c_gtk_widget_get_app_paintable gtk_widget_get_app_paintable;
alias c_gtk_widget_get_can_default gtk_widget_get_can_default;
alias c_gtk_widget_get_can_focus gtk_widget_get_can_focus;
alias c_gtk_widget_get_child_requisition gtk_widget_get_child_requisition;
alias c_gtk_widget_get_child_visible gtk_widget_get_child_visible;
alias c_gtk_widget_get_clip gtk_widget_get_clip;
alias c_gtk_widget_get_clipboard gtk_widget_get_clipboard;
alias c_gtk_widget_get_composite_name gtk_widget_get_composite_name;
alias c_gtk_widget_get_device_enabled gtk_widget_get_device_enabled;
alias c_gtk_widget_get_device_events gtk_widget_get_device_events;
alias c_gtk_widget_get_direction gtk_widget_get_direction;
alias c_gtk_widget_get_display gtk_widget_get_display;
alias c_gtk_widget_get_double_buffered gtk_widget_get_double_buffered;
alias c_gtk_widget_get_events gtk_widget_get_events;
alias c_gtk_widget_get_focus_on_click gtk_widget_get_focus_on_click;
alias c_gtk_widget_get_font_map gtk_widget_get_font_map;
alias c_gtk_widget_get_font_options gtk_widget_get_font_options;
alias c_gtk_widget_get_frame_clock gtk_widget_get_frame_clock;
alias c_gtk_widget_get_halign gtk_widget_get_halign;
alias c_gtk_widget_get_has_tooltip gtk_widget_get_has_tooltip;
alias c_gtk_widget_get_has_window gtk_widget_get_has_window;
alias c_gtk_widget_get_hexpand gtk_widget_get_hexpand;
alias c_gtk_widget_get_hexpand_set gtk_widget_get_hexpand_set;
alias c_gtk_widget_get_mapped gtk_widget_get_mapped;
alias c_gtk_widget_get_margin_bottom gtk_widget_get_margin_bottom;
alias c_gtk_widget_get_margin_end gtk_widget_get_margin_end;
alias c_gtk_widget_get_margin_left gtk_widget_get_margin_left;
alias c_gtk_widget_get_margin_right gtk_widget_get_margin_right;
alias c_gtk_widget_get_margin_start gtk_widget_get_margin_start;
alias c_gtk_widget_get_margin_top gtk_widget_get_margin_top;
alias c_gtk_widget_get_modifier_mask gtk_widget_get_modifier_mask;
alias c_gtk_widget_get_modifier_style gtk_widget_get_modifier_style;
alias c_gtk_widget_get_name gtk_widget_get_name;
alias c_gtk_widget_get_no_show_all gtk_widget_get_no_show_all;
alias c_gtk_widget_get_opacity gtk_widget_get_opacity;
alias c_gtk_widget_get_pango_context gtk_widget_get_pango_context;
alias c_gtk_widget_get_parent gtk_widget_get_parent;
alias c_gtk_widget_get_parent_window gtk_widget_get_parent_window;
alias c_gtk_widget_get_path gtk_widget_get_path;
alias c_gtk_widget_get_pointer gtk_widget_get_pointer;
alias c_gtk_widget_get_preferred_height gtk_widget_get_preferred_height;
alias c_gtk_widget_get_preferred_height_and_baseline_for_width gtk_widget_get_preferred_height_and_baseline_for_width;
alias c_gtk_widget_get_preferred_height_for_width gtk_widget_get_preferred_height_for_width;
alias c_gtk_widget_get_preferred_size gtk_widget_get_preferred_size;
alias c_gtk_widget_get_preferred_width gtk_widget_get_preferred_width;
alias c_gtk_widget_get_preferred_width_for_height gtk_widget_get_preferred_width_for_height;
alias c_gtk_widget_get_realized gtk_widget_get_realized;
alias c_gtk_widget_get_receives_default gtk_widget_get_receives_default;
alias c_gtk_widget_get_request_mode gtk_widget_get_request_mode;
alias c_gtk_widget_get_requisition gtk_widget_get_requisition;
alias c_gtk_widget_get_root_window gtk_widget_get_root_window;
alias c_gtk_widget_get_scale_factor gtk_widget_get_scale_factor;
alias c_gtk_widget_get_screen gtk_widget_get_screen;
alias c_gtk_widget_get_sensitive gtk_widget_get_sensitive;
alias c_gtk_widget_get_settings gtk_widget_get_settings;
alias c_gtk_widget_get_size_request gtk_widget_get_size_request;
alias c_gtk_widget_get_state gtk_widget_get_state;
alias c_gtk_widget_get_state_flags gtk_widget_get_state_flags;
alias c_gtk_widget_get_style gtk_widget_get_style;
alias c_gtk_widget_get_style_context gtk_widget_get_style_context;
alias c_gtk_widget_get_support_multidevice gtk_widget_get_support_multidevice;
alias c_gtk_widget_get_template_child gtk_widget_get_template_child;
alias c_gtk_widget_get_tooltip_markup gtk_widget_get_tooltip_markup;
alias c_gtk_widget_get_tooltip_text gtk_widget_get_tooltip_text;
alias c_gtk_widget_get_tooltip_window gtk_widget_get_tooltip_window;
alias c_gtk_widget_get_toplevel gtk_widget_get_toplevel;
alias c_gtk_widget_get_valign gtk_widget_get_valign;
alias c_gtk_widget_get_valign_with_baseline gtk_widget_get_valign_with_baseline;
alias c_gtk_widget_get_vexpand gtk_widget_get_vexpand;
alias c_gtk_widget_get_vexpand_set gtk_widget_get_vexpand_set;
alias c_gtk_widget_get_visible gtk_widget_get_visible;
alias c_gtk_widget_get_visual gtk_widget_get_visual;
alias c_gtk_widget_get_window gtk_widget_get_window;
alias c_gtk_grab_add gtk_grab_add;
alias c_gtk_widget_grab_default gtk_widget_grab_default;
alias c_gtk_widget_grab_focus gtk_widget_grab_focus;
alias c_gtk_grab_remove gtk_grab_remove;
alias c_gtk_widget_has_default gtk_widget_has_default;
alias c_gtk_widget_has_focus gtk_widget_has_focus;
alias c_gtk_widget_has_grab gtk_widget_has_grab;
alias c_gtk_widget_has_rc_style gtk_widget_has_rc_style;
alias c_gtk_widget_has_screen gtk_widget_has_screen;
alias c_gtk_widget_has_visible_focus gtk_widget_has_visible_focus;
alias c_gtk_widget_hide gtk_widget_hide;
alias c_gtk_widget_hide_on_delete gtk_widget_hide_on_delete;
alias c_gtk_widget_in_destruction gtk_widget_in_destruction;
alias c_gtk_widget_init_template gtk_widget_init_template;
alias c_gtk_widget_input_shape_combine_region gtk_widget_input_shape_combine_region;
alias c_gtk_widget_insert_action_group gtk_widget_insert_action_group;
alias c_gtk_widget_intersect gtk_widget_intersect;
alias c_gtk_widget_is_ancestor gtk_widget_is_ancestor;
alias c_gtk_widget_is_composited gtk_widget_is_composited;
alias c_gtk_widget_is_drawable gtk_widget_is_drawable;
alias c_gtk_widget_is_focus gtk_widget_is_focus;
alias c_gtk_widget_is_sensitive gtk_widget_is_sensitive;
alias c_gtk_widget_is_toplevel gtk_widget_is_toplevel;
alias c_gtk_widget_is_visible gtk_widget_is_visible;
alias c_gtk_widget_keynav_failed gtk_widget_keynav_failed;
alias c_gtk_widget_list_accel_closures gtk_widget_list_accel_closures;
alias c_gtk_widget_list_action_prefixes gtk_widget_list_action_prefixes;
alias c_gtk_widget_list_mnemonic_labels gtk_widget_list_mnemonic_labels;
alias c_gtk_widget_map gtk_widget_map;
alias c_gtk_widget_mnemonic_activate gtk_widget_mnemonic_activate;
alias c_gtk_widget_modify_base gtk_widget_modify_base;
alias c_gtk_widget_modify_bg gtk_widget_modify_bg;
alias c_gtk_widget_modify_cursor gtk_widget_modify_cursor;
alias c_gtk_widget_modify_fg gtk_widget_modify_fg;
alias c_gtk_widget_modify_font gtk_widget_modify_font;
alias c_gtk_widget_modify_style gtk_widget_modify_style;
alias c_gtk_widget_modify_text gtk_widget_modify_text;
alias c_gtk_widget_override_background_color gtk_widget_override_background_color;
alias c_gtk_widget_override_color gtk_widget_override_color;
alias c_gtk_widget_override_cursor gtk_widget_override_cursor;
alias c_gtk_widget_override_font gtk_widget_override_font;
alias c_gtk_widget_override_symbolic_color gtk_widget_override_symbolic_color;
alias c_gtk_widget_path gtk_widget_path;
alias c_gtk_widget_queue_allocate gtk_widget_queue_allocate;
alias c_gtk_widget_queue_compute_expand gtk_widget_queue_compute_expand;
alias c_gtk_widget_queue_draw gtk_widget_queue_draw;
alias c_gtk_widget_queue_draw_area gtk_widget_queue_draw_area;
alias c_gtk_widget_queue_draw_region gtk_widget_queue_draw_region;
alias c_gtk_widget_queue_resize gtk_widget_queue_resize;
alias c_gtk_widget_queue_resize_no_redraw gtk_widget_queue_resize_no_redraw;
alias c_gtk_widget_realize gtk_widget_realize;
alias c_gtk_widget_region_intersect gtk_widget_region_intersect;
alias c_gtk_widget_register_window gtk_widget_register_window;
alias c_gtk_widget_remove_accelerator gtk_widget_remove_accelerator;
alias c_gtk_widget_remove_mnemonic_label gtk_widget_remove_mnemonic_label;
alias c_gtk_widget_remove_tick_callback gtk_widget_remove_tick_callback;
alias c_gtk_widget_render_icon gtk_widget_render_icon;
alias c_gtk_widget_render_icon_pixbuf gtk_widget_render_icon_pixbuf;
alias c_gtk_widget_reparent gtk_widget_reparent;
alias c_gtk_widget_reset_rc_styles gtk_widget_reset_rc_styles;
alias c_gtk_widget_reset_style gtk_widget_reset_style;
alias c_gtk_widget_send_expose gtk_widget_send_expose;
alias c_gtk_widget_send_focus_change gtk_widget_send_focus_change;
alias c_gtk_widget_set_accel_path gtk_widget_set_accel_path;
alias c_gtk_widget_set_allocation gtk_widget_set_allocation;
alias c_gtk_widget_set_app_paintable gtk_widget_set_app_paintable;
alias c_gtk_widget_set_can_default gtk_widget_set_can_default;
alias c_gtk_widget_set_can_focus gtk_widget_set_can_focus;
alias c_gtk_widget_set_child_visible gtk_widget_set_child_visible;
alias c_gtk_widget_set_clip gtk_widget_set_clip;
alias c_gtk_widget_set_composite_name gtk_widget_set_composite_name;
alias c_gtk_widget_set_device_enabled gtk_widget_set_device_enabled;
alias c_gtk_widget_set_device_events gtk_widget_set_device_events;
alias c_gtk_widget_set_direction gtk_widget_set_direction;
alias c_gtk_widget_set_double_buffered gtk_widget_set_double_buffered;
alias c_gtk_widget_set_events gtk_widget_set_events;
alias c_gtk_widget_set_focus_on_click gtk_widget_set_focus_on_click;
alias c_gtk_widget_set_font_map gtk_widget_set_font_map;
alias c_gtk_widget_set_font_options gtk_widget_set_font_options;
alias c_gtk_widget_set_halign gtk_widget_set_halign;
alias c_gtk_widget_set_has_tooltip gtk_widget_set_has_tooltip;
alias c_gtk_widget_set_has_window gtk_widget_set_has_window;
alias c_gtk_widget_set_hexpand gtk_widget_set_hexpand;
alias c_gtk_widget_set_hexpand_set gtk_widget_set_hexpand_set;
alias c_gtk_widget_set_mapped gtk_widget_set_mapped;
alias c_gtk_widget_set_margin_bottom gtk_widget_set_margin_bottom;
alias c_gtk_widget_set_margin_end gtk_widget_set_margin_end;
alias c_gtk_widget_set_margin_left gtk_widget_set_margin_left;
alias c_gtk_widget_set_margin_right gtk_widget_set_margin_right;
alias c_gtk_widget_set_margin_start gtk_widget_set_margin_start;
alias c_gtk_widget_set_margin_top gtk_widget_set_margin_top;
alias c_gtk_widget_set_name gtk_widget_set_name;
alias c_gtk_widget_set_no_show_all gtk_widget_set_no_show_all;
alias c_gtk_widget_set_opacity gtk_widget_set_opacity;
alias c_gtk_widget_set_parent gtk_widget_set_parent;
alias c_gtk_widget_set_parent_window gtk_widget_set_parent_window;
alias c_gtk_widget_set_realized gtk_widget_set_realized;
alias c_gtk_widget_set_receives_default gtk_widget_set_receives_default;
alias c_gtk_widget_set_redraw_on_allocate gtk_widget_set_redraw_on_allocate;
alias c_gtk_widget_set_sensitive gtk_widget_set_sensitive;
alias c_gtk_widget_set_size_request gtk_widget_set_size_request;
alias c_gtk_widget_set_state gtk_widget_set_state;
alias c_gtk_widget_set_state_flags gtk_widget_set_state_flags;
alias c_gtk_widget_set_style gtk_widget_set_style;
alias c_gtk_widget_set_support_multidevice gtk_widget_set_support_multidevice;
alias c_gtk_widget_set_tooltip_markup gtk_widget_set_tooltip_markup;
alias c_gtk_widget_set_tooltip_text gtk_widget_set_tooltip_text;
alias c_gtk_widget_set_tooltip_window gtk_widget_set_tooltip_window;
alias c_gtk_widget_set_valign gtk_widget_set_valign;
alias c_gtk_widget_set_vexpand gtk_widget_set_vexpand;
alias c_gtk_widget_set_vexpand_set gtk_widget_set_vexpand_set;
alias c_gtk_widget_set_visible gtk_widget_set_visible;
alias c_gtk_widget_set_visual gtk_widget_set_visual;
alias c_gtk_widget_set_window gtk_widget_set_window;
alias c_gtk_widget_shape_combine_region gtk_widget_shape_combine_region;
alias c_gtk_widget_show gtk_widget_show;
alias c_gtk_widget_show_all gtk_widget_show_all;
alias c_gtk_widget_show_now gtk_widget_show_now;
alias c_gtk_widget_size_allocate gtk_widget_size_allocate;
alias c_gtk_widget_size_allocate_with_baseline gtk_widget_size_allocate_with_baseline;
alias c_gtk_widget_size_request gtk_widget_size_request;
alias c_gtk_widget_style_attach gtk_widget_style_attach;
alias c_gtk_widget_style_get gtk_widget_style_get;
alias c_gtk_widget_style_get_property gtk_widget_style_get_property;
alias c_gtk_widget_style_get_valist gtk_widget_style_get_valist;
alias c_gtk_widget_thaw_child_notify gtk_widget_thaw_child_notify;
alias c_gtk_widget_translate_coordinates gtk_widget_translate_coordinates;
alias c_gtk_widget_trigger_tooltip_query gtk_widget_trigger_tooltip_query;
alias c_gtk_widget_unmap gtk_widget_unmap;
alias c_gtk_widget_unparent gtk_widget_unparent;
alias c_gtk_widget_unrealize gtk_widget_unrealize;
alias c_gtk_widget_unregister_window gtk_widget_unregister_window;
alias c_gtk_widget_unset_state_flags gtk_widget_unset_state_flags;
alias c_gtk_cairo_should_draw_window gtk_cairo_should_draw_window;
alias c_gtk_cairo_transform_to_window gtk_cairo_transform_to_window;
alias c_gtk_distribute_natural_allocation gtk_distribute_natural_allocation;

// gtk.WidgetAccessible

alias c_gtk_widget_accessible_get_type gtk_widget_accessible_get_type;

// gtk.WidgetClass

alias c_gtk_widget_class_bind_template_callback_full gtk_widget_class_bind_template_callback_full;
alias c_gtk_widget_class_bind_template_child_full gtk_widget_class_bind_template_child_full;
alias c_gtk_widget_class_find_style_property gtk_widget_class_find_style_property;
alias c_gtk_widget_class_get_css_name gtk_widget_class_get_css_name;
alias c_gtk_widget_class_install_style_property gtk_widget_class_install_style_property;
alias c_gtk_widget_class_install_style_property_parser gtk_widget_class_install_style_property_parser;
alias c_gtk_widget_class_list_style_properties gtk_widget_class_list_style_properties;
alias c_gtk_widget_class_set_accessible_role gtk_widget_class_set_accessible_role;
alias c_gtk_widget_class_set_accessible_type gtk_widget_class_set_accessible_type;
alias c_gtk_widget_class_set_connect_func gtk_widget_class_set_connect_func;
alias c_gtk_widget_class_set_css_name gtk_widget_class_set_css_name;
alias c_gtk_widget_class_set_template gtk_widget_class_set_template;
alias c_gtk_widget_class_set_template_from_resource gtk_widget_class_set_template_from_resource;

// gtk.WidgetPath

alias c_gtk_widget_path_get_type gtk_widget_path_get_type;
alias c_gtk_widget_path_new gtk_widget_path_new;
alias c_gtk_widget_path_append_for_widget gtk_widget_path_append_for_widget;
alias c_gtk_widget_path_append_type gtk_widget_path_append_type;
alias c_gtk_widget_path_append_with_siblings gtk_widget_path_append_with_siblings;
alias c_gtk_widget_path_copy gtk_widget_path_copy;
alias c_gtk_widget_path_free gtk_widget_path_free;
alias c_gtk_widget_path_get_object_type gtk_widget_path_get_object_type;
alias c_gtk_widget_path_has_parent gtk_widget_path_has_parent;
alias c_gtk_widget_path_is_type gtk_widget_path_is_type;
alias c_gtk_widget_path_iter_add_class gtk_widget_path_iter_add_class;
alias c_gtk_widget_path_iter_add_region gtk_widget_path_iter_add_region;
alias c_gtk_widget_path_iter_clear_classes gtk_widget_path_iter_clear_classes;
alias c_gtk_widget_path_iter_clear_regions gtk_widget_path_iter_clear_regions;
alias c_gtk_widget_path_iter_get_name gtk_widget_path_iter_get_name;
alias c_gtk_widget_path_iter_get_object_name gtk_widget_path_iter_get_object_name;
alias c_gtk_widget_path_iter_get_object_type gtk_widget_path_iter_get_object_type;
alias c_gtk_widget_path_iter_get_sibling_index gtk_widget_path_iter_get_sibling_index;
alias c_gtk_widget_path_iter_get_siblings gtk_widget_path_iter_get_siblings;
alias c_gtk_widget_path_iter_get_state gtk_widget_path_iter_get_state;
alias c_gtk_widget_path_iter_has_class gtk_widget_path_iter_has_class;
alias c_gtk_widget_path_iter_has_name gtk_widget_path_iter_has_name;
alias c_gtk_widget_path_iter_has_qclass gtk_widget_path_iter_has_qclass;
alias c_gtk_widget_path_iter_has_qname gtk_widget_path_iter_has_qname;
alias c_gtk_widget_path_iter_has_qregion gtk_widget_path_iter_has_qregion;
alias c_gtk_widget_path_iter_has_region gtk_widget_path_iter_has_region;
alias c_gtk_widget_path_iter_list_classes gtk_widget_path_iter_list_classes;
alias c_gtk_widget_path_iter_list_regions gtk_widget_path_iter_list_regions;
alias c_gtk_widget_path_iter_remove_class gtk_widget_path_iter_remove_class;
alias c_gtk_widget_path_iter_remove_region gtk_widget_path_iter_remove_region;
alias c_gtk_widget_path_iter_set_name gtk_widget_path_iter_set_name;
alias c_gtk_widget_path_iter_set_object_name gtk_widget_path_iter_set_object_name;
alias c_gtk_widget_path_iter_set_object_type gtk_widget_path_iter_set_object_type;
alias c_gtk_widget_path_iter_set_state gtk_widget_path_iter_set_state;
alias c_gtk_widget_path_length gtk_widget_path_length;
alias c_gtk_widget_path_prepend_type gtk_widget_path_prepend_type;
alias c_gtk_widget_path_ref gtk_widget_path_ref;
alias c_gtk_widget_path_to_string gtk_widget_path_to_string;
alias c_gtk_widget_path_unref gtk_widget_path_unref;

// gtk.Window

alias c_gtk_window_get_type gtk_window_get_type;
alias c_gtk_window_new gtk_window_new;
alias c_gtk_window_get_default_icon_list gtk_window_get_default_icon_list;
alias c_gtk_window_get_default_icon_name gtk_window_get_default_icon_name;
alias c_gtk_window_list_toplevels gtk_window_list_toplevels;
alias c_gtk_window_set_auto_startup_notification gtk_window_set_auto_startup_notification;
alias c_gtk_window_set_default_icon gtk_window_set_default_icon;
alias c_gtk_window_set_default_icon_from_file gtk_window_set_default_icon_from_file;
alias c_gtk_window_set_default_icon_list gtk_window_set_default_icon_list;
alias c_gtk_window_set_default_icon_name gtk_window_set_default_icon_name;
alias c_gtk_window_set_interactive_debugging gtk_window_set_interactive_debugging;
alias c_gtk_window_activate_default gtk_window_activate_default;
alias c_gtk_window_activate_focus gtk_window_activate_focus;
alias c_gtk_window_activate_key gtk_window_activate_key;
alias c_gtk_window_add_accel_group gtk_window_add_accel_group;
alias c_gtk_window_add_mnemonic gtk_window_add_mnemonic;
alias c_gtk_window_begin_move_drag gtk_window_begin_move_drag;
alias c_gtk_window_begin_resize_drag gtk_window_begin_resize_drag;
alias c_gtk_window_close gtk_window_close;
alias c_gtk_window_deiconify gtk_window_deiconify;
alias c_gtk_window_fullscreen gtk_window_fullscreen;
alias c_gtk_window_fullscreen_on_monitor gtk_window_fullscreen_on_monitor;
alias c_gtk_window_get_accept_focus gtk_window_get_accept_focus;
alias c_gtk_window_get_application gtk_window_get_application;
alias c_gtk_window_get_attached_to gtk_window_get_attached_to;
alias c_gtk_window_get_decorated gtk_window_get_decorated;
alias c_gtk_window_get_default_size gtk_window_get_default_size;
alias c_gtk_window_get_default_widget gtk_window_get_default_widget;
alias c_gtk_window_get_deletable gtk_window_get_deletable;
alias c_gtk_window_get_destroy_with_parent gtk_window_get_destroy_with_parent;
alias c_gtk_window_get_focus gtk_window_get_focus;
alias c_gtk_window_get_focus_on_map gtk_window_get_focus_on_map;
alias c_gtk_window_get_focus_visible gtk_window_get_focus_visible;
alias c_gtk_window_get_gravity gtk_window_get_gravity;
alias c_gtk_window_get_group gtk_window_get_group;
alias c_gtk_window_get_has_resize_grip gtk_window_get_has_resize_grip;
alias c_gtk_window_get_hide_titlebar_when_maximized gtk_window_get_hide_titlebar_when_maximized;
alias c_gtk_window_get_icon gtk_window_get_icon;
alias c_gtk_window_get_icon_list gtk_window_get_icon_list;
alias c_gtk_window_get_icon_name gtk_window_get_icon_name;
alias c_gtk_window_get_mnemonic_modifier gtk_window_get_mnemonic_modifier;
alias c_gtk_window_get_mnemonics_visible gtk_window_get_mnemonics_visible;
alias c_gtk_window_get_modal gtk_window_get_modal;
alias c_gtk_window_get_opacity gtk_window_get_opacity;
alias c_gtk_window_get_position gtk_window_get_position;
alias c_gtk_window_get_resizable gtk_window_get_resizable;
alias c_gtk_window_get_resize_grip_area gtk_window_get_resize_grip_area;
alias c_gtk_window_get_role gtk_window_get_role;
alias c_gtk_window_get_screen gtk_window_get_screen;
alias c_gtk_window_get_size gtk_window_get_size;
alias c_gtk_window_get_skip_pager_hint gtk_window_get_skip_pager_hint;
alias c_gtk_window_get_skip_taskbar_hint gtk_window_get_skip_taskbar_hint;
alias c_gtk_window_get_title gtk_window_get_title;
alias c_gtk_window_get_titlebar gtk_window_get_titlebar;
alias c_gtk_window_get_transient_for gtk_window_get_transient_for;
alias c_gtk_window_get_type_hint gtk_window_get_type_hint;
alias c_gtk_window_get_urgency_hint gtk_window_get_urgency_hint;
alias c_gtk_window_get_window_type gtk_window_get_window_type;
alias c_gtk_window_has_group gtk_window_has_group;
alias c_gtk_window_has_toplevel_focus gtk_window_has_toplevel_focus;
alias c_gtk_window_iconify gtk_window_iconify;
alias c_gtk_window_is_active gtk_window_is_active;
alias c_gtk_window_is_maximized gtk_window_is_maximized;
alias c_gtk_window_maximize gtk_window_maximize;
alias c_gtk_window_mnemonic_activate gtk_window_mnemonic_activate;
alias c_gtk_window_move gtk_window_move;
alias c_gtk_window_parse_geometry gtk_window_parse_geometry;
alias c_gtk_window_present gtk_window_present;
alias c_gtk_window_present_with_time gtk_window_present_with_time;
alias c_gtk_window_propagate_key_event gtk_window_propagate_key_event;
alias c_gtk_window_remove_accel_group gtk_window_remove_accel_group;
alias c_gtk_window_remove_mnemonic gtk_window_remove_mnemonic;
alias c_gtk_window_reshow_with_initial_size gtk_window_reshow_with_initial_size;
alias c_gtk_window_resize gtk_window_resize;
alias c_gtk_window_resize_grip_is_visible gtk_window_resize_grip_is_visible;
alias c_gtk_window_resize_to_geometry gtk_window_resize_to_geometry;
alias c_gtk_window_set_accept_focus gtk_window_set_accept_focus;
alias c_gtk_window_set_application gtk_window_set_application;
alias c_gtk_window_set_attached_to gtk_window_set_attached_to;
alias c_gtk_window_set_decorated gtk_window_set_decorated;
alias c_gtk_window_set_default gtk_window_set_default;
alias c_gtk_window_set_default_geometry gtk_window_set_default_geometry;
alias c_gtk_window_set_default_size gtk_window_set_default_size;
alias c_gtk_window_set_deletable gtk_window_set_deletable;
alias c_gtk_window_set_destroy_with_parent gtk_window_set_destroy_with_parent;
alias c_gtk_window_set_focus gtk_window_set_focus;
alias c_gtk_window_set_focus_on_map gtk_window_set_focus_on_map;
alias c_gtk_window_set_focus_visible gtk_window_set_focus_visible;
alias c_gtk_window_set_geometry_hints gtk_window_set_geometry_hints;
alias c_gtk_window_set_gravity gtk_window_set_gravity;
alias c_gtk_window_set_has_resize_grip gtk_window_set_has_resize_grip;
alias c_gtk_window_set_has_user_ref_count gtk_window_set_has_user_ref_count;
alias c_gtk_window_set_hide_titlebar_when_maximized gtk_window_set_hide_titlebar_when_maximized;
alias c_gtk_window_set_icon gtk_window_set_icon;
alias c_gtk_window_set_icon_from_file gtk_window_set_icon_from_file;
alias c_gtk_window_set_icon_list gtk_window_set_icon_list;
alias c_gtk_window_set_icon_name gtk_window_set_icon_name;
alias c_gtk_window_set_keep_above gtk_window_set_keep_above;
alias c_gtk_window_set_keep_below gtk_window_set_keep_below;
alias c_gtk_window_set_mnemonic_modifier gtk_window_set_mnemonic_modifier;
alias c_gtk_window_set_mnemonics_visible gtk_window_set_mnemonics_visible;
alias c_gtk_window_set_modal gtk_window_set_modal;
alias c_gtk_window_set_opacity gtk_window_set_opacity;
alias c_gtk_window_set_position gtk_window_set_position;
alias c_gtk_window_set_resizable gtk_window_set_resizable;
alias c_gtk_window_set_role gtk_window_set_role;
alias c_gtk_window_set_screen gtk_window_set_screen;
alias c_gtk_window_set_skip_pager_hint gtk_window_set_skip_pager_hint;
alias c_gtk_window_set_skip_taskbar_hint gtk_window_set_skip_taskbar_hint;
alias c_gtk_window_set_startup_id gtk_window_set_startup_id;
alias c_gtk_window_set_title gtk_window_set_title;
alias c_gtk_window_set_titlebar gtk_window_set_titlebar;
alias c_gtk_window_set_transient_for gtk_window_set_transient_for;
alias c_gtk_window_set_type_hint gtk_window_set_type_hint;
alias c_gtk_window_set_urgency_hint gtk_window_set_urgency_hint;
alias c_gtk_window_set_wmclass gtk_window_set_wmclass;
alias c_gtk_window_stick gtk_window_stick;
alias c_gtk_window_unfullscreen gtk_window_unfullscreen;
alias c_gtk_window_unmaximize gtk_window_unmaximize;
alias c_gtk_window_unstick gtk_window_unstick;
alias c_gtk_show_uri_on_window gtk_show_uri_on_window;

// gtk.WindowAccessible

alias c_gtk_window_accessible_get_type gtk_window_accessible_get_type;

// gtk.WindowGroup

alias c_gtk_window_group_get_type gtk_window_group_get_type;
alias c_gtk_window_group_new gtk_window_group_new;
alias c_gtk_window_group_add_window gtk_window_group_add_window;
alias c_gtk_window_group_get_current_device_grab gtk_window_group_get_current_device_grab;
alias c_gtk_window_group_get_current_grab gtk_window_group_get_current_grab;
alias c_gtk_window_group_list_windows gtk_window_group_list_windows;
alias c_gtk_window_group_remove_window gtk_window_group_remove_window;

// gtk.Main

alias c_gtk_device_grab_add gtk_device_grab_add;
alias c_gtk_device_grab_remove gtk_device_grab_remove;
alias c_gtk_disable_setlocale gtk_disable_setlocale;
alias c_gtk_events_pending gtk_events_pending;
alias c_gtk_get_current_event gtk_get_current_event;
alias c_gtk_get_current_event_device gtk_get_current_event_device;
alias c_gtk_get_current_event_state gtk_get_current_event_state;
alias c_gtk_get_current_event_time gtk_get_current_event_time;
alias c_gtk_get_debug_flags gtk_get_debug_flags;
alias c_gtk_get_default_language gtk_get_default_language;
alias c_gtk_get_event_widget gtk_get_event_widget;
alias c_gtk_get_locale_direction gtk_get_locale_direction;
alias c_gtk_get_option_group gtk_get_option_group;
alias c_gtk_grab_get_current gtk_grab_get_current;
alias c_gtk_init gtk_init;
alias c_gtk_init_check gtk_init_check;
alias c_gtk_init_with_args gtk_init_with_args;
alias c_gtk_key_snooper_install gtk_key_snooper_install;
alias c_gtk_key_snooper_remove gtk_key_snooper_remove;
alias c_gtk_main gtk_main;
alias c_gtk_main_do_event gtk_main_do_event;
alias c_gtk_main_iteration gtk_main_iteration;
alias c_gtk_main_iteration_do gtk_main_iteration_do;
alias c_gtk_main_level gtk_main_level;
alias c_gtk_main_quit gtk_main_quit;
alias c_gtk_parse_args gtk_parse_args;
alias c_gtk_propagate_event gtk_propagate_event;
alias c_gtk_set_debug_flags gtk_set_debug_flags;

// gtk.Testing

alias c_gtk_test_create_simple_window gtk_test_create_simple_window;
alias c_gtk_test_create_widget gtk_test_create_widget;
alias c_gtk_test_display_button_window gtk_test_display_button_window;
alias c_gtk_test_find_label gtk_test_find_label;
alias c_gtk_test_find_sibling gtk_test_find_sibling;
alias c_gtk_test_find_widget gtk_test_find_widget;
alias c_gtk_test_init gtk_test_init;
alias c_gtk_test_list_all_types gtk_test_list_all_types;
alias c_gtk_test_register_all_types gtk_test_register_all_types;
alias c_gtk_test_slider_get_value gtk_test_slider_get_value;
alias c_gtk_test_slider_set_perc gtk_test_slider_set_perc;
alias c_gtk_test_spin_button_click gtk_test_spin_button_click;
alias c_gtk_test_text_get gtk_test_text_get;
alias c_gtk_test_text_set gtk_test_text_set;
alias c_gtk_test_widget_click gtk_test_widget_click;
alias c_gtk_test_widget_send_key gtk_test_widget_send_key;
alias c_gtk_test_widget_wait_for_draw gtk_test_widget_wait_for_draw;

// gtk.DragAndDrop

alias c_gtk_drag_cancel gtk_drag_cancel;
alias c_gtk_drag_finish gtk_drag_finish;
alias c_gtk_drag_get_source_widget gtk_drag_get_source_widget;
alias c_gtk_drag_set_icon_default gtk_drag_set_icon_default;
alias c_gtk_drag_set_icon_gicon gtk_drag_set_icon_gicon;
alias c_gtk_drag_set_icon_name gtk_drag_set_icon_name;
alias c_gtk_drag_set_icon_pixbuf gtk_drag_set_icon_pixbuf;
alias c_gtk_drag_set_icon_stock gtk_drag_set_icon_stock;
alias c_gtk_drag_set_icon_surface gtk_drag_set_icon_surface;
alias c_gtk_drag_set_icon_widget gtk_drag_set_icon_widget;
alias c_gtk_draw_insertion_cursor gtk_draw_insertion_cursor;

// gtk.IconSize

alias c_gtk_icon_size_from_name gtk_icon_size_from_name;
alias c_gtk_icon_size_get_name gtk_icon_size_get_name;
alias c_gtk_icon_size_lookup gtk_icon_size_lookup;
alias c_gtk_icon_size_lookup_for_settings gtk_icon_size_lookup_for_settings;
alias c_gtk_icon_size_register gtk_icon_size_register;
alias c_gtk_icon_size_register_alias gtk_icon_size_register_alias;

// gtk.Version

alias c_gtk_check_version gtk_check_version;
alias c_gtk_get_binary_age gtk_get_binary_age;
alias c_gtk_get_interface_age gtk_get_interface_age;
alias c_gtk_get_major_version gtk_get_major_version;
alias c_gtk_get_micro_version gtk_get_micro_version;
alias c_gtk_get_minor_version gtk_get_minor_version;
